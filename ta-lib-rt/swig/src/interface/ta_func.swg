/* TA-LIB Copyright (c) 1999-2008, Mario Fortier
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimer in
 *   the documentation and/or other materials provided with the
 *   distribution.
 *
 * - Neither name of author nor the names of its contributors
 *   may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* DO NOT MODIFY this file.
 * This file is automatically generated by gen_code.
 *
 * If you are not re-building an interface with SWIG (which is most
 * likely the case), just ignore this file.
 */
 

/*
 * TA_ACCBANDS - Acceleration Bands
 * 
 * Input  = High, Low, Close
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ACCBANDS( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outRealUpperBand */,
                        double       *OUT_ARRAY /* outRealMiddleBand */,
                        double       *OUT_ARRAY /* outRealLowerBand */ );

int TA_ACCBANDS_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ACCBANDS_Data {
                        double       inHigh;
                        double       inLow;
                        double       inClose;
                        };
struct TA_ACCBANDS_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_ACCBANDS_Data* memory;
                         void*        stateSMA1;
                         void*        stateSMA2;
                         void*        stateSMA3;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_ACCBANDS_StateInit( struct TA_ACCBANDS_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_ACCBANDS_State( struct TA_ACCBANDS_State* _state,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            double        *outRealUpperBand,
                            double        *outRealMiddleBand,
                            double        *outRealLowerBand );

TA_RetCode TA_ACCBANDS_BatchState( struct TA_ACCBANDS_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 const double inClose[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outRealUpperBand[],
                                 double        outRealMiddleBand[],
                                 double        outRealLowerBand[] );

TA_RetCode TA_ACCBANDS_StateFree( struct TA_ACCBANDS_State** _state );


TA_RetCode TA_ACCBANDS_StateSave( struct TA_ACCBANDS_State* _state,
                                FILE* _file );


TA_RetCode TA_ACCBANDS_StateLoad( struct TA_ACCBANDS_State** _state,
                                FILE* _file );



/*
 * TA_ACOS - Vector Trigonometric ACos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ACOS( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ACOS_Lookback( void );


struct TA_ACOS_Data {
                    double       inReal;
                    };
struct TA_ACOS_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ACOS_Data* memory;
                     };


TA_RetCode TA_ACOS_StateInit( struct TA_ACOS_State** _state );


TA_RetCode TA_ACOS_State( struct TA_ACOS_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_ACOS_BatchState( struct TA_ACOS_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ACOS_StateFree( struct TA_ACOS_State** _state );


TA_RetCode TA_ACOS_StateSave( struct TA_ACOS_State* _state,
                            FILE* _file );


TA_RetCode TA_ACOS_StateLoad( struct TA_ACOS_State** _state,
                            FILE* _file );



/*
 * TA_AD - Chaikin A/D Line
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_AD( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inHigh */,
                  const double *IN_ARRAY /* inLow */,
                  const double *IN_ARRAY /* inClose */,
                  const double *IN_ARRAY /* inVolume */,
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_AD_Lookback( void );


struct TA_AD_Data {
                  double       inHigh;
                  double       inLow;
                  double       inClose;
                  double       inVolume;
                  };
struct TA_AD_State {
                   size_t mem_size;
                   size_t mem_index;
                   struct TA_AD_Data* memory;
                   double       ad;
                   };


TA_RetCode TA_AD_StateInit( struct TA_AD_State** _state );


TA_RetCode TA_AD_State( struct TA_AD_State* _state,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      const double inVolume,
                      double        *outReal );

TA_RetCode TA_AD_BatchState( struct TA_AD_State* _state,
                           int startIdx,
                           int endIdx,
                           const double inHigh[],
                           const double inLow[],
                           const double inClose[],
                           const double inVolume[],
                           int          *outBegIdx,
                           int          *outNBElement,
                           double        outReal[] );

TA_RetCode TA_AD_StateFree( struct TA_AD_State** _state );


TA_RetCode TA_AD_StateSave( struct TA_AD_State* _state,
                          FILE* _file );


TA_RetCode TA_AD_StateLoad( struct TA_AD_State** _state,
                          FILE* _file );



/*
 * TA_ADD - Vector Arithmetic Add
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_ADD( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ADD_Lookback( void );


struct TA_ADD_Data {
                   double       inReal0;
                   double       inReal1;
                   };
struct TA_ADD_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_ADD_Data* memory;
                    };


TA_RetCode TA_ADD_StateInit( struct TA_ADD_State** _state );


TA_RetCode TA_ADD_State( struct TA_ADD_State* _state,
                       const double inReal0,
                       const double inReal1,
                       double        *outReal );

TA_RetCode TA_ADD_BatchState( struct TA_ADD_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal0[],
                            const double inReal1[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_ADD_StateFree( struct TA_ADD_State** _state );


TA_RetCode TA_ADD_StateSave( struct TA_ADD_State* _state,
                           FILE* _file );


TA_RetCode TA_ADD_StateLoad( struct TA_ADD_State** _state,
                           FILE* _file );



/*
 * TA_ADOSC - Chaikin A/D Oscillator
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * 
 */
TA_RetCode TA_ADOSC( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     const double *IN_ARRAY /* inVolume */,
                     int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                     int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_ADOSC_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                     int           optInSlowPeriod );  /* From 2 to 100000 */


struct TA_ADOSC_Data {
                     double       inHigh;
                     double       inLow;
                     double       inClose;
                     double       inVolume;
                     };
struct TA_ADOSC_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_ADOSC_Data* memory;
                      double       slowk;
                      double       one_minus_slowk;
                      double       fastk;
                      double       one_minus_fastk;
                      double       ad;
                      double       fastEMA;
                      double       slowEMA;
                      int           optInFastPeriod; /* From 2 to 100000 */
                      int           optInSlowPeriod; /* From 2 to 100000 */
                      };


TA_RetCode TA_ADOSC_StateInit( struct TA_ADOSC_State** _state,
                             int           optInFastPeriod, /* From 2 to 100000 */
                             int           optInSlowPeriod );  /* From 2 to 100000 */


TA_RetCode TA_ADOSC_State( struct TA_ADOSC_State* _state,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         const double inVolume,
                         double        *outReal );

TA_RetCode TA_ADOSC_BatchState( struct TA_ADOSC_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inHigh[],
                              const double inLow[],
                              const double inClose[],
                              const double inVolume[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outReal[] );

TA_RetCode TA_ADOSC_StateFree( struct TA_ADOSC_State** _state );


TA_RetCode TA_ADOSC_StateSave( struct TA_ADOSC_State* _state,
                             FILE* _file );


TA_RetCode TA_ADOSC_StateLoad( struct TA_ADOSC_State** _state,
                             FILE* _file );



/*
 * TA_ADX - Average Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADX( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ADX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ADX_Data {
                   double       inHigh;
                   double       inLow;
                   double       inClose;
                   };
struct TA_ADX_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_ADX_Data* memory;
                    double       prevHigh;
                    double       prevLow;
                    double       prevClose;
                    double       prevMinusDM;
                    double       prevPlusDM;
                    double       prevTR;
                    double       prevADX;
                    double       sumDX;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_ADX_StateInit( struct TA_ADX_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_ADX_State( struct TA_ADX_State* _state,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       double        *outReal );

TA_RetCode TA_ADX_BatchState( struct TA_ADX_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inHigh[],
                            const double inLow[],
                            const double inClose[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_ADX_StateFree( struct TA_ADX_State** _state );


TA_RetCode TA_ADX_StateSave( struct TA_ADX_State* _state,
                           FILE* _file );


TA_RetCode TA_ADX_StateLoad( struct TA_ADX_State** _state,
                           FILE* _file );



/*
 * TA_ADXR - Average Directional Movement Index Rating
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ADXR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inHigh */,
                    const double *IN_ARRAY /* inLow */,
                    const double *IN_ARRAY /* inClose */,
                    int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ADXR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_ADXR_Data {
                    double       inHigh;
                    double       inLow;
                    double       inClose;
                    };
struct TA_ADXR_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ADXR_Data* memory;
                     void*        ADXState;
                     int           optInTimePeriod; /* From 2 to 100000 */
                     };


TA_RetCode TA_ADXR_StateInit( struct TA_ADXR_State** _state,
                            int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_ADXR_State( struct TA_ADXR_State* _state,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        double        *outReal );

TA_RetCode TA_ADXR_BatchState( struct TA_ADXR_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inHigh[],
                             const double inLow[],
                             const double inClose[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ADXR_StateFree( struct TA_ADXR_State** _state );


TA_RetCode TA_ADXR_StateSave( struct TA_ADXR_State* _state,
                            FILE* _file );


TA_RetCode TA_ADXR_StateLoad( struct TA_ADXR_State** _state,
                            FILE* _file );



/*
 * TA_APO - Absolute Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_APO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                   int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                   TA_MAType     OPT_MATYPE /* optInMAType */,                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_APO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                   int           optInSlowPeriod, /* From 2 to 100000 */
                   TA_MAType     optInMAType ); 

struct TA_APO_Data {
                   double       inReal;
                   };
struct TA_APO_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_APO_Data* memory;
                    void*        fastMAState;
                    void*        slowMAState;
                    int          doPercentageOutput;
                    int           optInFastPeriod; /* From 2 to 100000 */
                    int           optInSlowPeriod; /* From 2 to 100000 */
                    TA_MAType     optInMAType;                    };


TA_RetCode TA_APO_StateInit( struct TA_APO_State** _state,
                           int           optInFastPeriod, /* From 2 to 100000 */
                           int           optInSlowPeriod, /* From 2 to 100000 */
                           TA_MAType     optInMAType ); 

TA_RetCode TA_APO_State( struct TA_APO_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_APO_BatchState( struct TA_APO_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_APO_StateFree( struct TA_APO_State** _state );


TA_RetCode TA_APO_StateSave( struct TA_APO_State* _state,
                           FILE* _file );


TA_RetCode TA_APO_StateLoad( struct TA_APO_State** _state,
                           FILE* _file );



/*
 * TA_AROON - Aroon
 * 
 * Input  = High, Low
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROON( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outAroonDown */,
                     double       *OUT_ARRAY /* outAroonUp */ );

int TA_AROON_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AROON_Data {
                     double       inHigh;
                     double       inLow;
                     };
struct TA_AROON_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_AROON_Data* memory;
                      double       lowest;
                      double       highest;
                      int          lowest_exp;
                      int          highest_exp;
                      double       factor;
                      int           optInTimePeriod; /* From 2 to 100000 */
                      };


TA_RetCode TA_AROON_StateInit( struct TA_AROON_State** _state,
                             int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_AROON_State( struct TA_AROON_State* _state,
                         const double inHigh,
                         const double inLow,
                         double        *outAroonDown,
                         double        *outAroonUp );

TA_RetCode TA_AROON_BatchState( struct TA_AROON_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inHigh[],
                              const double inLow[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outAroonDown[],
                              double        outAroonUp[] );

TA_RetCode TA_AROON_StateFree( struct TA_AROON_State** _state );


TA_RetCode TA_AROON_StateSave( struct TA_AROON_State* _state,
                             FILE* _file );


TA_RetCode TA_AROON_StateLoad( struct TA_AROON_State** _state,
                             FILE* _file );



/*
 * TA_AROONOSC - Aroon Oscillator
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AROONOSC( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_AROONOSC_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AROONOSC_Data {
                        double       inHigh;
                        double       inLow;
                        };
struct TA_AROONOSC_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_AROONOSC_Data* memory;
                         double       lowest;
                         double       highest;
                         int          lowest_exp;
                         int          highest_exp;
                         double       factor;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_AROONOSC_StateInit( struct TA_AROONOSC_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_AROONOSC_State( struct TA_AROONOSC_State* _state,
                            const double inHigh,
                            const double inLow,
                            double        *outReal );

TA_RetCode TA_AROONOSC_BatchState( struct TA_AROONOSC_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_AROONOSC_StateFree( struct TA_AROONOSC_State** _state );


TA_RetCode TA_AROONOSC_StateSave( struct TA_AROONOSC_State* _state,
                                FILE* _file );


TA_RetCode TA_AROONOSC_StateLoad( struct TA_AROONOSC_State** _state,
                                FILE* _file );



/*
 * TA_ASIN - Vector Trigonometric ASin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ASIN( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ASIN_Lookback( void );


struct TA_ASIN_Data {
                    double       inReal;
                    };
struct TA_ASIN_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ASIN_Data* memory;
                     };


TA_RetCode TA_ASIN_StateInit( struct TA_ASIN_State** _state );


TA_RetCode TA_ASIN_State( struct TA_ASIN_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_ASIN_BatchState( struct TA_ASIN_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ASIN_StateFree( struct TA_ASIN_State** _state );


TA_RetCode TA_ASIN_StateSave( struct TA_ASIN_State* _state,
                            FILE* _file );


TA_RetCode TA_ASIN_StateLoad( struct TA_ASIN_State** _state,
                            FILE* _file );



/*
 * TA_ATAN - Vector Trigonometric ATan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_ATAN( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ATAN_Lookback( void );


struct TA_ATAN_Data {
                    double       inReal;
                    };
struct TA_ATAN_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ATAN_Data* memory;
                     };


TA_RetCode TA_ATAN_StateInit( struct TA_ATAN_State** _state );


TA_RetCode TA_ATAN_State( struct TA_ATAN_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_ATAN_BatchState( struct TA_ATAN_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ATAN_StateFree( struct TA_ATAN_State** _state );


TA_RetCode TA_ATAN_StateSave( struct TA_ATAN_State* _state,
                            FILE* _file );


TA_RetCode TA_ATAN_StateLoad( struct TA_ATAN_State** _state,
                            FILE* _file );



/*
 * TA_ATR - Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ATR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ATR_Data {
                   double       inHigh;
                   double       inLow;
                   double       inClose;
                   };
struct TA_ATR_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_ATR_Data* memory;
                    void*        StateTRANGE;
                    void*        StateSMA;
                    double       prevATR;
                    int          firstATR;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_ATR_StateInit( struct TA_ATR_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_ATR_State( struct TA_ATR_State* _state,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       double        *outReal );

TA_RetCode TA_ATR_BatchState( struct TA_ATR_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inHigh[],
                            const double inLow[],
                            const double inClose[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_ATR_StateFree( struct TA_ATR_State** _state );


TA_RetCode TA_ATR_StateSave( struct TA_ATR_State* _state,
                           FILE* _file );


TA_RetCode TA_ATR_StateLoad( struct TA_ATR_State** _state,
                           FILE* _file );



/*
 * TA_AVGPRICE - Average Price
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_AVGPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inOpen */,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_AVGPRICE_Lookback( void );


struct TA_AVGPRICE_Data {
                        double       inOpen;
                        double       inHigh;
                        double       inLow;
                        double       inClose;
                        };
struct TA_AVGPRICE_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_AVGPRICE_Data* memory;
                         };


TA_RetCode TA_AVGPRICE_StateInit( struct TA_AVGPRICE_State** _state );


TA_RetCode TA_AVGPRICE_State( struct TA_AVGPRICE_State* _state,
                            const double inOpen,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            double        *outReal );

TA_RetCode TA_AVGPRICE_BatchState( struct TA_AVGPRICE_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inOpen[],
                                 const double inHigh[],
                                 const double inLow[],
                                 const double inClose[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_AVGPRICE_StateFree( struct TA_AVGPRICE_State** _state );


TA_RetCode TA_AVGPRICE_StateSave( struct TA_AVGPRICE_State* _state,
                                FILE* _file );


TA_RetCode TA_AVGPRICE_StateLoad( struct TA_AVGPRICE_State** _state,
                                FILE* _file );



/*
 * TA_AVGDEV - Average Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_AVGDEV( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_AVGDEV_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_AVGDEV_Data {
                      double       inReal;
                      };
struct TA_AVGDEV_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_AVGDEV_Data* memory;
                       double       sum;
                       int           optInTimePeriod; /* From 2 to 100000 */
                       };


TA_RetCode TA_AVGDEV_StateInit( struct TA_AVGDEV_State** _state,
                              int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_AVGDEV_State( struct TA_AVGDEV_State* _state,
                          const double inReal,
                          double        *outReal );

TA_RetCode TA_AVGDEV_BatchState( struct TA_AVGDEV_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inReal[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_AVGDEV_StateFree( struct TA_AVGDEV_State** _state );


TA_RetCode TA_AVGDEV_StateSave( struct TA_AVGDEV_State* _state,
                              FILE* _file );


TA_RetCode TA_AVGDEV_StateLoad( struct TA_AVGDEV_State** _state,
                              FILE* _file );



/*
 * TA_BBANDS - Bollinger Bands
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDevUp:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for upper band
 * 
 * optInNbDevDn:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Deviation multiplier for lower band
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_BBANDS( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      double        OPT_REAL /* optInNbDevUp */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        OPT_REAL /* optInNbDevDn */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     OPT_MATYPE /* optInMAType */,                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outRealUpperBand */,
                      double       *OUT_ARRAY /* outRealMiddleBand */,
                      double       *OUT_ARRAY /* outRealLowerBand */ );

int TA_BBANDS_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                      double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                      TA_MAType     optInMAType ); 

struct TA_BBANDS_Data {
                      double       inReal;
                      };
struct TA_BBANDS_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_BBANDS_Data* memory;
                       void*        stateMA;
                       void*        stateSTDDEV;
                       int           optInTimePeriod; /* From 2 to 100000 */
                       double        optInNbDevUp; /* From TA_REAL_MIN to TA_REAL_MAX */
                       double        optInNbDevDn; /* From TA_REAL_MIN to TA_REAL_MAX */
                       TA_MAType     optInMAType;                       };


TA_RetCode TA_BBANDS_StateInit( struct TA_BBANDS_State** _state,
                              int           optInTimePeriod, /* From 2 to 100000 */
                              double        optInNbDevUp, /* From TA_REAL_MIN to TA_REAL_MAX */
                              double        optInNbDevDn, /* From TA_REAL_MIN to TA_REAL_MAX */
                              TA_MAType     optInMAType ); 

TA_RetCode TA_BBANDS_State( struct TA_BBANDS_State* _state,
                          const double inReal,
                          double        *outRealUpperBand,
                          double        *outRealMiddleBand,
                          double        *outRealLowerBand );

TA_RetCode TA_BBANDS_BatchState( struct TA_BBANDS_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inReal[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outRealUpperBand[],
                               double        outRealMiddleBand[],
                               double        outRealLowerBand[] );

TA_RetCode TA_BBANDS_StateFree( struct TA_BBANDS_State** _state );


TA_RetCode TA_BBANDS_StateSave( struct TA_BBANDS_State* _state,
                              FILE* _file );


TA_RetCode TA_BBANDS_StateLoad( struct TA_BBANDS_State** _state,
                              FILE* _file );



/*
 * TA_BETA - Beta
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_BETA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal0 */,
                    const double *IN_ARRAY /* inReal1 */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_BETA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_BETA_Data {
                    double       inReal0;
                    double       inReal1;
                    };
struct TA_BETA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_BETA_Data* memory;
                     double       S_xx;
                     double       S_xy;
                     double       S_x;
                     double       S_y;
                     double       prev_price_x;
                     double       prev_price_y;
                     double       last_price_x;
                     double       last_price_y;
                     int          initialized;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_BETA_StateInit( struct TA_BETA_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_BETA_State( struct TA_BETA_State* _state,
                        const double inReal0,
                        const double inReal1,
                        double        *outReal );

TA_RetCode TA_BETA_BatchState( struct TA_BETA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal0[],
                             const double inReal1[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_BETA_StateFree( struct TA_BETA_State** _state );


TA_RetCode TA_BETA_StateSave( struct TA_BETA_State* _state,
                            FILE* _file );


TA_RetCode TA_BETA_StateLoad( struct TA_BETA_State** _state,
                            FILE* _file );



/*
 * TA_BOP - Balance Of Power
 * 
 * Input  = Open, High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_BOP( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inOpen */,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_BOP_Lookback( void );


struct TA_BOP_Data {
                   double       inOpen;
                   double       inHigh;
                   double       inLow;
                   double       inClose;
                   };
struct TA_BOP_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_BOP_Data* memory;
                    };


TA_RetCode TA_BOP_StateInit( struct TA_BOP_State** _state );


TA_RetCode TA_BOP_State( struct TA_BOP_State* _state,
                       const double inOpen,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       double        *outReal );

TA_RetCode TA_BOP_BatchState( struct TA_BOP_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inOpen[],
                            const double inHigh[],
                            const double inLow[],
                            const double inClose[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_BOP_StateFree( struct TA_BOP_State** _state );


TA_RetCode TA_BOP_StateSave( struct TA_BOP_State* _state,
                           FILE* _file );


TA_RetCode TA_BOP_StateLoad( struct TA_BOP_State** _state,
                           FILE* _file );



/*
 * TA_CCI - Commodity Channel Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CCI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_CCI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_CCI_Data {
                   double       inHigh;
                   double       inLow;
                   double       inClose;
                   };
struct TA_CCI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_CCI_Data* memory;
                    void*        circBuf;
                    double       theAverage;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_CCI_StateInit( struct TA_CCI_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_CCI_State( struct TA_CCI_State* _state,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       double        *outReal );

TA_RetCode TA_CCI_BatchState( struct TA_CCI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inHigh[],
                            const double inLow[],
                            const double inClose[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_CCI_StateFree( struct TA_CCI_State** _state );


TA_RetCode TA_CCI_StateSave( struct TA_CCI_State* _state,
                           FILE* _file );


TA_RetCode TA_CCI_StateLoad( struct TA_CCI_State** _state,
                           FILE* _file );



/*
 * TA_CDL2CROWS - Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL2CROWS( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDL2CROWS_Lookback( void );


struct TA_CDL2CROWS_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDL2CROWS_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDL2CROWS_Data* memory;
                          double       BodyLongPeriodTotal;
                          };


TA_RetCode TA_CDL2CROWS_StateInit( struct TA_CDL2CROWS_State** _state );


TA_RetCode TA_CDL2CROWS_State( struct TA_CDL2CROWS_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDL2CROWS_BatchState( struct TA_CDL2CROWS_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDL2CROWS_StateFree( struct TA_CDL2CROWS_State** _state );


TA_RetCode TA_CDL2CROWS_StateSave( struct TA_CDL2CROWS_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDL2CROWS_StateLoad( struct TA_CDL2CROWS_State** _state,
                                 FILE* _file );



/*
 * TA_CDL3BLACKCROWS - Three Black Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3BLACKCROWS( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3BLACKCROWS_Lookback( void );


struct TA_CDL3BLACKCROWS_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDL3BLACKCROWS_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDL3BLACKCROWS_Data* memory;
                               double       ShadowVeryShortPeriodTotal0;
                               double       ShadowVeryShortPeriodTotal1;
                               double       ShadowVeryShortPeriodTotal2;
                               int          periodShadowVeryShort;
                               };


TA_RetCode TA_CDL3BLACKCROWS_StateInit( struct TA_CDL3BLACKCROWS_State** _state );


TA_RetCode TA_CDL3BLACKCROWS_State( struct TA_CDL3BLACKCROWS_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDL3BLACKCROWS_BatchState( struct TA_CDL3BLACKCROWS_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDL3BLACKCROWS_StateFree( struct TA_CDL3BLACKCROWS_State** _state );


TA_RetCode TA_CDL3BLACKCROWS_StateSave( struct TA_CDL3BLACKCROWS_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDL3BLACKCROWS_StateLoad( struct TA_CDL3BLACKCROWS_State** _state,
                                      FILE* _file );



/*
 * TA_CDL3INSIDE - Three Inside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3INSIDE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3INSIDE_Lookback( void );


struct TA_CDL3INSIDE_Data {
                          double       inOpen;
                          double       inHigh;
                          double       inLow;
                          double       inClose;
                          };
struct TA_CDL3INSIDE_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_CDL3INSIDE_Data* memory;
                           double       BodyLongPeriodTotal;
                           double       BodyShortPeriodTotal;
                           int          periodBodyLong;
                           int          periodBodyShort;
                           };


TA_RetCode TA_CDL3INSIDE_StateInit( struct TA_CDL3INSIDE_State** _state );


TA_RetCode TA_CDL3INSIDE_State( struct TA_CDL3INSIDE_State* _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           *outInteger );

TA_RetCode TA_CDL3INSIDE_BatchState( struct TA_CDL3INSIDE_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inOpen[],
                                   const double inHigh[],
                                   const double inLow[],
                                   const double inClose[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   int           outInteger[] );

TA_RetCode TA_CDL3INSIDE_StateFree( struct TA_CDL3INSIDE_State** _state );


TA_RetCode TA_CDL3INSIDE_StateSave( struct TA_CDL3INSIDE_State* _state,
                                  FILE* _file );


TA_RetCode TA_CDL3INSIDE_StateLoad( struct TA_CDL3INSIDE_State** _state,
                                  FILE* _file );



/*
 * TA_CDL3LINESTRIKE - Three-Line Strike 
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3LINESTRIKE( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3LINESTRIKE_Lookback( void );


struct TA_CDL3LINESTRIKE_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDL3LINESTRIKE_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDL3LINESTRIKE_Data* memory;
                               double       NearPeriodTotal3;
                               double       NearPeriodTotal2;
                               int          periodNear;
                               };


TA_RetCode TA_CDL3LINESTRIKE_StateInit( struct TA_CDL3LINESTRIKE_State** _state );


TA_RetCode TA_CDL3LINESTRIKE_State( struct TA_CDL3LINESTRIKE_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDL3LINESTRIKE_BatchState( struct TA_CDL3LINESTRIKE_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDL3LINESTRIKE_StateFree( struct TA_CDL3LINESTRIKE_State** _state );


TA_RetCode TA_CDL3LINESTRIKE_StateSave( struct TA_CDL3LINESTRIKE_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDL3LINESTRIKE_StateLoad( struct TA_CDL3LINESTRIKE_State** _state,
                                      FILE* _file );



/*
 * TA_CDL3OUTSIDE - Three Outside Up/Down
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3OUTSIDE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3OUTSIDE_Lookback( void );


struct TA_CDL3OUTSIDE_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDL3OUTSIDE_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDL3OUTSIDE_Data* memory;
                            };


TA_RetCode TA_CDL3OUTSIDE_StateInit( struct TA_CDL3OUTSIDE_State** _state );


TA_RetCode TA_CDL3OUTSIDE_State( struct TA_CDL3OUTSIDE_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDL3OUTSIDE_BatchState( struct TA_CDL3OUTSIDE_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDL3OUTSIDE_StateFree( struct TA_CDL3OUTSIDE_State** _state );


TA_RetCode TA_CDL3OUTSIDE_StateSave( struct TA_CDL3OUTSIDE_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDL3OUTSIDE_StateLoad( struct TA_CDL3OUTSIDE_State** _state,
                                   FILE* _file );



/*
 * TA_CDL3STARSINSOUTH - Three Stars In The South
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3STARSINSOUTH( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3STARSINSOUTH_Lookback( void );


struct TA_CDL3STARSINSOUTH_Data {
                                double       inOpen;
                                double       inHigh;
                                double       inLow;
                                double       inClose;
                                };
struct TA_CDL3STARSINSOUTH_State {
                                 size_t mem_size;
                                 size_t mem_index;
                                 struct TA_CDL3STARSINSOUTH_Data* memory;
                                 double       BodyLongPeriodTotal;
                                 double       ShadowLongPeriodTotal;
                                 double       ShadowVeryShortPeriodTotal1;
                                 double       ShadowVeryShortPeriodTotal0;
                                 double       BodyShortPeriodTotal;
                                 int          periodBodyLong;
                                 int          periodShadowLong;
                                 int          periodShadowVeryShort;
                                 int          periodBodyShort;
                                 int          gapBodyLong;
                                 int          gapShadowLong;
                                 int          gapShadowVeryShort;
                                 int          gapBodyShort;
                                 };


TA_RetCode TA_CDL3STARSINSOUTH_StateInit( struct TA_CDL3STARSINSOUTH_State** _state );


TA_RetCode TA_CDL3STARSINSOUTH_State( struct TA_CDL3STARSINSOUTH_State* _state,
                                    const double inOpen,
                                    const double inHigh,
                                    const double inLow,
                                    const double inClose,
                                    int           *outInteger );

TA_RetCode TA_CDL3STARSINSOUTH_BatchState( struct TA_CDL3STARSINSOUTH_State* _state,
                                         int startIdx,
                                         int endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         int           outInteger[] );

TA_RetCode TA_CDL3STARSINSOUTH_StateFree( struct TA_CDL3STARSINSOUTH_State** _state );


TA_RetCode TA_CDL3STARSINSOUTH_StateSave( struct TA_CDL3STARSINSOUTH_State* _state,
                                        FILE* _file );


TA_RetCode TA_CDL3STARSINSOUTH_StateLoad( struct TA_CDL3STARSINSOUTH_State** _state,
                                        FILE* _file );



/*
 * TA_CDL3WHITESOLDIERS - Three Advancing White Soldiers
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDL3WHITESOLDIERS( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDL3WHITESOLDIERS_Lookback( void );


struct TA_CDL3WHITESOLDIERS_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDL3WHITESOLDIERS_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDL3WHITESOLDIERS_Data* memory;
                                  double       ShadowVeryShortPeriodTotal0;
                                  double       ShadowVeryShortPeriodTotal1;
                                  double       ShadowVeryShortPeriodTotal2;
                                  double       NearPeriodTotal1;
                                  double       NearPeriodTotal2;
                                  double       FarPeriodTotal1;
                                  double       FarPeriodTotal2;
                                  double       BodyShortPeriodTotal;
                                  int          gapShadowVeryShort;
                                  int          periodShadowVeryShort;
                                  int          gapNear;
                                  int          periodNear;
                                  int          gapFar;
                                  int          periodFar;
                                  int          gapBodyShort;
                                  int          periodBodyShort;
                                  };


TA_RetCode TA_CDL3WHITESOLDIERS_StateInit( struct TA_CDL3WHITESOLDIERS_State** _state );


TA_RetCode TA_CDL3WHITESOLDIERS_State( struct TA_CDL3WHITESOLDIERS_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDL3WHITESOLDIERS_BatchState( struct TA_CDL3WHITESOLDIERS_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDL3WHITESOLDIERS_StateFree( struct TA_CDL3WHITESOLDIERS_State** _state );


TA_RetCode TA_CDL3WHITESOLDIERS_StateSave( struct TA_CDL3WHITESOLDIERS_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDL3WHITESOLDIERS_StateLoad( struct TA_CDL3WHITESOLDIERS_State** _state,
                                         FILE* _file );



/*
 * TA_CDLABANDONEDBABY - Abandoned Baby
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLABANDONEDBABY( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLABANDONEDBABY_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLABANDONEDBABY_Data {
                                double       inOpen;
                                double       inHigh;
                                double       inLow;
                                double       inClose;
                                };
struct TA_CDLABANDONEDBABY_State {
                                 size_t mem_size;
                                 size_t mem_index;
                                 struct TA_CDLABANDONEDBABY_Data* memory;
                                 double       BodyLongPeriodTotal;
                                 double       BodyDojiPeriodTotal;
                                 double       BodyShortPeriodTotal;
                                 int          gapBodyLong;
                                 int          periodBodyLong;
                                 int          gapBodyDoji;
                                 int          periodBodyDoji;
                                 int          gapBodyShort;
                                 int          periodBodyShort;
                                 double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                 };


TA_RetCode TA_CDLABANDONEDBABY_StateInit( struct TA_CDLABANDONEDBABY_State** _state,
                                        double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLABANDONEDBABY_State( struct TA_CDLABANDONEDBABY_State* _state,
                                    const double inOpen,
                                    const double inHigh,
                                    const double inLow,
                                    const double inClose,
                                    int           *outInteger );

TA_RetCode TA_CDLABANDONEDBABY_BatchState( struct TA_CDLABANDONEDBABY_State* _state,
                                         int startIdx,
                                         int endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         int           outInteger[] );

TA_RetCode TA_CDLABANDONEDBABY_StateFree( struct TA_CDLABANDONEDBABY_State** _state );


TA_RetCode TA_CDLABANDONEDBABY_StateSave( struct TA_CDLABANDONEDBABY_State* _state,
                                        FILE* _file );


TA_RetCode TA_CDLABANDONEDBABY_StateLoad( struct TA_CDLABANDONEDBABY_State** _state,
                                        FILE* _file );



/*
 * TA_CDLADVANCEBLOCK - Advance Block
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLADVANCEBLOCK( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLADVANCEBLOCK_Lookback( void );


struct TA_CDLADVANCEBLOCK_Data {
                               double       inOpen;
                               double       inHigh;
                               double       inLow;
                               double       inClose;
                               };
struct TA_CDLADVANCEBLOCK_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_CDLADVANCEBLOCK_Data* memory;
                                double       ShadowShortPeriodTotal0;
                                double       ShadowShortPeriodTotal1;
                                double       ShadowShortPeriodTotal2;
                                double       ShadowLongPeriodTotal0;
                                double       ShadowLongPeriodTotal1;
                                double       NearPeriodTotal1;
                                double       NearPeriodTotal2;
                                double       FarPeriodTotal1;
                                double       FarPeriodTotal2;
                                double       BodyLongPeriodTotal;
                                int          gapShadowShort;
                                int          periodShadowShort;
                                int          gapShadowLong;
                                int          periodShadowLong;
                                int          gapNear;
                                int          periodNear;
                                int          gapFar;
                                int          periodFar;
                                int          gapBodyLong;
                                int          periodBodyLong;
                                };


TA_RetCode TA_CDLADVANCEBLOCK_StateInit( struct TA_CDLADVANCEBLOCK_State** _state );


TA_RetCode TA_CDLADVANCEBLOCK_State( struct TA_CDLADVANCEBLOCK_State* _state,
                                   const double inOpen,
                                   const double inHigh,
                                   const double inLow,
                                   const double inClose,
                                   int           *outInteger );

TA_RetCode TA_CDLADVANCEBLOCK_BatchState( struct TA_CDLADVANCEBLOCK_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inOpen[],
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        int           outInteger[] );

TA_RetCode TA_CDLADVANCEBLOCK_StateFree( struct TA_CDLADVANCEBLOCK_State** _state );


TA_RetCode TA_CDLADVANCEBLOCK_StateSave( struct TA_CDLADVANCEBLOCK_State* _state,
                                       FILE* _file );


TA_RetCode TA_CDLADVANCEBLOCK_StateLoad( struct TA_CDLADVANCEBLOCK_State** _state,
                                       FILE* _file );



/*
 * TA_CDLBELTHOLD - Belt-hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLBELTHOLD( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLBELTHOLD_Lookback( void );


struct TA_CDLBELTHOLD_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLBELTHOLD_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLBELTHOLD_Data* memory;
                            double       ShadowVeryShortPeriodTotal;
                            double       BodyLongPeriodTotal;
                            int          gapShadowVeryShort;
                            int          periodShadowVeryShort;
                            int          gapBodyLong;
                            int          periodBodyLong;
                            };


TA_RetCode TA_CDLBELTHOLD_StateInit( struct TA_CDLBELTHOLD_State** _state );


TA_RetCode TA_CDLBELTHOLD_State( struct TA_CDLBELTHOLD_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLBELTHOLD_BatchState( struct TA_CDLBELTHOLD_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLBELTHOLD_StateFree( struct TA_CDLBELTHOLD_State** _state );


TA_RetCode TA_CDLBELTHOLD_StateSave( struct TA_CDLBELTHOLD_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLBELTHOLD_StateLoad( struct TA_CDLBELTHOLD_State** _state,
                                   FILE* _file );



/*
 * TA_CDLBREAKAWAY - Breakaway
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLBREAKAWAY( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLBREAKAWAY_Lookback( void );


struct TA_CDLBREAKAWAY_Data {
                            double       inOpen;
                            double       inHigh;
                            double       inLow;
                            double       inClose;
                            };
struct TA_CDLBREAKAWAY_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_CDLBREAKAWAY_Data* memory;
                             double       BodyLongPeriodTotal;
                             };


TA_RetCode TA_CDLBREAKAWAY_StateInit( struct TA_CDLBREAKAWAY_State** _state );


TA_RetCode TA_CDLBREAKAWAY_State( struct TA_CDLBREAKAWAY_State* _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           *outInteger );

TA_RetCode TA_CDLBREAKAWAY_BatchState( struct TA_CDLBREAKAWAY_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inOpen[],
                                     const double inHigh[],
                                     const double inLow[],
                                     const double inClose[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_CDLBREAKAWAY_StateFree( struct TA_CDLBREAKAWAY_State** _state );


TA_RetCode TA_CDLBREAKAWAY_StateSave( struct TA_CDLBREAKAWAY_State* _state,
                                    FILE* _file );


TA_RetCode TA_CDLBREAKAWAY_StateLoad( struct TA_CDLBREAKAWAY_State** _state,
                                    FILE* _file );



/*
 * TA_CDLCLOSINGMARUBOZU - Closing Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCLOSINGMARUBOZU( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCLOSINGMARUBOZU_Lookback( void );


struct TA_CDLCLOSINGMARUBOZU_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLCLOSINGMARUBOZU_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLCLOSINGMARUBOZU_Data* memory;
                                   double       ShadowVeryShortPeriodTotal;
                                   double       BodyLongPeriodTotal;
                                   int          gapShadowVeryShort;
                                   int          periodShadowVeryShort;
                                   int          gapBodyLong;
                                   int          periodBodyLong;
                                   };


TA_RetCode TA_CDLCLOSINGMARUBOZU_StateInit( struct TA_CDLCLOSINGMARUBOZU_State** _state );


TA_RetCode TA_CDLCLOSINGMARUBOZU_State( struct TA_CDLCLOSINGMARUBOZU_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLCLOSINGMARUBOZU_BatchState( struct TA_CDLCLOSINGMARUBOZU_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLCLOSINGMARUBOZU_StateFree( struct TA_CDLCLOSINGMARUBOZU_State** _state );


TA_RetCode TA_CDLCLOSINGMARUBOZU_StateSave( struct TA_CDLCLOSINGMARUBOZU_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLCLOSINGMARUBOZU_StateLoad( struct TA_CDLCLOSINGMARUBOZU_State** _state,
                                          FILE* _file );



/*
 * TA_CDLCONCEALBABYSWALL - Concealing Baby Swallow
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCONCEALBABYSWALL( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCONCEALBABYSWALL_Lookback( void );


struct TA_CDLCONCEALBABYSWALL_Data {
                                   double       inOpen;
                                   double       inHigh;
                                   double       inLow;
                                   double       inClose;
                                   };
struct TA_CDLCONCEALBABYSWALL_State {
                                    size_t mem_size;
                                    size_t mem_index;
                                    struct TA_CDLCONCEALBABYSWALL_Data* memory;
                                    double       ShadowVeryShortPeriodTotal1;
                                    double       ShadowVeryShortPeriodTotal2;
                                    double       ShadowVeryShortPeriodTotal3;
                                    int          periodShadowVeryShort;
                                    };


TA_RetCode TA_CDLCONCEALBABYSWALL_StateInit( struct TA_CDLCONCEALBABYSWALL_State** _state );


TA_RetCode TA_CDLCONCEALBABYSWALL_State( struct TA_CDLCONCEALBABYSWALL_State* _state,
                                       const double inOpen,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           *outInteger );

TA_RetCode TA_CDLCONCEALBABYSWALL_BatchState( struct TA_CDLCONCEALBABYSWALL_State* _state,
                                            int startIdx,
                                            int endIdx,
                                            const double inOpen[],
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            int           outInteger[] );

TA_RetCode TA_CDLCONCEALBABYSWALL_StateFree( struct TA_CDLCONCEALBABYSWALL_State** _state );


TA_RetCode TA_CDLCONCEALBABYSWALL_StateSave( struct TA_CDLCONCEALBABYSWALL_State* _state,
                                           FILE* _file );


TA_RetCode TA_CDLCONCEALBABYSWALL_StateLoad( struct TA_CDLCONCEALBABYSWALL_State** _state,
                                           FILE* _file );



/*
 * TA_CDLCOUNTERATTACK - Counterattack
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLCOUNTERATTACK( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLCOUNTERATTACK_Lookback( void );


struct TA_CDLCOUNTERATTACK_Data {
                                double       inOpen;
                                double       inHigh;
                                double       inLow;
                                double       inClose;
                                };
struct TA_CDLCOUNTERATTACK_State {
                                 size_t mem_size;
                                 size_t mem_index;
                                 struct TA_CDLCOUNTERATTACK_Data* memory;
                                 double       BodyLongPeriodTotal0;
                                 double       BodyLongPeriodTotal1;
                                 double       EqualPeriodTotal;
                                 int          periodBodyLong;
                                 int          gapBodyLong;
                                 int          periodEqual;
                                 int          gapEqual;
                                 };


TA_RetCode TA_CDLCOUNTERATTACK_StateInit( struct TA_CDLCOUNTERATTACK_State** _state );


TA_RetCode TA_CDLCOUNTERATTACK_State( struct TA_CDLCOUNTERATTACK_State* _state,
                                    const double inOpen,
                                    const double inHigh,
                                    const double inLow,
                                    const double inClose,
                                    int           *outInteger );

TA_RetCode TA_CDLCOUNTERATTACK_BatchState( struct TA_CDLCOUNTERATTACK_State* _state,
                                         int startIdx,
                                         int endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         int           outInteger[] );

TA_RetCode TA_CDLCOUNTERATTACK_StateFree( struct TA_CDLCOUNTERATTACK_State** _state );


TA_RetCode TA_CDLCOUNTERATTACK_StateSave( struct TA_CDLCOUNTERATTACK_State* _state,
                                        FILE* _file );


TA_RetCode TA_CDLCOUNTERATTACK_StateLoad( struct TA_CDLCOUNTERATTACK_State** _state,
                                        FILE* _file );



/*
 * TA_CDLDARKCLOUDCOVER - Dark Cloud Cover
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLDARKCLOUDCOVER( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDARKCLOUDCOVER_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLDARKCLOUDCOVER_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDLDARKCLOUDCOVER_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDLDARKCLOUDCOVER_Data* memory;
                                  double       BodyLongPeriodTotal;
                                  int          periodBodyLong;
                                  double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                  };


TA_RetCode TA_CDLDARKCLOUDCOVER_StateInit( struct TA_CDLDARKCLOUDCOVER_State** _state,
                                         double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLDARKCLOUDCOVER_State( struct TA_CDLDARKCLOUDCOVER_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDLDARKCLOUDCOVER_BatchState( struct TA_CDLDARKCLOUDCOVER_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDLDARKCLOUDCOVER_StateFree( struct TA_CDLDARKCLOUDCOVER_State** _state );


TA_RetCode TA_CDLDARKCLOUDCOVER_StateSave( struct TA_CDLDARKCLOUDCOVER_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDLDARKCLOUDCOVER_StateLoad( struct TA_CDLDARKCLOUDCOVER_State** _state,
                                         FILE* _file );



/*
 * TA_CDLDOJI - Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDOJI( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inOpen */,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       const double *IN_ARRAY /* inClose */,
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDOJI_Lookback( void );


struct TA_CDLDOJI_Data {
                       double       inOpen;
                       double       inHigh;
                       double       inLow;
                       double       inClose;
                       };
struct TA_CDLDOJI_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_CDLDOJI_Data* memory;
                        double       BodyDojiPeriodTotal;
                        };


TA_RetCode TA_CDLDOJI_StateInit( struct TA_CDLDOJI_State** _state );


TA_RetCode TA_CDLDOJI_State( struct TA_CDLDOJI_State* _state,
                           const double inOpen,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           int           *outInteger );

TA_RetCode TA_CDLDOJI_BatchState( struct TA_CDLDOJI_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inOpen[],
                                const double inHigh[],
                                const double inLow[],
                                const double inClose[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                int           outInteger[] );

TA_RetCode TA_CDLDOJI_StateFree( struct TA_CDLDOJI_State** _state );


TA_RetCode TA_CDLDOJI_StateSave( struct TA_CDLDOJI_State* _state,
                               FILE* _file );


TA_RetCode TA_CDLDOJI_StateLoad( struct TA_CDLDOJI_State** _state,
                               FILE* _file );



/*
 * TA_CDLDOJISTAR - Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDOJISTAR( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDOJISTAR_Lookback( void );


struct TA_CDLDOJISTAR_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLDOJISTAR_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLDOJISTAR_Data* memory;
                            double       DojiPeriodTotal;
                            double       BodyLongPeriodTotal;
                            int          periodBodyLong;
                            int          gapBodyLong;
                            int          periodDoji;
                            int          gapDoji;
                            };


TA_RetCode TA_CDLDOJISTAR_StateInit( struct TA_CDLDOJISTAR_State** _state );


TA_RetCode TA_CDLDOJISTAR_State( struct TA_CDLDOJISTAR_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLDOJISTAR_BatchState( struct TA_CDLDOJISTAR_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLDOJISTAR_StateFree( struct TA_CDLDOJISTAR_State** _state );


TA_RetCode TA_CDLDOJISTAR_StateSave( struct TA_CDLDOJISTAR_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLDOJISTAR_StateLoad( struct TA_CDLDOJISTAR_State** _state,
                                   FILE* _file );



/*
 * TA_CDLDRAGONFLYDOJI - Dragonfly Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLDRAGONFLYDOJI( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLDRAGONFLYDOJI_Lookback( void );


struct TA_CDLDRAGONFLYDOJI_Data {
                                double       inOpen;
                                double       inHigh;
                                double       inLow;
                                double       inClose;
                                };
struct TA_CDLDRAGONFLYDOJI_State {
                                 size_t mem_size;
                                 size_t mem_index;
                                 struct TA_CDLDRAGONFLYDOJI_Data* memory;
                                 double       BodyDojiPeriodTotal;
                                 double       ShadowVeryShortPeriodTotal;
                                 int          periodShadowVeryShort;
                                 int          gapShadowVeryShort;
                                 int          periodBodyDoji;
                                 int          gapBodyDoji;
                                 };


TA_RetCode TA_CDLDRAGONFLYDOJI_StateInit( struct TA_CDLDRAGONFLYDOJI_State** _state );


TA_RetCode TA_CDLDRAGONFLYDOJI_State( struct TA_CDLDRAGONFLYDOJI_State* _state,
                                    const double inOpen,
                                    const double inHigh,
                                    const double inLow,
                                    const double inClose,
                                    int           *outInteger );

TA_RetCode TA_CDLDRAGONFLYDOJI_BatchState( struct TA_CDLDRAGONFLYDOJI_State* _state,
                                         int startIdx,
                                         int endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         int           outInteger[] );

TA_RetCode TA_CDLDRAGONFLYDOJI_StateFree( struct TA_CDLDRAGONFLYDOJI_State** _state );


TA_RetCode TA_CDLDRAGONFLYDOJI_StateSave( struct TA_CDLDRAGONFLYDOJI_State* _state,
                                        FILE* _file );


TA_RetCode TA_CDLDRAGONFLYDOJI_StateLoad( struct TA_CDLDRAGONFLYDOJI_State** _state,
                                        FILE* _file );



/*
 * TA_CDLENGULFING - Engulfing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLENGULFING( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLENGULFING_Lookback( void );


struct TA_CDLENGULFING_Data {
                            double       inOpen;
                            double       inHigh;
                            double       inLow;
                            double       inClose;
                            };
struct TA_CDLENGULFING_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_CDLENGULFING_Data* memory;
                             };


TA_RetCode TA_CDLENGULFING_StateInit( struct TA_CDLENGULFING_State** _state );


TA_RetCode TA_CDLENGULFING_State( struct TA_CDLENGULFING_State* _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           *outInteger );

TA_RetCode TA_CDLENGULFING_BatchState( struct TA_CDLENGULFING_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inOpen[],
                                     const double inHigh[],
                                     const double inLow[],
                                     const double inClose[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_CDLENGULFING_StateFree( struct TA_CDLENGULFING_State** _state );


TA_RetCode TA_CDLENGULFING_StateSave( struct TA_CDLENGULFING_State* _state,
                                    FILE* _file );


TA_RetCode TA_CDLENGULFING_StateLoad( struct TA_CDLENGULFING_State** _state,
                                    FILE* _file );



/*
 * TA_CDLEVENINGDOJISTAR - Evening Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLEVENINGDOJISTAR( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLEVENINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLEVENINGDOJISTAR_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLEVENINGDOJISTAR_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLEVENINGDOJISTAR_Data* memory;
                                   double       BodyDojiPeriodTotal;
                                   double       BodyLongPeriodTotal;
                                   double       BodyShortPeriodTotal;
                                   int          periodBodyLong;
                                   int          gapBodyLong;
                                   int          periodBodyShort;
                                   int          gapBodyShort;
                                   int          periodBodyDoji;
                                   int          gapBodyDoji;
                                   double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                   };


TA_RetCode TA_CDLEVENINGDOJISTAR_StateInit( struct TA_CDLEVENINGDOJISTAR_State** _state,
                                          double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLEVENINGDOJISTAR_State( struct TA_CDLEVENINGDOJISTAR_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLEVENINGDOJISTAR_BatchState( struct TA_CDLEVENINGDOJISTAR_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLEVENINGDOJISTAR_StateFree( struct TA_CDLEVENINGDOJISTAR_State** _state );


TA_RetCode TA_CDLEVENINGDOJISTAR_StateSave( struct TA_CDLEVENINGDOJISTAR_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLEVENINGDOJISTAR_StateLoad( struct TA_CDLEVENINGDOJISTAR_State** _state,
                                          FILE* _file );



/*
 * TA_CDLEVENINGSTAR - Evening Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLEVENINGSTAR( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLEVENINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLEVENINGSTAR_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLEVENINGSTAR_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLEVENINGSTAR_Data* memory;
                               double       BodyShortPeriodTotal2;
                               double       BodyLongPeriodTotal;
                               double       BodyShortPeriodTotal;
                               int          periodBodyLong;
                               int          gapBodyLong;
                               int          periodBodyShort;
                               int          gapBodyShort;
                               double        optInPenetration; /* From 0 to TA_REAL_MAX */
                               };


TA_RetCode TA_CDLEVENINGSTAR_StateInit( struct TA_CDLEVENINGSTAR_State** _state,
                                      double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLEVENINGSTAR_State( struct TA_CDLEVENINGSTAR_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLEVENINGSTAR_BatchState( struct TA_CDLEVENINGSTAR_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLEVENINGSTAR_StateFree( struct TA_CDLEVENINGSTAR_State** _state );


TA_RetCode TA_CDLEVENINGSTAR_StateSave( struct TA_CDLEVENINGSTAR_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLEVENINGSTAR_StateLoad( struct TA_CDLEVENINGSTAR_State** _state,
                                      FILE* _file );



/*
 * TA_CDLGAPSIDESIDEWHITE - Up/Down-gap side-by-side white lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLGAPSIDESIDEWHITE( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLGAPSIDESIDEWHITE_Lookback( void );


struct TA_CDLGAPSIDESIDEWHITE_Data {
                                   double       inOpen;
                                   double       inHigh;
                                   double       inLow;
                                   double       inClose;
                                   };
struct TA_CDLGAPSIDESIDEWHITE_State {
                                    size_t mem_size;
                                    size_t mem_index;
                                    struct TA_CDLGAPSIDESIDEWHITE_Data* memory;
                                    double       NearPeriodTotal;
                                    double       EqualPeriodTotal;
                                    int          periodNear;
                                    int          periodEqual;
                                    };


TA_RetCode TA_CDLGAPSIDESIDEWHITE_StateInit( struct TA_CDLGAPSIDESIDEWHITE_State** _state );


TA_RetCode TA_CDLGAPSIDESIDEWHITE_State( struct TA_CDLGAPSIDESIDEWHITE_State* _state,
                                       const double inOpen,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           *outInteger );

TA_RetCode TA_CDLGAPSIDESIDEWHITE_BatchState( struct TA_CDLGAPSIDESIDEWHITE_State* _state,
                                            int startIdx,
                                            int endIdx,
                                            const double inOpen[],
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            int           outInteger[] );

TA_RetCode TA_CDLGAPSIDESIDEWHITE_StateFree( struct TA_CDLGAPSIDESIDEWHITE_State** _state );


TA_RetCode TA_CDLGAPSIDESIDEWHITE_StateSave( struct TA_CDLGAPSIDESIDEWHITE_State* _state,
                                           FILE* _file );


TA_RetCode TA_CDLGAPSIDESIDEWHITE_StateLoad( struct TA_CDLGAPSIDESIDEWHITE_State** _state,
                                           FILE* _file );



/*
 * TA_CDLGRAVESTONEDOJI - Gravestone Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLGRAVESTONEDOJI( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLGRAVESTONEDOJI_Lookback( void );


struct TA_CDLGRAVESTONEDOJI_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDLGRAVESTONEDOJI_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDLGRAVESTONEDOJI_Data* memory;
                                  double       BodyDojiPeriodTotal;
                                  double       ShadowVeryShortPeriodTotal;
                                  int          periodShadowVeryShort;
                                  int          gapShadowVeryShort;
                                  int          periodBodyDoji;
                                  int          gapBodyDoji;
                                  };


TA_RetCode TA_CDLGRAVESTONEDOJI_StateInit( struct TA_CDLGRAVESTONEDOJI_State** _state );


TA_RetCode TA_CDLGRAVESTONEDOJI_State( struct TA_CDLGRAVESTONEDOJI_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDLGRAVESTONEDOJI_BatchState( struct TA_CDLGRAVESTONEDOJI_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDLGRAVESTONEDOJI_StateFree( struct TA_CDLGRAVESTONEDOJI_State** _state );


TA_RetCode TA_CDLGRAVESTONEDOJI_StateSave( struct TA_CDLGRAVESTONEDOJI_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDLGRAVESTONEDOJI_StateLoad( struct TA_CDLGRAVESTONEDOJI_State** _state,
                                         FILE* _file );



/*
 * TA_CDLHAMMER - Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHAMMER( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHAMMER_Lookback( void );


struct TA_CDLHAMMER_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDLHAMMER_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDLHAMMER_Data* memory;
                          double       BodyPeriodTotal;
                          double       ShadowVeryShortPeriodTotal;
                          double       ShadowLongPeriodTotal;
                          double       NearPeriodTotal;
                          int          periodShadowVeryShort;
                          int          gapShadowVeryShort;
                          int          periodBody;
                          int          gapBody;
                          int          periodShadowLong;
                          int          gapShadowLong;
                          int          periodNear;
                          int          gapNear;
                          };


TA_RetCode TA_CDLHAMMER_StateInit( struct TA_CDLHAMMER_State** _state );


TA_RetCode TA_CDLHAMMER_State( struct TA_CDLHAMMER_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDLHAMMER_BatchState( struct TA_CDLHAMMER_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDLHAMMER_StateFree( struct TA_CDLHAMMER_State** _state );


TA_RetCode TA_CDLHAMMER_StateSave( struct TA_CDLHAMMER_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDLHAMMER_StateLoad( struct TA_CDLHAMMER_State** _state,
                                 FILE* _file );



/*
 * TA_CDLHANGINGMAN - Hanging Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHANGINGMAN( int           START_IDX,
                             int           END_IDX,
                             const double *IN_ARRAY /* inOpen */,
                             const double *IN_ARRAY /* inHigh */,
                             const double *IN_ARRAY /* inLow */,
                             const double *IN_ARRAY /* inClose */,
                             int          *BEG_IDX,
                             int          *OUT_SIZE,
                             int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHANGINGMAN_Lookback( void );


struct TA_CDLHANGINGMAN_Data {
                             double       inOpen;
                             double       inHigh;
                             double       inLow;
                             double       inClose;
                             };
struct TA_CDLHANGINGMAN_State {
                              size_t mem_size;
                              size_t mem_index;
                              struct TA_CDLHANGINGMAN_Data* memory;
                              double       BodyPeriodTotal;
                              double       ShadowVeryShortPeriodTotal;
                              double       ShadowLongPeriodTotal;
                              double       NearPeriodTotal;
                              int          periodShadowVeryShort;
                              int          gapShadowVeryShort;
                              int          periodBody;
                              int          gapBody;
                              int          periodShadowLong;
                              int          gapShadowLong;
                              int          periodNear;
                              int          gapNear;
                              };


TA_RetCode TA_CDLHANGINGMAN_StateInit( struct TA_CDLHANGINGMAN_State** _state );


TA_RetCode TA_CDLHANGINGMAN_State( struct TA_CDLHANGINGMAN_State* _state,
                                 const double inOpen,
                                 const double inHigh,
                                 const double inLow,
                                 const double inClose,
                                 int           *outInteger );

TA_RetCode TA_CDLHANGINGMAN_BatchState( struct TA_CDLHANGINGMAN_State* _state,
                                      int startIdx,
                                      int endIdx,
                                      const double inOpen[],
                                      const double inHigh[],
                                      const double inLow[],
                                      const double inClose[],
                                      int          *outBegIdx,
                                      int          *outNBElement,
                                      int           outInteger[] );

TA_RetCode TA_CDLHANGINGMAN_StateFree( struct TA_CDLHANGINGMAN_State** _state );


TA_RetCode TA_CDLHANGINGMAN_StateSave( struct TA_CDLHANGINGMAN_State* _state,
                                     FILE* _file );


TA_RetCode TA_CDLHANGINGMAN_StateLoad( struct TA_CDLHANGINGMAN_State** _state,
                                     FILE* _file );



/*
 * TA_CDLHARAMI - Harami Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHARAMI( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHARAMI_Lookback( void );


struct TA_CDLHARAMI_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDLHARAMI_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDLHARAMI_Data* memory;
                          double       BodyShortPeriodTotal;
                          double       BodyLongPeriodTotal;
                          int          periodBodyLong;
                          int          gapBodyLong;
                          int          periodBodyShort;
                          int          gapBodyShort;
                          };


TA_RetCode TA_CDLHARAMI_StateInit( struct TA_CDLHARAMI_State** _state );


TA_RetCode TA_CDLHARAMI_State( struct TA_CDLHARAMI_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDLHARAMI_BatchState( struct TA_CDLHARAMI_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDLHARAMI_StateFree( struct TA_CDLHARAMI_State** _state );


TA_RetCode TA_CDLHARAMI_StateSave( struct TA_CDLHARAMI_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDLHARAMI_StateLoad( struct TA_CDLHARAMI_State** _state,
                                 FILE* _file );



/*
 * TA_CDLHARAMICROSS - Harami Cross Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHARAMICROSS( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHARAMICROSS_Lookback( void );


struct TA_CDLHARAMICROSS_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLHARAMICROSS_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLHARAMICROSS_Data* memory;
                               double       BodyDojiPeriodTotal;
                               double       BodyLongPeriodTotal;
                               int          periodBodyLong;
                               int          gapBodyLong;
                               int          periodBodyDoji;
                               int          gapBodyDoji;
                               };


TA_RetCode TA_CDLHARAMICROSS_StateInit( struct TA_CDLHARAMICROSS_State** _state );


TA_RetCode TA_CDLHARAMICROSS_State( struct TA_CDLHARAMICROSS_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLHARAMICROSS_BatchState( struct TA_CDLHARAMICROSS_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLHARAMICROSS_StateFree( struct TA_CDLHARAMICROSS_State** _state );


TA_RetCode TA_CDLHARAMICROSS_StateSave( struct TA_CDLHARAMICROSS_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLHARAMICROSS_StateLoad( struct TA_CDLHARAMICROSS_State** _state,
                                      FILE* _file );



/*
 * TA_CDLHIGHWAVE - High-Wave Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIGHWAVE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIGHWAVE_Lookback( void );


struct TA_CDLHIGHWAVE_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLHIGHWAVE_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLHIGHWAVE_Data* memory;
                            double       BodyPeriodTotal;
                            double       ShadowPeriodTotal;
                            int          periodBody;
                            int          periodShadow;
                            };


TA_RetCode TA_CDLHIGHWAVE_StateInit( struct TA_CDLHIGHWAVE_State** _state );


TA_RetCode TA_CDLHIGHWAVE_State( struct TA_CDLHIGHWAVE_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLHIGHWAVE_BatchState( struct TA_CDLHIGHWAVE_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLHIGHWAVE_StateFree( struct TA_CDLHIGHWAVE_State** _state );


TA_RetCode TA_CDLHIGHWAVE_StateSave( struct TA_CDLHIGHWAVE_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLHIGHWAVE_StateLoad( struct TA_CDLHIGHWAVE_State** _state,
                                   FILE* _file );



/*
 * TA_CDLHIKKAKE - Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIKKAKE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIKKAKE_Lookback( void );


struct TA_CDLHIKKAKE_Data {
                          double       inOpen;
                          double       inHigh;
                          double       inLow;
                          double       inClose;
                          };
struct TA_CDLHIKKAKE_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_CDLHIKKAKE_Data* memory;
                           double       patternResult;
                           int          patternIdx;
                           double       patternHigh;
                           double       patternLow;
                           };


TA_RetCode TA_CDLHIKKAKE_StateInit( struct TA_CDLHIKKAKE_State** _state );


TA_RetCode TA_CDLHIKKAKE_State( struct TA_CDLHIKKAKE_State* _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           *outInteger );

TA_RetCode TA_CDLHIKKAKE_BatchState( struct TA_CDLHIKKAKE_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inOpen[],
                                   const double inHigh[],
                                   const double inLow[],
                                   const double inClose[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   int           outInteger[] );

TA_RetCode TA_CDLHIKKAKE_StateFree( struct TA_CDLHIKKAKE_State** _state );


TA_RetCode TA_CDLHIKKAKE_StateSave( struct TA_CDLHIKKAKE_State* _state,
                                  FILE* _file );


TA_RetCode TA_CDLHIKKAKE_StateLoad( struct TA_CDLHIKKAKE_State** _state,
                                  FILE* _file );



/*
 * TA_CDLHIKKAKEMOD - Modified Hikkake Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHIKKAKEMOD( int           START_IDX,
                             int           END_IDX,
                             const double *IN_ARRAY /* inOpen */,
                             const double *IN_ARRAY /* inHigh */,
                             const double *IN_ARRAY /* inLow */,
                             const double *IN_ARRAY /* inClose */,
                             int          *BEG_IDX,
                             int          *OUT_SIZE,
                             int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHIKKAKEMOD_Lookback( void );


struct TA_CDLHIKKAKEMOD_Data {
                             double       inOpen;
                             double       inHigh;
                             double       inLow;
                             double       inClose;
                             };
struct TA_CDLHIKKAKEMOD_State {
                              size_t mem_size;
                              size_t mem_index;
                              struct TA_CDLHIKKAKEMOD_Data* memory;
                              double       patternResult;
                              int          patternIdx;
                              double       patternHigh;
                              double       patternLow;
                              double       NearPeriodTotal;
                              int          periodNear;
                              int          gapNear;
                              };


TA_RetCode TA_CDLHIKKAKEMOD_StateInit( struct TA_CDLHIKKAKEMOD_State** _state );


TA_RetCode TA_CDLHIKKAKEMOD_State( struct TA_CDLHIKKAKEMOD_State* _state,
                                 const double inOpen,
                                 const double inHigh,
                                 const double inLow,
                                 const double inClose,
                                 int           *outInteger );

TA_RetCode TA_CDLHIKKAKEMOD_BatchState( struct TA_CDLHIKKAKEMOD_State* _state,
                                      int startIdx,
                                      int endIdx,
                                      const double inOpen[],
                                      const double inHigh[],
                                      const double inLow[],
                                      const double inClose[],
                                      int          *outBegIdx,
                                      int          *outNBElement,
                                      int           outInteger[] );

TA_RetCode TA_CDLHIKKAKEMOD_StateFree( struct TA_CDLHIKKAKEMOD_State** _state );


TA_RetCode TA_CDLHIKKAKEMOD_StateSave( struct TA_CDLHIKKAKEMOD_State* _state,
                                     FILE* _file );


TA_RetCode TA_CDLHIKKAKEMOD_StateLoad( struct TA_CDLHIKKAKEMOD_State** _state,
                                     FILE* _file );



/*
 * TA_CDLHOMINGPIGEON - Homing Pigeon
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLHOMINGPIGEON( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLHOMINGPIGEON_Lookback( void );


struct TA_CDLHOMINGPIGEON_Data {
                               double       inOpen;
                               double       inHigh;
                               double       inLow;
                               double       inClose;
                               };
struct TA_CDLHOMINGPIGEON_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_CDLHOMINGPIGEON_Data* memory;
                                double       BodyLongPeriodTotal;
                                double       BodyShortPeriodTotal;
                                int          periodBodyLong;
                                int          periodBodyShort;
                                int          gapBodyLong;
                                int          gapBodyShort;
                                };


TA_RetCode TA_CDLHOMINGPIGEON_StateInit( struct TA_CDLHOMINGPIGEON_State** _state );


TA_RetCode TA_CDLHOMINGPIGEON_State( struct TA_CDLHOMINGPIGEON_State* _state,
                                   const double inOpen,
                                   const double inHigh,
                                   const double inLow,
                                   const double inClose,
                                   int           *outInteger );

TA_RetCode TA_CDLHOMINGPIGEON_BatchState( struct TA_CDLHOMINGPIGEON_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inOpen[],
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        int           outInteger[] );

TA_RetCode TA_CDLHOMINGPIGEON_StateFree( struct TA_CDLHOMINGPIGEON_State** _state );


TA_RetCode TA_CDLHOMINGPIGEON_StateSave( struct TA_CDLHOMINGPIGEON_State* _state,
                                       FILE* _file );


TA_RetCode TA_CDLHOMINGPIGEON_StateLoad( struct TA_CDLHOMINGPIGEON_State** _state,
                                       FILE* _file );



/*
 * TA_CDLIDENTICAL3CROWS - Identical Three Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLIDENTICAL3CROWS( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLIDENTICAL3CROWS_Lookback( void );


struct TA_CDLIDENTICAL3CROWS_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLIDENTICAL3CROWS_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLIDENTICAL3CROWS_Data* memory;
                                   double       ShadowVeryShortPeriodTotal0;
                                   double       ShadowVeryShortPeriodTotal1;
                                   double       ShadowVeryShortPeriodTotal2;
                                   double       EqualPeriodTotal1;
                                   double       EqualPeriodTotal2;
                                   int          gapShadowVeryShort;
                                   int          periodShadowVeryShort;
                                   int          gapEqual;
                                   int          periodEqual;
                                   };


TA_RetCode TA_CDLIDENTICAL3CROWS_StateInit( struct TA_CDLIDENTICAL3CROWS_State** _state );


TA_RetCode TA_CDLIDENTICAL3CROWS_State( struct TA_CDLIDENTICAL3CROWS_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLIDENTICAL3CROWS_BatchState( struct TA_CDLIDENTICAL3CROWS_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLIDENTICAL3CROWS_StateFree( struct TA_CDLIDENTICAL3CROWS_State** _state );


TA_RetCode TA_CDLIDENTICAL3CROWS_StateSave( struct TA_CDLIDENTICAL3CROWS_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLIDENTICAL3CROWS_StateLoad( struct TA_CDLIDENTICAL3CROWS_State** _state,
                                          FILE* _file );



/*
 * TA_CDLINNECK - In-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLINNECK( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLINNECK_Lookback( void );


struct TA_CDLINNECK_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDLINNECK_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDLINNECK_Data* memory;
                          double       BodyLongPeriodTotal;
                          double       EqualPeriodTotal;
                          int          periodBodyLong;
                          int          gapBodyLong;
                          int          periodEqual;
                          int          gapEqual;
                          };


TA_RetCode TA_CDLINNECK_StateInit( struct TA_CDLINNECK_State** _state );


TA_RetCode TA_CDLINNECK_State( struct TA_CDLINNECK_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDLINNECK_BatchState( struct TA_CDLINNECK_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDLINNECK_StateFree( struct TA_CDLINNECK_State** _state );


TA_RetCode TA_CDLINNECK_StateSave( struct TA_CDLINNECK_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDLINNECK_StateLoad( struct TA_CDLINNECK_State** _state,
                                 FILE* _file );



/*
 * TA_CDLINVERTEDHAMMER - Inverted Hammer
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLINVERTEDHAMMER( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLINVERTEDHAMMER_Lookback( void );


struct TA_CDLINVERTEDHAMMER_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDLINVERTEDHAMMER_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDLINVERTEDHAMMER_Data* memory;
                                  double       BodyPeriodTotal;
                                  double       ShadowVeryShortPeriodTotal;
                                  double       ShadowLongPeriodTotal;
                                  int          periodShadowVeryShort;
                                  int          gapShadowVeryShort;
                                  int          periodBody;
                                  int          gapBody;
                                  int          periodShadowLong;
                                  int          gapShadowLong;
                                  };


TA_RetCode TA_CDLINVERTEDHAMMER_StateInit( struct TA_CDLINVERTEDHAMMER_State** _state );


TA_RetCode TA_CDLINVERTEDHAMMER_State( struct TA_CDLINVERTEDHAMMER_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDLINVERTEDHAMMER_BatchState( struct TA_CDLINVERTEDHAMMER_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDLINVERTEDHAMMER_StateFree( struct TA_CDLINVERTEDHAMMER_State** _state );


TA_RetCode TA_CDLINVERTEDHAMMER_StateSave( struct TA_CDLINVERTEDHAMMER_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDLINVERTEDHAMMER_StateLoad( struct TA_CDLINVERTEDHAMMER_State** _state,
                                         FILE* _file );



/*
 * TA_CDLKICKING - Kicking
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLKICKING( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLKICKING_Lookback( void );


struct TA_CDLKICKING_Data {
                          double       inOpen;
                          double       inHigh;
                          double       inLow;
                          double       inClose;
                          };
struct TA_CDLKICKING_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_CDLKICKING_Data* memory;
                           double       BodyPeriodTotal0;
                           double       ShadowVeryShortPeriodTotal0;
                           double       BodyPeriodTotal1;
                           double       ShadowVeryShortPeriodTotal1;
                           int          periodShadowVeryShort;
                           int          gapShadowVeryShort;
                           int          periodBody;
                           int          gapBody;
                           };


TA_RetCode TA_CDLKICKING_StateInit( struct TA_CDLKICKING_State** _state );


TA_RetCode TA_CDLKICKING_State( struct TA_CDLKICKING_State* _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           *outInteger );

TA_RetCode TA_CDLKICKING_BatchState( struct TA_CDLKICKING_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inOpen[],
                                   const double inHigh[],
                                   const double inLow[],
                                   const double inClose[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   int           outInteger[] );

TA_RetCode TA_CDLKICKING_StateFree( struct TA_CDLKICKING_State** _state );


TA_RetCode TA_CDLKICKING_StateSave( struct TA_CDLKICKING_State* _state,
                                  FILE* _file );


TA_RetCode TA_CDLKICKING_StateLoad( struct TA_CDLKICKING_State** _state,
                                  FILE* _file );



/*
 * TA_CDLKICKINGBYLENGTH - Kicking - bull/bear determined by the longer marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLKICKINGBYLENGTH( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLKICKINGBYLENGTH_Lookback( void );


struct TA_CDLKICKINGBYLENGTH_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLKICKINGBYLENGTH_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLKICKINGBYLENGTH_Data* memory;
                                   double       BodyPeriodTotal0;
                                   double       ShadowVeryShortPeriodTotal0;
                                   double       BodyPeriodTotal1;
                                   double       ShadowVeryShortPeriodTotal1;
                                   int          periodShadowVeryShort;
                                   int          gapShadowVeryShort;
                                   int          periodBody;
                                   int          gapBody;
                                   };


TA_RetCode TA_CDLKICKINGBYLENGTH_StateInit( struct TA_CDLKICKINGBYLENGTH_State** _state );


TA_RetCode TA_CDLKICKINGBYLENGTH_State( struct TA_CDLKICKINGBYLENGTH_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLKICKINGBYLENGTH_BatchState( struct TA_CDLKICKINGBYLENGTH_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLKICKINGBYLENGTH_StateFree( struct TA_CDLKICKINGBYLENGTH_State** _state );


TA_RetCode TA_CDLKICKINGBYLENGTH_StateSave( struct TA_CDLKICKINGBYLENGTH_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLKICKINGBYLENGTH_StateLoad( struct TA_CDLKICKINGBYLENGTH_State** _state,
                                          FILE* _file );



/*
 * TA_CDLLADDERBOTTOM - Ladder Bottom
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLADDERBOTTOM( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLADDERBOTTOM_Lookback( void );


struct TA_CDLLADDERBOTTOM_Data {
                               double       inOpen;
                               double       inHigh;
                               double       inLow;
                               double       inClose;
                               };
struct TA_CDLLADDERBOTTOM_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_CDLLADDERBOTTOM_Data* memory;
                                double       ShadowVeryShortPeriodTotal;
                                int          periodShadowVeryShort;
                                int          gapShadowVeryShort;
                                };


TA_RetCode TA_CDLLADDERBOTTOM_StateInit( struct TA_CDLLADDERBOTTOM_State** _state );


TA_RetCode TA_CDLLADDERBOTTOM_State( struct TA_CDLLADDERBOTTOM_State* _state,
                                   const double inOpen,
                                   const double inHigh,
                                   const double inLow,
                                   const double inClose,
                                   int           *outInteger );

TA_RetCode TA_CDLLADDERBOTTOM_BatchState( struct TA_CDLLADDERBOTTOM_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inOpen[],
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        int           outInteger[] );

TA_RetCode TA_CDLLADDERBOTTOM_StateFree( struct TA_CDLLADDERBOTTOM_State** _state );


TA_RetCode TA_CDLLADDERBOTTOM_StateSave( struct TA_CDLLADDERBOTTOM_State* _state,
                                       FILE* _file );


TA_RetCode TA_CDLLADDERBOTTOM_StateLoad( struct TA_CDLLADDERBOTTOM_State** _state,
                                       FILE* _file );



/*
 * TA_CDLLONGLEGGEDDOJI - Long Legged Doji
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLONGLEGGEDDOJI( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLONGLEGGEDDOJI_Lookback( void );


struct TA_CDLLONGLEGGEDDOJI_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDLLONGLEGGEDDOJI_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDLLONGLEGGEDDOJI_Data* memory;
                                  double       BodyDojiPeriodTotal;
                                  double       ShadowLongPeriodTotal;
                                  int          periodShadowLong;
                                  int          gapShadowLong;
                                  int          periodBodyDoji;
                                  int          gapBodyDoji;
                                  };


TA_RetCode TA_CDLLONGLEGGEDDOJI_StateInit( struct TA_CDLLONGLEGGEDDOJI_State** _state );


TA_RetCode TA_CDLLONGLEGGEDDOJI_State( struct TA_CDLLONGLEGGEDDOJI_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDLLONGLEGGEDDOJI_BatchState( struct TA_CDLLONGLEGGEDDOJI_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDLLONGLEGGEDDOJI_StateFree( struct TA_CDLLONGLEGGEDDOJI_State** _state );


TA_RetCode TA_CDLLONGLEGGEDDOJI_StateSave( struct TA_CDLLONGLEGGEDDOJI_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDLLONGLEGGEDDOJI_StateLoad( struct TA_CDLLONGLEGGEDDOJI_State** _state,
                                         FILE* _file );



/*
 * TA_CDLLONGLINE - Long Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLLONGLINE( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLLONGLINE_Lookback( void );


struct TA_CDLLONGLINE_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLLONGLINE_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLLONGLINE_Data* memory;
                            double       ShadowPeriodTotal;
                            int          periodShadow;
                            int          gapShadow;
                            double       BodyPeriodTotal;
                            int          periodBody;
                            int          gapBody;
                            };


TA_RetCode TA_CDLLONGLINE_StateInit( struct TA_CDLLONGLINE_State** _state );


TA_RetCode TA_CDLLONGLINE_State( struct TA_CDLLONGLINE_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLLONGLINE_BatchState( struct TA_CDLLONGLINE_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLLONGLINE_StateFree( struct TA_CDLLONGLINE_State** _state );


TA_RetCode TA_CDLLONGLINE_StateSave( struct TA_CDLLONGLINE_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLLONGLINE_StateLoad( struct TA_CDLLONGLINE_State** _state,
                                   FILE* _file );



/*
 * TA_CDLMARUBOZU - Marubozu
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLMARUBOZU( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMARUBOZU_Lookback( void );


struct TA_CDLMARUBOZU_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLMARUBOZU_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLMARUBOZU_Data* memory;
                            double       ShadowVeryShortPeriodTotal;
                            double       BodyLongPeriodTotal;
                            int          gapShadowVeryShort;
                            int          periodShadowVeryShort;
                            int          gapBodyLong;
                            int          periodBodyLong;
                            };


TA_RetCode TA_CDLMARUBOZU_StateInit( struct TA_CDLMARUBOZU_State** _state );


TA_RetCode TA_CDLMARUBOZU_State( struct TA_CDLMARUBOZU_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLMARUBOZU_BatchState( struct TA_CDLMARUBOZU_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLMARUBOZU_StateFree( struct TA_CDLMARUBOZU_State** _state );


TA_RetCode TA_CDLMARUBOZU_StateSave( struct TA_CDLMARUBOZU_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLMARUBOZU_StateLoad( struct TA_CDLMARUBOZU_State** _state,
                                   FILE* _file );



/*
 * TA_CDLMATCHINGLOW - Matching Low
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLMATCHINGLOW( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMATCHINGLOW_Lookback( void );


struct TA_CDLMATCHINGLOW_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLMATCHINGLOW_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLMATCHINGLOW_Data* memory;
                               double       EqualPeriodTotal;
                               int          periodEqual;
                               int          gapEqual;
                               };


TA_RetCode TA_CDLMATCHINGLOW_StateInit( struct TA_CDLMATCHINGLOW_State** _state );


TA_RetCode TA_CDLMATCHINGLOW_State( struct TA_CDLMATCHINGLOW_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLMATCHINGLOW_BatchState( struct TA_CDLMATCHINGLOW_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLMATCHINGLOW_StateFree( struct TA_CDLMATCHINGLOW_State** _state );


TA_RetCode TA_CDLMATCHINGLOW_StateSave( struct TA_CDLMATCHINGLOW_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLMATCHINGLOW_StateLoad( struct TA_CDLMATCHINGLOW_State** _state,
                                      FILE* _file );



/*
 * TA_CDLMATHOLD - Mat Hold
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMATHOLD( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMATHOLD_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMATHOLD_Data {
                          double       inOpen;
                          double       inHigh;
                          double       inLow;
                          double       inClose;
                          };
struct TA_CDLMATHOLD_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_CDLMATHOLD_Data* memory;
                           double       BodyPeriodTotal1;
                           double       BodyPeriodTotal2;
                           double       BodyPeriodTotal3;
                           double       BodyPeriodTotal4;
                           int          periodBodyShort;
                           int          gapBodyShort;
                           int          periodBodyLong;
                           int          gapBodyLong;
                           double        optInPenetration; /* From 0 to TA_REAL_MAX */
                           };


TA_RetCode TA_CDLMATHOLD_StateInit( struct TA_CDLMATHOLD_State** _state,
                                  double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLMATHOLD_State( struct TA_CDLMATHOLD_State* _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           *outInteger );

TA_RetCode TA_CDLMATHOLD_BatchState( struct TA_CDLMATHOLD_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inOpen[],
                                   const double inHigh[],
                                   const double inLow[],
                                   const double inClose[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   int           outInteger[] );

TA_RetCode TA_CDLMATHOLD_StateFree( struct TA_CDLMATHOLD_State** _state );


TA_RetCode TA_CDLMATHOLD_StateSave( struct TA_CDLMATHOLD_State* _state,
                                  FILE* _file );


TA_RetCode TA_CDLMATHOLD_StateLoad( struct TA_CDLMATHOLD_State** _state,
                                  FILE* _file );



/*
 * TA_CDLMORNINGDOJISTAR - Morning Doji Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMORNINGDOJISTAR( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMORNINGDOJISTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMORNINGDOJISTAR_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLMORNINGDOJISTAR_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLMORNINGDOJISTAR_Data* memory;
                                   double       BodyDojiPeriodTotal;
                                   double       BodyLongPeriodTotal;
                                   double       BodyShortPeriodTotal;
                                   int          periodBodyLong;
                                   int          gapBodyLong;
                                   int          periodBodyShort;
                                   int          gapBodyShort;
                                   int          periodBodyDoji;
                                   int          gapBodyDoji;
                                   double        optInPenetration; /* From 0 to TA_REAL_MAX */
                                   };


TA_RetCode TA_CDLMORNINGDOJISTAR_StateInit( struct TA_CDLMORNINGDOJISTAR_State** _state,
                                          double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLMORNINGDOJISTAR_State( struct TA_CDLMORNINGDOJISTAR_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLMORNINGDOJISTAR_BatchState( struct TA_CDLMORNINGDOJISTAR_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLMORNINGDOJISTAR_StateFree( struct TA_CDLMORNINGDOJISTAR_State** _state );


TA_RetCode TA_CDLMORNINGDOJISTAR_StateSave( struct TA_CDLMORNINGDOJISTAR_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLMORNINGDOJISTAR_StateLoad( struct TA_CDLMORNINGDOJISTAR_State** _state,
                                          FILE* _file );



/*
 * TA_CDLMORNINGSTAR - Morning Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInPenetration:(From 0 to TA_REAL_MAX)
 *    Percentage of penetration of a candle within another candle
 * 
 * 
 */
TA_RetCode TA_CDLMORNINGSTAR( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              double        OPT_REAL /* optInPenetration */, /* From 0 to TA_REAL_MAX */
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLMORNINGSTAR_Lookback( double        optInPenetration );  /* From 0 to TA_REAL_MAX */


struct TA_CDLMORNINGSTAR_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLMORNINGSTAR_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLMORNINGSTAR_Data* memory;
                               double       BodyShortPeriodTotal2;
                               double       BodyLongPeriodTotal;
                               double       BodyShortPeriodTotal;
                               int          periodBodyLong;
                               int          gapBodyLong;
                               int          periodBodyShort;
                               int          gapBodyShort;
                               double        optInPenetration; /* From 0 to TA_REAL_MAX */
                               };


TA_RetCode TA_CDLMORNINGSTAR_StateInit( struct TA_CDLMORNINGSTAR_State** _state,
                                      double        optInPenetration );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_CDLMORNINGSTAR_State( struct TA_CDLMORNINGSTAR_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLMORNINGSTAR_BatchState( struct TA_CDLMORNINGSTAR_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLMORNINGSTAR_StateFree( struct TA_CDLMORNINGSTAR_State** _state );


TA_RetCode TA_CDLMORNINGSTAR_StateSave( struct TA_CDLMORNINGSTAR_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLMORNINGSTAR_StateLoad( struct TA_CDLMORNINGSTAR_State** _state,
                                      FILE* _file );



/*
 * TA_CDLONNECK - On-Neck Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLONNECK( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLONNECK_Lookback( void );


struct TA_CDLONNECK_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDLONNECK_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDLONNECK_Data* memory;
                          double       EqualPeriodTotal;
                          int          periodEqual;
                          int          gapEqual;
                          double       BodyLongPeriodTotal;
                          int          periodBodyLong;
                          int          gapBodyLong;
                          };


TA_RetCode TA_CDLONNECK_StateInit( struct TA_CDLONNECK_State** _state );


TA_RetCode TA_CDLONNECK_State( struct TA_CDLONNECK_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDLONNECK_BatchState( struct TA_CDLONNECK_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDLONNECK_StateFree( struct TA_CDLONNECK_State** _state );


TA_RetCode TA_CDLONNECK_StateSave( struct TA_CDLONNECK_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDLONNECK_StateLoad( struct TA_CDLONNECK_State** _state,
                                 FILE* _file );



/*
 * TA_CDLPIERCING - Piercing Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLPIERCING( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inOpen */,
                           const double *IN_ARRAY /* inHigh */,
                           const double *IN_ARRAY /* inLow */,
                           const double *IN_ARRAY /* inClose */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outInteger */ );

int TA_CDLPIERCING_Lookback( void );


struct TA_CDLPIERCING_Data {
                           double       inOpen;
                           double       inHigh;
                           double       inLow;
                           double       inClose;
                           };
struct TA_CDLPIERCING_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_CDLPIERCING_Data* memory;
                            double       BodyLongPeriodTotal0;
                            double       BodyLongPeriodTotal1;
                            int          periodBodyLong;
                            int          gapBodyLong;
                            };


TA_RetCode TA_CDLPIERCING_StateInit( struct TA_CDLPIERCING_State** _state );


TA_RetCode TA_CDLPIERCING_State( struct TA_CDLPIERCING_State* _state,
                               const double inOpen,
                               const double inHigh,
                               const double inLow,
                               const double inClose,
                               int           *outInteger );

TA_RetCode TA_CDLPIERCING_BatchState( struct TA_CDLPIERCING_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inOpen[],
                                    const double inHigh[],
                                    const double inLow[],
                                    const double inClose[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outInteger[] );

TA_RetCode TA_CDLPIERCING_StateFree( struct TA_CDLPIERCING_State** _state );


TA_RetCode TA_CDLPIERCING_StateSave( struct TA_CDLPIERCING_State* _state,
                                   FILE* _file );


TA_RetCode TA_CDLPIERCING_StateLoad( struct TA_CDLPIERCING_State** _state,
                                   FILE* _file );



/*
 * TA_CDLRICKSHAWMAN - Rickshaw Man
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLRICKSHAWMAN( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLRICKSHAWMAN_Lookback( void );


struct TA_CDLRICKSHAWMAN_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLRICKSHAWMAN_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLRICKSHAWMAN_Data* memory;
                               double       BodyDojiPeriodTotal;
                               double       ShadowLongPeriodTotal;
                               double       NearPeriodTotal;
                               int          periodBodyDoji;
                               int          periodShadowLong;
                               int          periodNear;
                               int          gapBodyDoji;
                               int          gapShadowLong;
                               int          gapNear;
                               };


TA_RetCode TA_CDLRICKSHAWMAN_StateInit( struct TA_CDLRICKSHAWMAN_State** _state );


TA_RetCode TA_CDLRICKSHAWMAN_State( struct TA_CDLRICKSHAWMAN_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLRICKSHAWMAN_BatchState( struct TA_CDLRICKSHAWMAN_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLRICKSHAWMAN_StateFree( struct TA_CDLRICKSHAWMAN_State** _state );


TA_RetCode TA_CDLRICKSHAWMAN_StateSave( struct TA_CDLRICKSHAWMAN_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLRICKSHAWMAN_StateLoad( struct TA_CDLRICKSHAWMAN_State** _state,
                                      FILE* _file );



/*
 * TA_CDLRISEFALL3METHODS - Rising/Falling Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLRISEFALL3METHODS( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLRISEFALL3METHODS_Lookback( void );


struct TA_CDLRISEFALL3METHODS_Data {
                                   double       inOpen;
                                   double       inHigh;
                                   double       inLow;
                                   double       inClose;
                                   };
struct TA_CDLRISEFALL3METHODS_State {
                                    size_t mem_size;
                                    size_t mem_index;
                                    struct TA_CDLRISEFALL3METHODS_Data* memory;
                                    double       BodyPeriodTotal0;
                                    double       BodyPeriodTotal1;
                                    double       BodyPeriodTotal2;
                                    double       BodyPeriodTotal3;
                                    double       BodyPeriodTotal4;
                                    int          periodBodyShort;
                                    int          gapBodyShort;
                                    int          periodBodyLong;
                                    int          gapBodyLong;
                                    };


TA_RetCode TA_CDLRISEFALL3METHODS_StateInit( struct TA_CDLRISEFALL3METHODS_State** _state );


TA_RetCode TA_CDLRISEFALL3METHODS_State( struct TA_CDLRISEFALL3METHODS_State* _state,
                                       const double inOpen,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           *outInteger );

TA_RetCode TA_CDLRISEFALL3METHODS_BatchState( struct TA_CDLRISEFALL3METHODS_State* _state,
                                            int startIdx,
                                            int endIdx,
                                            const double inOpen[],
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            int           outInteger[] );

TA_RetCode TA_CDLRISEFALL3METHODS_StateFree( struct TA_CDLRISEFALL3METHODS_State** _state );


TA_RetCode TA_CDLRISEFALL3METHODS_StateSave( struct TA_CDLRISEFALL3METHODS_State* _state,
                                           FILE* _file );


TA_RetCode TA_CDLRISEFALL3METHODS_StateLoad( struct TA_CDLRISEFALL3METHODS_State** _state,
                                           FILE* _file );



/*
 * TA_CDLSEPARATINGLINES - Separating Lines
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSEPARATINGLINES( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSEPARATINGLINES_Lookback( void );


struct TA_CDLSEPARATINGLINES_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLSEPARATINGLINES_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLSEPARATINGLINES_Data* memory;
                                   double       ShadowVeryShortPeriodTotal;
                                   double       BodyLongPeriodTotal;
                                   double       EqualPeriodTotal;
                                   int          gapShadowVeryShort;
                                   int          periodShadowVeryShort;
                                   int          gapBodyLong;
                                   int          periodBodyLong;
                                   int          gapEqual;
                                   int          periodEqual;
                                   };


TA_RetCode TA_CDLSEPARATINGLINES_StateInit( struct TA_CDLSEPARATINGLINES_State** _state );


TA_RetCode TA_CDLSEPARATINGLINES_State( struct TA_CDLSEPARATINGLINES_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLSEPARATINGLINES_BatchState( struct TA_CDLSEPARATINGLINES_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLSEPARATINGLINES_StateFree( struct TA_CDLSEPARATINGLINES_State** _state );


TA_RetCode TA_CDLSEPARATINGLINES_StateSave( struct TA_CDLSEPARATINGLINES_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLSEPARATINGLINES_StateLoad( struct TA_CDLSEPARATINGLINES_State** _state,
                                          FILE* _file );



/*
 * TA_CDLSHOOTINGSTAR - Shooting Star
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSHOOTINGSTAR( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSHOOTINGSTAR_Lookback( void );


struct TA_CDLSHOOTINGSTAR_Data {
                               double       inOpen;
                               double       inHigh;
                               double       inLow;
                               double       inClose;
                               };
struct TA_CDLSHOOTINGSTAR_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_CDLSHOOTINGSTAR_Data* memory;
                                double       BodyPeriodTotal;
                                double       ShadowLongPeriodTotal;
                                double       ShadowVeryShortPeriodTotal;
                                int          periodBody;
                                int          periodShadowLong;
                                int          periodShadowVeryShort;
                                int          gapBody;
                                int          gapShadowLong;
                                int          gapShadowVeryShort;
                                };


TA_RetCode TA_CDLSHOOTINGSTAR_StateInit( struct TA_CDLSHOOTINGSTAR_State** _state );


TA_RetCode TA_CDLSHOOTINGSTAR_State( struct TA_CDLSHOOTINGSTAR_State* _state,
                                   const double inOpen,
                                   const double inHigh,
                                   const double inLow,
                                   const double inClose,
                                   int           *outInteger );

TA_RetCode TA_CDLSHOOTINGSTAR_BatchState( struct TA_CDLSHOOTINGSTAR_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inOpen[],
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        int           outInteger[] );

TA_RetCode TA_CDLSHOOTINGSTAR_StateFree( struct TA_CDLSHOOTINGSTAR_State** _state );


TA_RetCode TA_CDLSHOOTINGSTAR_StateSave( struct TA_CDLSHOOTINGSTAR_State* _state,
                                       FILE* _file );


TA_RetCode TA_CDLSHOOTINGSTAR_StateLoad( struct TA_CDLSHOOTINGSTAR_State** _state,
                                       FILE* _file );



/*
 * TA_CDLSHORTLINE - Short Line Candle
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSHORTLINE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSHORTLINE_Lookback( void );


struct TA_CDLSHORTLINE_Data {
                            double       inOpen;
                            double       inHigh;
                            double       inLow;
                            double       inClose;
                            };
struct TA_CDLSHORTLINE_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_CDLSHORTLINE_Data* memory;
                             double       ShadowPeriodTotal;
                             int          periodShadow;
                             int          gapShadow;
                             double       BodyPeriodTotal;
                             int          periodBody;
                             int          gapBody;
                             };


TA_RetCode TA_CDLSHORTLINE_StateInit( struct TA_CDLSHORTLINE_State** _state );


TA_RetCode TA_CDLSHORTLINE_State( struct TA_CDLSHORTLINE_State* _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           *outInteger );

TA_RetCode TA_CDLSHORTLINE_BatchState( struct TA_CDLSHORTLINE_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inOpen[],
                                     const double inHigh[],
                                     const double inLow[],
                                     const double inClose[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_CDLSHORTLINE_StateFree( struct TA_CDLSHORTLINE_State** _state );


TA_RetCode TA_CDLSHORTLINE_StateSave( struct TA_CDLSHORTLINE_State* _state,
                                    FILE* _file );


TA_RetCode TA_CDLSHORTLINE_StateLoad( struct TA_CDLSHORTLINE_State** _state,
                                    FILE* _file );



/*
 * TA_CDLSPINNINGTOP - Spinning Top
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSPINNINGTOP( int           START_IDX,
                              int           END_IDX,
                              const double *IN_ARRAY /* inOpen */,
                              const double *IN_ARRAY /* inHigh */,
                              const double *IN_ARRAY /* inLow */,
                              const double *IN_ARRAY /* inClose */,
                              int          *BEG_IDX,
                              int          *OUT_SIZE,
                              int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSPINNINGTOP_Lookback( void );


struct TA_CDLSPINNINGTOP_Data {
                              double       inOpen;
                              double       inHigh;
                              double       inLow;
                              double       inClose;
                              };
struct TA_CDLSPINNINGTOP_State {
                               size_t mem_size;
                               size_t mem_index;
                               struct TA_CDLSPINNINGTOP_Data* memory;
                               double       BodyPeriodTotal;
                               int          periodBody;
                               int          gapBody;
                               };


TA_RetCode TA_CDLSPINNINGTOP_StateInit( struct TA_CDLSPINNINGTOP_State** _state );


TA_RetCode TA_CDLSPINNINGTOP_State( struct TA_CDLSPINNINGTOP_State* _state,
                                  const double inOpen,
                                  const double inHigh,
                                  const double inLow,
                                  const double inClose,
                                  int           *outInteger );

TA_RetCode TA_CDLSPINNINGTOP_BatchState( struct TA_CDLSPINNINGTOP_State* _state,
                                       int startIdx,
                                       int endIdx,
                                       const double inOpen[],
                                       const double inHigh[],
                                       const double inLow[],
                                       const double inClose[],
                                       int          *outBegIdx,
                                       int          *outNBElement,
                                       int           outInteger[] );

TA_RetCode TA_CDLSPINNINGTOP_StateFree( struct TA_CDLSPINNINGTOP_State** _state );


TA_RetCode TA_CDLSPINNINGTOP_StateSave( struct TA_CDLSPINNINGTOP_State* _state,
                                      FILE* _file );


TA_RetCode TA_CDLSPINNINGTOP_StateLoad( struct TA_CDLSPINNINGTOP_State** _state,
                                      FILE* _file );



/*
 * TA_CDLSTALLEDPATTERN - Stalled Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSTALLEDPATTERN( int           START_IDX,
                                 int           END_IDX,
                                 const double *IN_ARRAY /* inOpen */,
                                 const double *IN_ARRAY /* inHigh */,
                                 const double *IN_ARRAY /* inLow */,
                                 const double *IN_ARRAY /* inClose */,
                                 int          *BEG_IDX,
                                 int          *OUT_SIZE,
                                 int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSTALLEDPATTERN_Lookback( void );


struct TA_CDLSTALLEDPATTERN_Data {
                                 double       inOpen;
                                 double       inHigh;
                                 double       inLow;
                                 double       inClose;
                                 };
struct TA_CDLSTALLEDPATTERN_State {
                                  size_t mem_size;
                                  size_t mem_index;
                                  struct TA_CDLSTALLEDPATTERN_Data* memory;
                                  double       BodyLongPeriodTotal1;
                                  double       BodyLongPeriodTotal2;
                                  int          periodBodyLong;
                                  int          gapBodyLong;
                                  double       BodyShortPeriodTotal;
                                  int          periodBodyShort;
                                  int          gapBodyShort;
                                  double       ShadowVeryShortPeriodTotal;
                                  int          periodShadowVeryShort;
                                  int          gapShadowVeryShort;
                                  double       NearPeriodTotal1;
                                  double       NearPeriodTotal2;
                                  int          periodNear;
                                  int          gapNear;
                                  };


TA_RetCode TA_CDLSTALLEDPATTERN_StateInit( struct TA_CDLSTALLEDPATTERN_State** _state );


TA_RetCode TA_CDLSTALLEDPATTERN_State( struct TA_CDLSTALLEDPATTERN_State* _state,
                                     const double inOpen,
                                     const double inHigh,
                                     const double inLow,
                                     const double inClose,
                                     int           *outInteger );

TA_RetCode TA_CDLSTALLEDPATTERN_BatchState( struct TA_CDLSTALLEDPATTERN_State* _state,
                                          int startIdx,
                                          int endIdx,
                                          const double inOpen[],
                                          const double inHigh[],
                                          const double inLow[],
                                          const double inClose[],
                                          int          *outBegIdx,
                                          int          *outNBElement,
                                          int           outInteger[] );

TA_RetCode TA_CDLSTALLEDPATTERN_StateFree( struct TA_CDLSTALLEDPATTERN_State** _state );


TA_RetCode TA_CDLSTALLEDPATTERN_StateSave( struct TA_CDLSTALLEDPATTERN_State* _state,
                                         FILE* _file );


TA_RetCode TA_CDLSTALLEDPATTERN_StateLoad( struct TA_CDLSTALLEDPATTERN_State** _state,
                                         FILE* _file );



/*
 * TA_CDLSTICKSANDWICH - Stick Sandwich
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLSTICKSANDWICH( int           START_IDX,
                                int           END_IDX,
                                const double *IN_ARRAY /* inOpen */,
                                const double *IN_ARRAY /* inHigh */,
                                const double *IN_ARRAY /* inLow */,
                                const double *IN_ARRAY /* inClose */,
                                int          *BEG_IDX,
                                int          *OUT_SIZE,
                                int          *OUT_ARRAY /* outInteger */ );

int TA_CDLSTICKSANDWICH_Lookback( void );


struct TA_CDLSTICKSANDWICH_Data {
                                double       inOpen;
                                double       inHigh;
                                double       inLow;
                                double       inClose;
                                };
struct TA_CDLSTICKSANDWICH_State {
                                 size_t mem_size;
                                 size_t mem_index;
                                 struct TA_CDLSTICKSANDWICH_Data* memory;
                                 double       EqualPeriodTotal;
                                 int          periodEqual;
                                 int          gapEqual;
                                 };


TA_RetCode TA_CDLSTICKSANDWICH_StateInit( struct TA_CDLSTICKSANDWICH_State** _state );


TA_RetCode TA_CDLSTICKSANDWICH_State( struct TA_CDLSTICKSANDWICH_State* _state,
                                    const double inOpen,
                                    const double inHigh,
                                    const double inLow,
                                    const double inClose,
                                    int           *outInteger );

TA_RetCode TA_CDLSTICKSANDWICH_BatchState( struct TA_CDLSTICKSANDWICH_State* _state,
                                         int startIdx,
                                         int endIdx,
                                         const double inOpen[],
                                         const double inHigh[],
                                         const double inLow[],
                                         const double inClose[],
                                         int          *outBegIdx,
                                         int          *outNBElement,
                                         int           outInteger[] );

TA_RetCode TA_CDLSTICKSANDWICH_StateFree( struct TA_CDLSTICKSANDWICH_State** _state );


TA_RetCode TA_CDLSTICKSANDWICH_StateSave( struct TA_CDLSTICKSANDWICH_State* _state,
                                        FILE* _file );


TA_RetCode TA_CDLSTICKSANDWICH_StateLoad( struct TA_CDLSTICKSANDWICH_State** _state,
                                        FILE* _file );



/*
 * TA_CDLTAKURI - Takuri (Dragonfly Doji with very long lower shadow)
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTAKURI( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inOpen */,
                         const double *IN_ARRAY /* inHigh */,
                         const double *IN_ARRAY /* inLow */,
                         const double *IN_ARRAY /* inClose */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTAKURI_Lookback( void );


struct TA_CDLTAKURI_Data {
                         double       inOpen;
                         double       inHigh;
                         double       inLow;
                         double       inClose;
                         };
struct TA_CDLTAKURI_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_CDLTAKURI_Data* memory;
                          double       BodyDojiPeriodTotal;
                          double       ShadowVeryShortPeriodTotal;
                          double       ShadowVeryLongPeriodTotal;
                          int          periodBodyDoji;
                          int          gapBodyDoji;
                          int          periodShadowVeryShort;
                          int          gapShadowVeryShort;
                          int          periodShadowVeryLong;
                          int          gapShadowVeryLong;
                          };


TA_RetCode TA_CDLTAKURI_StateInit( struct TA_CDLTAKURI_State** _state );


TA_RetCode TA_CDLTAKURI_State( struct TA_CDLTAKURI_State* _state,
                             const double inOpen,
                             const double inHigh,
                             const double inLow,
                             const double inClose,
                             int           *outInteger );

TA_RetCode TA_CDLTAKURI_BatchState( struct TA_CDLTAKURI_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inOpen[],
                                  const double inHigh[],
                                  const double inLow[],
                                  const double inClose[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  int           outInteger[] );

TA_RetCode TA_CDLTAKURI_StateFree( struct TA_CDLTAKURI_State** _state );


TA_RetCode TA_CDLTAKURI_StateSave( struct TA_CDLTAKURI_State* _state,
                                 FILE* _file );


TA_RetCode TA_CDLTAKURI_StateLoad( struct TA_CDLTAKURI_State** _state,
                                 FILE* _file );



/*
 * TA_CDLTASUKIGAP - Tasuki Gap
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTASUKIGAP( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTASUKIGAP_Lookback( void );


struct TA_CDLTASUKIGAP_Data {
                            double       inOpen;
                            double       inHigh;
                            double       inLow;
                            double       inClose;
                            };
struct TA_CDLTASUKIGAP_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_CDLTASUKIGAP_Data* memory;
                             double       NearPeriodTotal;
                             int          periodNear;
                             int          gapNear;
                             };


TA_RetCode TA_CDLTASUKIGAP_StateInit( struct TA_CDLTASUKIGAP_State** _state );


TA_RetCode TA_CDLTASUKIGAP_State( struct TA_CDLTASUKIGAP_State* _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           *outInteger );

TA_RetCode TA_CDLTASUKIGAP_BatchState( struct TA_CDLTASUKIGAP_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inOpen[],
                                     const double inHigh[],
                                     const double inLow[],
                                     const double inClose[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_CDLTASUKIGAP_StateFree( struct TA_CDLTASUKIGAP_State** _state );


TA_RetCode TA_CDLTASUKIGAP_StateSave( struct TA_CDLTASUKIGAP_State* _state,
                                    FILE* _file );


TA_RetCode TA_CDLTASUKIGAP_StateLoad( struct TA_CDLTASUKIGAP_State** _state,
                                    FILE* _file );



/*
 * TA_CDLTHRUSTING - Thrusting Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTHRUSTING( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inOpen */,
                            const double *IN_ARRAY /* inHigh */,
                            const double *IN_ARRAY /* inLow */,
                            const double *IN_ARRAY /* inClose */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTHRUSTING_Lookback( void );


struct TA_CDLTHRUSTING_Data {
                            double       inOpen;
                            double       inHigh;
                            double       inLow;
                            double       inClose;
                            };
struct TA_CDLTHRUSTING_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_CDLTHRUSTING_Data* memory;
                             double       EqualPeriodTotal;
                             int          periodEqual;
                             int          gapEqual;
                             double       BodyLongPeriodTotal;
                             int          periodBodyLong;
                             int          gapBodyLong;
                             };


TA_RetCode TA_CDLTHRUSTING_StateInit( struct TA_CDLTHRUSTING_State** _state );


TA_RetCode TA_CDLTHRUSTING_State( struct TA_CDLTHRUSTING_State* _state,
                                const double inOpen,
                                const double inHigh,
                                const double inLow,
                                const double inClose,
                                int           *outInteger );

TA_RetCode TA_CDLTHRUSTING_BatchState( struct TA_CDLTHRUSTING_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inOpen[],
                                     const double inHigh[],
                                     const double inLow[],
                                     const double inClose[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_CDLTHRUSTING_StateFree( struct TA_CDLTHRUSTING_State** _state );


TA_RetCode TA_CDLTHRUSTING_StateSave( struct TA_CDLTHRUSTING_State* _state,
                                    FILE* _file );


TA_RetCode TA_CDLTHRUSTING_StateLoad( struct TA_CDLTHRUSTING_State** _state,
                                    FILE* _file );



/*
 * TA_CDLTRISTAR - Tristar Pattern
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLTRISTAR( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inOpen */,
                          const double *IN_ARRAY /* inHigh */,
                          const double *IN_ARRAY /* inLow */,
                          const double *IN_ARRAY /* inClose */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          int          *OUT_ARRAY /* outInteger */ );

int TA_CDLTRISTAR_Lookback( void );


struct TA_CDLTRISTAR_Data {
                          double       inOpen;
                          double       inHigh;
                          double       inLow;
                          double       inClose;
                          };
struct TA_CDLTRISTAR_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_CDLTRISTAR_Data* memory;
                           double       BodyPeriodTotal;
                           int          periodBody;
                           int          gapBody;
                           };


TA_RetCode TA_CDLTRISTAR_StateInit( struct TA_CDLTRISTAR_State** _state );


TA_RetCode TA_CDLTRISTAR_State( struct TA_CDLTRISTAR_State* _state,
                              const double inOpen,
                              const double inHigh,
                              const double inLow,
                              const double inClose,
                              int           *outInteger );

TA_RetCode TA_CDLTRISTAR_BatchState( struct TA_CDLTRISTAR_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inOpen[],
                                   const double inHigh[],
                                   const double inLow[],
                                   const double inClose[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   int           outInteger[] );

TA_RetCode TA_CDLTRISTAR_StateFree( struct TA_CDLTRISTAR_State** _state );


TA_RetCode TA_CDLTRISTAR_StateSave( struct TA_CDLTRISTAR_State* _state,
                                  FILE* _file );


TA_RetCode TA_CDLTRISTAR_StateLoad( struct TA_CDLTRISTAR_State** _state,
                                  FILE* _file );



/*
 * TA_CDLUNIQUE3RIVER - Unique 3 River
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLUNIQUE3RIVER( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inOpen */,
                               const double *IN_ARRAY /* inHigh */,
                               const double *IN_ARRAY /* inLow */,
                               const double *IN_ARRAY /* inClose */,
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               int          *OUT_ARRAY /* outInteger */ );

int TA_CDLUNIQUE3RIVER_Lookback( void );


struct TA_CDLUNIQUE3RIVER_Data {
                               double       inOpen;
                               double       inHigh;
                               double       inLow;
                               double       inClose;
                               };
struct TA_CDLUNIQUE3RIVER_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_CDLUNIQUE3RIVER_Data* memory;
                                double       BodyLongPeriodTotal;
                                double       BodyShortPeriodTotal;
                                int          gapBodyLong;
                                int          periodBodyLong;
                                int          gapBodyShort;
                                int          periodBodyShort;
                                };


TA_RetCode TA_CDLUNIQUE3RIVER_StateInit( struct TA_CDLUNIQUE3RIVER_State** _state );


TA_RetCode TA_CDLUNIQUE3RIVER_State( struct TA_CDLUNIQUE3RIVER_State* _state,
                                   const double inOpen,
                                   const double inHigh,
                                   const double inLow,
                                   const double inClose,
                                   int           *outInteger );

TA_RetCode TA_CDLUNIQUE3RIVER_BatchState( struct TA_CDLUNIQUE3RIVER_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inOpen[],
                                        const double inHigh[],
                                        const double inLow[],
                                        const double inClose[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        int           outInteger[] );

TA_RetCode TA_CDLUNIQUE3RIVER_StateFree( struct TA_CDLUNIQUE3RIVER_State** _state );


TA_RetCode TA_CDLUNIQUE3RIVER_StateSave( struct TA_CDLUNIQUE3RIVER_State* _state,
                                       FILE* _file );


TA_RetCode TA_CDLUNIQUE3RIVER_StateLoad( struct TA_CDLUNIQUE3RIVER_State** _state,
                                       FILE* _file );



/*
 * TA_CDLUPSIDEGAP2CROWS - Upside Gap Two Crows
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLUPSIDEGAP2CROWS( int           START_IDX,
                                  int           END_IDX,
                                  const double *IN_ARRAY /* inOpen */,
                                  const double *IN_ARRAY /* inHigh */,
                                  const double *IN_ARRAY /* inLow */,
                                  const double *IN_ARRAY /* inClose */,
                                  int          *BEG_IDX,
                                  int          *OUT_SIZE,
                                  int          *OUT_ARRAY /* outInteger */ );

int TA_CDLUPSIDEGAP2CROWS_Lookback( void );


struct TA_CDLUPSIDEGAP2CROWS_Data {
                                  double       inOpen;
                                  double       inHigh;
                                  double       inLow;
                                  double       inClose;
                                  };
struct TA_CDLUPSIDEGAP2CROWS_State {
                                   size_t mem_size;
                                   size_t mem_index;
                                   struct TA_CDLUPSIDEGAP2CROWS_Data* memory;
                                   double       BodyLongPeriodTotal;
                                   double       BodyShortPeriodTotal;
                                   int          gapBodyLong;
                                   int          periodBodyLong;
                                   int          gapBodyShort;
                                   int          periodBodyShort;
                                   };


TA_RetCode TA_CDLUPSIDEGAP2CROWS_StateInit( struct TA_CDLUPSIDEGAP2CROWS_State** _state );


TA_RetCode TA_CDLUPSIDEGAP2CROWS_State( struct TA_CDLUPSIDEGAP2CROWS_State* _state,
                                      const double inOpen,
                                      const double inHigh,
                                      const double inLow,
                                      const double inClose,
                                      int           *outInteger );

TA_RetCode TA_CDLUPSIDEGAP2CROWS_BatchState( struct TA_CDLUPSIDEGAP2CROWS_State* _state,
                                           int startIdx,
                                           int endIdx,
                                           const double inOpen[],
                                           const double inHigh[],
                                           const double inLow[],
                                           const double inClose[],
                                           int          *outBegIdx,
                                           int          *outNBElement,
                                           int           outInteger[] );

TA_RetCode TA_CDLUPSIDEGAP2CROWS_StateFree( struct TA_CDLUPSIDEGAP2CROWS_State** _state );


TA_RetCode TA_CDLUPSIDEGAP2CROWS_StateSave( struct TA_CDLUPSIDEGAP2CROWS_State* _state,
                                          FILE* _file );


TA_RetCode TA_CDLUPSIDEGAP2CROWS_StateLoad( struct TA_CDLUPSIDEGAP2CROWS_State** _state,
                                          FILE* _file );



/*
 * TA_CDLXSIDEGAP3METHODS - Upside/Downside Gap Three Methods
 * 
 * Input  = Open, High, Low, Close
 * Output = int
 * 
 */
TA_RetCode TA_CDLXSIDEGAP3METHODS( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inOpen */,
                                   const double *IN_ARRAY /* inHigh */,
                                   const double *IN_ARRAY /* inLow */,
                                   const double *IN_ARRAY /* inClose */,
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   int          *OUT_ARRAY /* outInteger */ );

int TA_CDLXSIDEGAP3METHODS_Lookback( void );


struct TA_CDLXSIDEGAP3METHODS_Data {
                                   double       inOpen;
                                   double       inHigh;
                                   double       inLow;
                                   double       inClose;
                                   };
struct TA_CDLXSIDEGAP3METHODS_State {
                                    size_t mem_size;
                                    size_t mem_index;
                                    struct TA_CDLXSIDEGAP3METHODS_Data* memory;
                                    };


TA_RetCode TA_CDLXSIDEGAP3METHODS_StateInit( struct TA_CDLXSIDEGAP3METHODS_State** _state );


TA_RetCode TA_CDLXSIDEGAP3METHODS_State( struct TA_CDLXSIDEGAP3METHODS_State* _state,
                                       const double inOpen,
                                       const double inHigh,
                                       const double inLow,
                                       const double inClose,
                                       int           *outInteger );

TA_RetCode TA_CDLXSIDEGAP3METHODS_BatchState( struct TA_CDLXSIDEGAP3METHODS_State* _state,
                                            int startIdx,
                                            int endIdx,
                                            const double inOpen[],
                                            const double inHigh[],
                                            const double inLow[],
                                            const double inClose[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            int           outInteger[] );

TA_RetCode TA_CDLXSIDEGAP3METHODS_StateFree( struct TA_CDLXSIDEGAP3METHODS_State** _state );


TA_RetCode TA_CDLXSIDEGAP3METHODS_StateSave( struct TA_CDLXSIDEGAP3METHODS_State* _state,
                                           FILE* _file );


TA_RetCode TA_CDLXSIDEGAP3METHODS_StateLoad( struct TA_CDLXSIDEGAP3METHODS_State** _state,
                                           FILE* _file );



/*
 * TA_CEIL - Vector Ceil
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_CEIL( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_CEIL_Lookback( void );


struct TA_CEIL_Data {
                    double       inReal;
                    };
struct TA_CEIL_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_CEIL_Data* memory;
                     };


TA_RetCode TA_CEIL_StateInit( struct TA_CEIL_State** _state );


TA_RetCode TA_CEIL_State( struct TA_CEIL_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_CEIL_BatchState( struct TA_CEIL_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_CEIL_StateFree( struct TA_CEIL_State** _state );


TA_RetCode TA_CEIL_StateSave( struct TA_CEIL_State* _state,
                            FILE* _file );


TA_RetCode TA_CEIL_StateLoad( struct TA_CEIL_State** _state,
                            FILE* _file );



/*
 * TA_CMO - Chande Momentum Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CMO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_CMO_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_CMO_Data {
                   double       inReal;
                   };
struct TA_CMO_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_CMO_Data* memory;
                    int          MetastockMode;
                    double       prevGain;
                    double       prevLoss;
                    double       prevValue;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_CMO_StateInit( struct TA_CMO_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_CMO_State( struct TA_CMO_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_CMO_BatchState( struct TA_CMO_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_CMO_StateFree( struct TA_CMO_State** _state );


TA_RetCode TA_CMO_StateSave( struct TA_CMO_State* _state,
                           FILE* _file );


TA_RetCode TA_CMO_StateLoad( struct TA_CMO_State** _state,
                           FILE* _file );



/*
 * TA_CORREL - Pearson's Correlation Coefficient (r)
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_CORREL( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal0 */,
                      const double *IN_ARRAY /* inReal1 */,
                      int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_CORREL_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_CORREL_Data {
                      double       inReal0;
                      double       inReal1;
                      };
struct TA_CORREL_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_CORREL_Data* memory;
                       double       sumXY;
                       double       sumX;
                       double       sumY;
                       double       sumX2;
                       double       sumY2;
                       int           optInTimePeriod; /* From 1 to 100000 */
                       };


TA_RetCode TA_CORREL_StateInit( struct TA_CORREL_State** _state,
                              int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_CORREL_State( struct TA_CORREL_State* _state,
                          const double inReal0,
                          const double inReal1,
                          double        *outReal );

TA_RetCode TA_CORREL_BatchState( struct TA_CORREL_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inReal0[],
                               const double inReal1[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_CORREL_StateFree( struct TA_CORREL_State** _state );


TA_RetCode TA_CORREL_StateSave( struct TA_CORREL_State* _state,
                              FILE* _file );


TA_RetCode TA_CORREL_StateLoad( struct TA_CORREL_State** _state,
                              FILE* _file );



/*
 * TA_COS - Vector Trigonometric Cos
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_COS( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_COS_Lookback( void );


struct TA_COS_Data {
                   double       inReal;
                   };
struct TA_COS_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_COS_Data* memory;
                    };


TA_RetCode TA_COS_StateInit( struct TA_COS_State** _state );


TA_RetCode TA_COS_State( struct TA_COS_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_COS_BatchState( struct TA_COS_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_COS_StateFree( struct TA_COS_State** _state );


TA_RetCode TA_COS_StateSave( struct TA_COS_State* _state,
                           FILE* _file );


TA_RetCode TA_COS_StateLoad( struct TA_COS_State** _state,
                           FILE* _file );



/*
 * TA_COSH - Vector Trigonometric Cosh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_COSH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_COSH_Lookback( void );


struct TA_COSH_Data {
                    double       inReal;
                    };
struct TA_COSH_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_COSH_Data* memory;
                     };


TA_RetCode TA_COSH_StateInit( struct TA_COSH_State** _state );


TA_RetCode TA_COSH_State( struct TA_COSH_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_COSH_BatchState( struct TA_COSH_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_COSH_StateFree( struct TA_COSH_State** _state );


TA_RetCode TA_COSH_StateSave( struct TA_COSH_State* _state,
                            FILE* _file );


TA_RetCode TA_COSH_StateLoad( struct TA_COSH_State** _state,
                            FILE* _file );



/*
 * TA_DEMA - Double Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DEMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_DEMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_DEMA_Data {
                    double       inReal;
                    };
struct TA_DEMA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_DEMA_Data* memory;
                     void*        state_EMA;
                     void*        state_EMA2;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_DEMA_StateInit( struct TA_DEMA_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_DEMA_State( struct TA_DEMA_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_DEMA_BatchState( struct TA_DEMA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_DEMA_StateFree( struct TA_DEMA_State** _state );


TA_RetCode TA_DEMA_StateSave( struct TA_DEMA_State* _state,
                            FILE* _file );


TA_RetCode TA_DEMA_StateLoad( struct TA_DEMA_State** _state,
                            FILE* _file );



/*
 * TA_DIV - Vector Arithmetic Div
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_DIV( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_DIV_Lookback( void );


struct TA_DIV_Data {
                   double       inReal0;
                   double       inReal1;
                   };
struct TA_DIV_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_DIV_Data* memory;
                    };


TA_RetCode TA_DIV_StateInit( struct TA_DIV_State** _state );


TA_RetCode TA_DIV_State( struct TA_DIV_State* _state,
                       const double inReal0,
                       const double inReal1,
                       double        *outReal );

TA_RetCode TA_DIV_BatchState( struct TA_DIV_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal0[],
                            const double inReal1[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_DIV_StateFree( struct TA_DIV_State** _state );


TA_RetCode TA_DIV_StateSave( struct TA_DIV_State* _state,
                           FILE* _file );


TA_RetCode TA_DIV_StateLoad( struct TA_DIV_State** _state,
                           FILE* _file );



/*
 * TA_DX - Directional Movement Index
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_DX( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inHigh */,
                  const double *IN_ARRAY /* inLow */,
                  const double *IN_ARRAY /* inClose */,
                  int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_DX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_DX_Data {
                  double       inHigh;
                  double       inLow;
                  double       inClose;
                  };
struct TA_DX_State {
                   size_t mem_size;
                   size_t mem_index;
                   struct TA_DX_Data* memory;
                   double       prevHigh;
                   double       prevLow;
                   double       prevClose;
                   double       prevMinusDM;
                   double       prevPlusDM;
                   double       prevTR;
                   double       prevOutReal;
                   int           optInTimePeriod; /* From 2 to 100000 */
                   };


TA_RetCode TA_DX_StateInit( struct TA_DX_State** _state,
                          int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_DX_State( struct TA_DX_State* _state,
                      const double inHigh,
                      const double inLow,
                      const double inClose,
                      double        *outReal );

TA_RetCode TA_DX_BatchState( struct TA_DX_State* _state,
                           int startIdx,
                           int endIdx,
                           const double inHigh[],
                           const double inLow[],
                           const double inClose[],
                           int          *outBegIdx,
                           int          *outNBElement,
                           double        outReal[] );

TA_RetCode TA_DX_StateFree( struct TA_DX_State** _state );


TA_RetCode TA_DX_StateSave( struct TA_DX_State* _state,
                          FILE* _file );


TA_RetCode TA_DX_StateLoad( struct TA_DX_State** _state,
                          FILE* _file );



/*
 * TA_EMA - Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_EMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_EMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_EMA_Data {
                   double       inReal;
                   };
struct TA_EMA_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_EMA_Data* memory;
                    double       prevMA;
                    double       tempSum;
                    double       preprRes;
                    double       optInK_1;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_EMA_StateInit( struct TA_EMA_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_EMA_State( struct TA_EMA_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_EMA_BatchState( struct TA_EMA_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_EMA_StateFree( struct TA_EMA_State** _state );


TA_RetCode TA_EMA_StateSave( struct TA_EMA_State* _state,
                           FILE* _file );


TA_RetCode TA_EMA_StateLoad( struct TA_EMA_State** _state,
                           FILE* _file );



/*
 * TA_EXP - Vector Arithmetic Exp
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_EXP( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_EXP_Lookback( void );


struct TA_EXP_Data {
                   double       inReal;
                   };
struct TA_EXP_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_EXP_Data* memory;
                    };


TA_RetCode TA_EXP_StateInit( struct TA_EXP_State** _state );


TA_RetCode TA_EXP_State( struct TA_EXP_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_EXP_BatchState( struct TA_EXP_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_EXP_StateFree( struct TA_EXP_State** _state );


TA_RetCode TA_EXP_StateSave( struct TA_EXP_State* _state,
                           FILE* _file );


TA_RetCode TA_EXP_StateLoad( struct TA_EXP_State** _state,
                           FILE* _file );



/*
 * TA_FLOOR - Vector Floor
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_FLOOR( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_FLOOR_Lookback( void );


struct TA_FLOOR_Data {
                     double       inReal;
                     };
struct TA_FLOOR_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_FLOOR_Data* memory;
                      };


TA_RetCode TA_FLOOR_StateInit( struct TA_FLOOR_State** _state );


TA_RetCode TA_FLOOR_State( struct TA_FLOOR_State* _state,
                         const double inReal,
                         double        *outReal );

TA_RetCode TA_FLOOR_BatchState( struct TA_FLOOR_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inReal[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outReal[] );

TA_RetCode TA_FLOOR_StateFree( struct TA_FLOOR_State** _state );


TA_RetCode TA_FLOOR_StateSave( struct TA_FLOOR_State* _state,
                             FILE* _file );


TA_RetCode TA_FLOOR_StateLoad( struct TA_FLOOR_State** _state,
                             FILE* _file );



/*
 * TA_HT_DCPERIOD - Hilbert Transform - Dominant Cycle Period
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPERIOD( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inReal */,
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           double       *OUT_ARRAY /* outReal */ );

int TA_HT_DCPERIOD_Lookback( void );


struct TA_HT_DCPERIOD_Data {
                           double       inReal;
                           };
struct TA_HT_DCPERIOD_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_HT_DCPERIOD_Data* memory;
                            void*        detrender;
                            void*        Q1;
                            void*        jI;
                            void*        jQ;
                            int          hilbertIdx;
                            double       periodWMASub;
                            double       periodWMASum;
                            double       period;
                            double       I1ForOddPrev2;
                            double       I1ForEvenPrev2;
                            double       I1ForOddPrev3;
                            double       I1ForEvenPrev3;
                            double       prevI2;
                            double       prevQ2;
                            double       smoothPeriod;
                            double       Im;
                            double       Re;
                            double       trailingWMAValue;
                            double       rad2Deg;
                            double       a;
                            double       b;
                            };


TA_RetCode TA_HT_DCPERIOD_StateInit( struct TA_HT_DCPERIOD_State** _state );


TA_RetCode TA_HT_DCPERIOD_State( struct TA_HT_DCPERIOD_State* _state,
                               const double inReal,
                               double        *outReal );

TA_RetCode TA_HT_DCPERIOD_BatchState( struct TA_HT_DCPERIOD_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inReal[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    double        outReal[] );

TA_RetCode TA_HT_DCPERIOD_StateFree( struct TA_HT_DCPERIOD_State** _state );


TA_RetCode TA_HT_DCPERIOD_StateSave( struct TA_HT_DCPERIOD_State* _state,
                                   FILE* _file );


TA_RetCode TA_HT_DCPERIOD_StateLoad( struct TA_HT_DCPERIOD_State** _state,
                                   FILE* _file );



/*
 * TA_HT_DCPHASE - Hilbert Transform - Dominant Cycle Phase
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_DCPHASE( int           START_IDX,
                          int           END_IDX,
                          const double *IN_ARRAY /* inReal */,
                          int          *BEG_IDX,
                          int          *OUT_SIZE,
                          double       *OUT_ARRAY /* outReal */ );

int TA_HT_DCPHASE_Lookback( void );


struct TA_HT_DCPHASE_Data {
                          double       inReal;
                          };
struct TA_HT_DCPHASE_State {
                           size_t mem_size;
                           size_t mem_index;
                           struct TA_HT_DCPHASE_Data* memory;
                           void*        detrender;
                           void*        Q1;
                           void*        jI;
                           void*        jQ;
                           int          hilbertIdx;
                           double       periodWMASub;
                           double       periodWMASum;
                           double       period;
                           double       I1ForOddPrev2;
                           double       I1ForEvenPrev2;
                           double       I1ForOddPrev3;
                           double       I1ForEvenPrev3;
                           double       prevI2;
                           double       prevQ2;
                           double       smoothPeriod;
                           void*        circBuf;
                           double       DCPhase;
                           double       Im;
                           double       Re;
                           double       trailingWMAValue;
                           double       rad2Deg;
                           double       a;
                           double       b;
                           double       constDeg2RadBy360;
                           };


TA_RetCode TA_HT_DCPHASE_StateInit( struct TA_HT_DCPHASE_State** _state );


TA_RetCode TA_HT_DCPHASE_State( struct TA_HT_DCPHASE_State* _state,
                              const double inReal,
                              double        *outReal );

TA_RetCode TA_HT_DCPHASE_BatchState( struct TA_HT_DCPHASE_State* _state,
                                   int startIdx,
                                   int endIdx,
                                   const double inReal[],
                                   int          *outBegIdx,
                                   int          *outNBElement,
                                   double        outReal[] );

TA_RetCode TA_HT_DCPHASE_StateFree( struct TA_HT_DCPHASE_State** _state );


TA_RetCode TA_HT_DCPHASE_StateSave( struct TA_HT_DCPHASE_State* _state,
                                  FILE* _file );


TA_RetCode TA_HT_DCPHASE_StateLoad( struct TA_HT_DCPHASE_State** _state,
                                  FILE* _file );



/*
 * TA_HT_PHASOR - Hilbert Transform - Phasor Components
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_PHASOR( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inReal */,
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         double       *OUT_ARRAY /* outInPhase */,
                         double       *OUT_ARRAY /* outQuadrature */ );

int TA_HT_PHASOR_Lookback( void );


struct TA_HT_PHASOR_Data {
                         double       inReal;
                         };
struct TA_HT_PHASOR_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_HT_PHASOR_Data* memory;
                          void*        detrender;
                          void*        Q1;
                          void*        jI;
                          void*        jQ;
                          int          hilbertIdx;
                          double       periodWMASub;
                          double       periodWMASum;
                          double       period;
                          double       I1ForOddPrev2;
                          double       I1ForEvenPrev2;
                          double       I1ForOddPrev3;
                          double       I1ForEvenPrev3;
                          double       prevI2;
                          double       prevQ2;
                          double       Im;
                          double       Re;
                          double       trailingWMAValue;
                          double       rad2Deg;
                          double       a;
                          double       b;
                          };


TA_RetCode TA_HT_PHASOR_StateInit( struct TA_HT_PHASOR_State** _state );


TA_RetCode TA_HT_PHASOR_State( struct TA_HT_PHASOR_State* _state,
                             const double inReal,
                             double        *outInPhase,
                             double        *outQuadrature );

TA_RetCode TA_HT_PHASOR_BatchState( struct TA_HT_PHASOR_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inReal[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  double        outInPhase[],
                                  double        outQuadrature[] );

TA_RetCode TA_HT_PHASOR_StateFree( struct TA_HT_PHASOR_State** _state );


TA_RetCode TA_HT_PHASOR_StateSave( struct TA_HT_PHASOR_State* _state,
                                 FILE* _file );


TA_RetCode TA_HT_PHASOR_StateLoad( struct TA_HT_PHASOR_State** _state,
                                 FILE* _file );



/*
 * TA_HT_SINE - Hilbert Transform - SineWave
 * 
 * Input  = double
 * Output = double, double
 * 
 */
TA_RetCode TA_HT_SINE( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outSine */,
                       double       *OUT_ARRAY /* outLeadSine */ );

int TA_HT_SINE_Lookback( void );


struct TA_HT_SINE_Data {
                       double       inReal;
                       };
struct TA_HT_SINE_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_HT_SINE_Data* memory;
                        void*        detrender;
                        void*        Q1;
                        void*        jI;
                        void*        jQ;
                        int          hilbertIdx;
                        double       periodWMASub;
                        double       periodWMASum;
                        double       period;
                        double       I1ForOddPrev2;
                        double       I1ForEvenPrev2;
                        double       I1ForOddPrev3;
                        double       I1ForEvenPrev3;
                        double       prevI2;
                        double       prevQ2;
                        double       smoothPeriod;
                        void*        circBuf;
                        double       DCPhase;
                        double       Im;
                        double       Re;
                        double       trailingWMAValue;
                        double       rad2Deg;
                        double       a;
                        double       b;
                        double       constDeg2RadBy360;
                        double       deg2Rad;
                        };


TA_RetCode TA_HT_SINE_StateInit( struct TA_HT_SINE_State** _state );


TA_RetCode TA_HT_SINE_State( struct TA_HT_SINE_State* _state,
                           const double inReal,
                           double        *outSine,
                           double        *outLeadSine );

TA_RetCode TA_HT_SINE_BatchState( struct TA_HT_SINE_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inReal[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outSine[],
                                double        outLeadSine[] );

TA_RetCode TA_HT_SINE_StateFree( struct TA_HT_SINE_State** _state );


TA_RetCode TA_HT_SINE_StateSave( struct TA_HT_SINE_State* _state,
                               FILE* _file );


TA_RetCode TA_HT_SINE_StateLoad( struct TA_HT_SINE_State** _state,
                               FILE* _file );



/*
 * TA_HT_TRENDLINE - Hilbert Transform - Instantaneous Trendline
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_HT_TRENDLINE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inReal */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            double       *OUT_ARRAY /* outReal */ );

int TA_HT_TRENDLINE_Lookback( void );


struct TA_HT_TRENDLINE_Data {
                            double       inReal;
                            };
struct TA_HT_TRENDLINE_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_HT_TRENDLINE_Data* memory;
                             void*        detrender;
                             void*        Q1;
                             void*        jI;
                             void*        jQ;
                             int          hilbertIdx;
                             double       periodWMASub;
                             double       periodWMASum;
                             double       period;
                             double       I1ForOddPrev2;
                             double       I1ForEvenPrev2;
                             double       I1ForOddPrev3;
                             double       I1ForEvenPrev3;
                             double       prevI2;
                             double       prevQ2;
                             double       smoothPeriod;
                             void*        circBuf;
                             double       Im;
                             double       Re;
                             double       trailingWMAValue;
                             double       rad2Deg;
                             double       a;
                             double       b;
                             double       iTrend1;
                             double       iTrend2;
                             double       iTrend3;
                             };


TA_RetCode TA_HT_TRENDLINE_StateInit( struct TA_HT_TRENDLINE_State** _state );


TA_RetCode TA_HT_TRENDLINE_State( struct TA_HT_TRENDLINE_State* _state,
                                const double inReal,
                                double        *outReal );

TA_RetCode TA_HT_TRENDLINE_BatchState( struct TA_HT_TRENDLINE_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inReal[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     double        outReal[] );

TA_RetCode TA_HT_TRENDLINE_StateFree( struct TA_HT_TRENDLINE_State** _state );


TA_RetCode TA_HT_TRENDLINE_StateSave( struct TA_HT_TRENDLINE_State* _state,
                                    FILE* _file );


TA_RetCode TA_HT_TRENDLINE_StateLoad( struct TA_HT_TRENDLINE_State** _state,
                                    FILE* _file );



/*
 * TA_HT_TRENDMODE - Hilbert Transform - Trend vs Cycle Mode
 * 
 * Input  = double
 * Output = int
 * 
 */
TA_RetCode TA_HT_TRENDMODE( int           START_IDX,
                            int           END_IDX,
                            const double *IN_ARRAY /* inReal */,
                            int          *BEG_IDX,
                            int          *OUT_SIZE,
                            int          *OUT_ARRAY /* outInteger */ );

int TA_HT_TRENDMODE_Lookback( void );


struct TA_HT_TRENDMODE_Data {
                            double       inReal;
                            };
struct TA_HT_TRENDMODE_State {
                             size_t mem_size;
                             size_t mem_index;
                             struct TA_HT_TRENDMODE_Data* memory;
                             void*        detrender;
                             void*        Q1;
                             void*        jI;
                             void*        jQ;
                             int          hilbertIdx;
                             double       periodWMASub;
                             double       periodWMASum;
                             double       period;
                             double       I1ForOddPrev2;
                             double       I1ForEvenPrev2;
                             double       I1ForOddPrev3;
                             double       I1ForEvenPrev3;
                             double       prevI2;
                             double       prevQ2;
                             double       smoothPeriod;
                             void*        circBuf;
                             double       DCPhase;
                             double       Im;
                             double       Re;
                             double       trailingWMAValue;
                             double       rad2Deg;
                             double       a;
                             double       b;
                             double       constDeg2RadBy360;
                             double       deg2Rad;
                             double       iTrend1;
                             double       iTrend2;
                             double       iTrend3;
                             int          daysInTrend;
                             double       prevDCPhase;
                             double       prevSine;
                             double       prevLeadSine;
                             };


TA_RetCode TA_HT_TRENDMODE_StateInit( struct TA_HT_TRENDMODE_State** _state );


TA_RetCode TA_HT_TRENDMODE_State( struct TA_HT_TRENDMODE_State* _state,
                                const double inReal,
                                int           *outInteger );

TA_RetCode TA_HT_TRENDMODE_BatchState( struct TA_HT_TRENDMODE_State* _state,
                                     int startIdx,
                                     int endIdx,
                                     const double inReal[],
                                     int          *outBegIdx,
                                     int          *outNBElement,
                                     int           outInteger[] );

TA_RetCode TA_HT_TRENDMODE_StateFree( struct TA_HT_TRENDMODE_State** _state );


TA_RetCode TA_HT_TRENDMODE_StateSave( struct TA_HT_TRENDMODE_State* _state,
                                    FILE* _file );


TA_RetCode TA_HT_TRENDMODE_StateLoad( struct TA_HT_TRENDMODE_State** _state,
                                    FILE* _file );



/*
 * TA_IMI - Intraday Momentum Index
 * 
 * Input  = Open, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_IMI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inOpen */,
                   const double *IN_ARRAY /* inClose */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_IMI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_IMI_Data {
                   double       inOpen;
                   double       inClose;
                   };
struct TA_IMI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_IMI_Data* memory;
                    double       upsum;
                    double       downsum;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_IMI_StateInit( struct TA_IMI_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_IMI_State( struct TA_IMI_State* _state,
                       const double inOpen,
                       const double inClose,
                       double        *outReal );

TA_RetCode TA_IMI_BatchState( struct TA_IMI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inOpen[],
                            const double inClose[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_IMI_StateFree( struct TA_IMI_State** _state );


TA_RetCode TA_IMI_StateSave( struct TA_IMI_State* _state,
                           FILE* _file );


TA_RetCode TA_IMI_StateLoad( struct TA_IMI_State** _state,
                           FILE* _file );



/*
 * TA_KAMA - Kaufman Adaptive Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_KAMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_KAMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_KAMA_Data {
                    double       inReal;
                    };
struct TA_KAMA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_KAMA_Data* memory;
                     double       sumROC1;
                     double       yestReal;
                     double       prevKAMA;
                     double       trailingValue;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_KAMA_StateInit( struct TA_KAMA_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_KAMA_State( struct TA_KAMA_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_KAMA_BatchState( struct TA_KAMA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_KAMA_StateFree( struct TA_KAMA_State** _state );


TA_RetCode TA_KAMA_StateSave( struct TA_KAMA_State* _state,
                            FILE* _file );


TA_RetCode TA_KAMA_StateLoad( struct TA_KAMA_State** _state,
                            FILE* _file );



/*
 * TA_LINEARREG - Linear Regression
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG( int           START_IDX,
                         int           END_IDX,
                         const double *IN_ARRAY /* inReal */,
                         int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                         int          *BEG_IDX,
                         int          *OUT_SIZE,
                         double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_Data {
                         double       inReal;
                         };
struct TA_LINEARREG_State {
                          size_t mem_size;
                          size_t mem_index;
                          struct TA_LINEARREG_Data* memory;
                          double       SumX;
                          double       SumXY;
                          double       SumY;
                          double       SumXSqr;
                          double       Divisor;
                          int           optInTimePeriod; /* From 2 to 100000 */
                          };


TA_RetCode TA_LINEARREG_StateInit( struct TA_LINEARREG_State** _state,
                                 int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_LINEARREG_State( struct TA_LINEARREG_State* _state,
                             const double inReal,
                             double        *outReal );

TA_RetCode TA_LINEARREG_BatchState( struct TA_LINEARREG_State* _state,
                                  int startIdx,
                                  int endIdx,
                                  const double inReal[],
                                  int          *outBegIdx,
                                  int          *outNBElement,
                                  double        outReal[] );

TA_RetCode TA_LINEARREG_StateFree( struct TA_LINEARREG_State** _state );


TA_RetCode TA_LINEARREG_StateSave( struct TA_LINEARREG_State* _state,
                                 FILE* _file );


TA_RetCode TA_LINEARREG_StateLoad( struct TA_LINEARREG_State** _state,
                                 FILE* _file );



/*
 * TA_LINEARREG_ANGLE - Linear Regression Angle
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_ANGLE( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inReal */,
                               int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_ANGLE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_ANGLE_Data {
                               double       inReal;
                               };
struct TA_LINEARREG_ANGLE_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_LINEARREG_ANGLE_Data* memory;
                                double       SumX;
                                double       SumXY;
                                double       SumY;
                                double       SumXSqr;
                                double       Divisor;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_RetCode TA_LINEARREG_ANGLE_StateInit( struct TA_LINEARREG_ANGLE_State** _state,
                                       int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_LINEARREG_ANGLE_State( struct TA_LINEARREG_ANGLE_State* _state,
                                   const double inReal,
                                   double        *outReal );

TA_RetCode TA_LINEARREG_ANGLE_BatchState( struct TA_LINEARREG_ANGLE_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inReal[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_RetCode TA_LINEARREG_ANGLE_StateFree( struct TA_LINEARREG_ANGLE_State** _state );


TA_RetCode TA_LINEARREG_ANGLE_StateSave( struct TA_LINEARREG_ANGLE_State* _state,
                                       FILE* _file );


TA_RetCode TA_LINEARREG_ANGLE_StateLoad( struct TA_LINEARREG_ANGLE_State** _state,
                                       FILE* _file );



/*
 * TA_LINEARREG_INTERCEPT - Linear Regression Intercept
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_INTERCEPT( int           START_IDX,
                                   int           END_IDX,
                                   const double *IN_ARRAY /* inReal */,
                                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                                   int          *BEG_IDX,
                                   int          *OUT_SIZE,
                                   double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_INTERCEPT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_INTERCEPT_Data {
                                   double       inReal;
                                   };
struct TA_LINEARREG_INTERCEPT_State {
                                    size_t mem_size;
                                    size_t mem_index;
                                    struct TA_LINEARREG_INTERCEPT_Data* memory;
                                    double       SumX;
                                    double       SumXY;
                                    double       SumY;
                                    double       SumXSqr;
                                    double       Divisor;
                                    int           optInTimePeriod; /* From 2 to 100000 */
                                    };


TA_RetCode TA_LINEARREG_INTERCEPT_StateInit( struct TA_LINEARREG_INTERCEPT_State** _state,
                                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_LINEARREG_INTERCEPT_State( struct TA_LINEARREG_INTERCEPT_State* _state,
                                       const double inReal,
                                       double        *outReal );

TA_RetCode TA_LINEARREG_INTERCEPT_BatchState( struct TA_LINEARREG_INTERCEPT_State* _state,
                                            int startIdx,
                                            int endIdx,
                                            const double inReal[],
                                            int          *outBegIdx,
                                            int          *outNBElement,
                                            double        outReal[] );

TA_RetCode TA_LINEARREG_INTERCEPT_StateFree( struct TA_LINEARREG_INTERCEPT_State** _state );


TA_RetCode TA_LINEARREG_INTERCEPT_StateSave( struct TA_LINEARREG_INTERCEPT_State* _state,
                                           FILE* _file );


TA_RetCode TA_LINEARREG_INTERCEPT_StateLoad( struct TA_LINEARREG_INTERCEPT_State** _state,
                                           FILE* _file );



/*
 * TA_LINEARREG_SLOPE - Linear Regression Slope
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_LINEARREG_SLOPE( int           START_IDX,
                               int           END_IDX,
                               const double *IN_ARRAY /* inReal */,
                               int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                               int          *BEG_IDX,
                               int          *OUT_SIZE,
                               double       *OUT_ARRAY /* outReal */ );

int TA_LINEARREG_SLOPE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_LINEARREG_SLOPE_Data {
                               double       inReal;
                               };
struct TA_LINEARREG_SLOPE_State {
                                size_t mem_size;
                                size_t mem_index;
                                struct TA_LINEARREG_SLOPE_Data* memory;
                                double       SumX;
                                double       SumXY;
                                double       SumY;
                                double       SumXSqr;
                                double       Divisor;
                                int           optInTimePeriod; /* From 2 to 100000 */
                                };


TA_RetCode TA_LINEARREG_SLOPE_StateInit( struct TA_LINEARREG_SLOPE_State** _state,
                                       int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_LINEARREG_SLOPE_State( struct TA_LINEARREG_SLOPE_State* _state,
                                   const double inReal,
                                   double        *outReal );

TA_RetCode TA_LINEARREG_SLOPE_BatchState( struct TA_LINEARREG_SLOPE_State* _state,
                                        int startIdx,
                                        int endIdx,
                                        const double inReal[],
                                        int          *outBegIdx,
                                        int          *outNBElement,
                                        double        outReal[] );

TA_RetCode TA_LINEARREG_SLOPE_StateFree( struct TA_LINEARREG_SLOPE_State** _state );


TA_RetCode TA_LINEARREG_SLOPE_StateSave( struct TA_LINEARREG_SLOPE_State* _state,
                                       FILE* _file );


TA_RetCode TA_LINEARREG_SLOPE_StateLoad( struct TA_LINEARREG_SLOPE_State** _state,
                                       FILE* _file );



/*
 * TA_LN - Vector Log Natural
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_LN( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_LN_Lookback( void );


struct TA_LN_Data {
                  double       inReal;
                  };
struct TA_LN_State {
                   size_t mem_size;
                   size_t mem_index;
                   struct TA_LN_Data* memory;
                   };


TA_RetCode TA_LN_StateInit( struct TA_LN_State** _state );


TA_RetCode TA_LN_State( struct TA_LN_State* _state,
                      const double inReal,
                      double        *outReal );

TA_RetCode TA_LN_BatchState( struct TA_LN_State* _state,
                           int startIdx,
                           int endIdx,
                           const double inReal[],
                           int          *outBegIdx,
                           int          *outNBElement,
                           double        outReal[] );

TA_RetCode TA_LN_StateFree( struct TA_LN_State** _state );


TA_RetCode TA_LN_StateSave( struct TA_LN_State* _state,
                          FILE* _file );


TA_RetCode TA_LN_StateLoad( struct TA_LN_State** _state,
                          FILE* _file );



/*
 * TA_LOG10 - Vector Log10
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_LOG10( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_LOG10_Lookback( void );


struct TA_LOG10_Data {
                     double       inReal;
                     };
struct TA_LOG10_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_LOG10_Data* memory;
                      };


TA_RetCode TA_LOG10_StateInit( struct TA_LOG10_State** _state );


TA_RetCode TA_LOG10_State( struct TA_LOG10_State* _state,
                         const double inReal,
                         double        *outReal );

TA_RetCode TA_LOG10_BatchState( struct TA_LOG10_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inReal[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outReal[] );

TA_RetCode TA_LOG10_StateFree( struct TA_LOG10_State** _state );


TA_RetCode TA_LOG10_StateSave( struct TA_LOG10_State* _state,
                             FILE* _file );


TA_RetCode TA_LOG10_StateLoad( struct TA_LOG10_State** _state,
                             FILE* _file );



/*
 * TA_MA - Moving average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_MA( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                  TA_MAType     OPT_MATYPE /* optInMAType */,                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_MA_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                  TA_MAType     optInMAType ); 

struct TA_MA_Data {
                  double       inReal;
                  };
struct TA_MA_State {
                   size_t mem_size;
                   size_t mem_index;
                   struct TA_MA_Data* memory;
                   void*        ta_state;
                   int           optInTimePeriod; /* From 1 to 100000 */
                   TA_MAType     optInMAType;                   };


TA_RetCode TA_MA_StateInit( struct TA_MA_State** _state,
                          int           optInTimePeriod, /* From 1 to 100000 */
                          TA_MAType     optInMAType ); 

TA_RetCode TA_MA_State( struct TA_MA_State* _state,
                      const double inReal,
                      double        *outReal );

TA_RetCode TA_MA_BatchState( struct TA_MA_State* _state,
                           int startIdx,
                           int endIdx,
                           const double inReal[],
                           int          *outBegIdx,
                           int          *outNBElement,
                           double        outReal[] );

TA_RetCode TA_MA_StateFree( struct TA_MA_State** _state );


TA_RetCode TA_MA_StateSave( struct TA_MA_State* _state,
                          FILE* _file );


TA_RetCode TA_MA_StateLoad( struct TA_MA_State** _state,
                          FILE* _file );



/*
 * TA_MACD - Moving Average Convergence/Divergence
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACD( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outMACD */,
                    double       *OUT_ARRAY /* outMACDSignal */,
                    double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACD_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                    int           optInSlowPeriod, /* From 2 to 100000 */
                    int           optInSignalPeriod );  /* From 1 to 100000 */


struct TA_MACD_Data {
                    double       inReal;
                    };
struct TA_MACD_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_MACD_Data* memory;
                     void*        slowEMAState;
                     void*        fastEMAState;
                     void*        signalEMAState;
                     int          fastEMADelay;
                     int           optInFastPeriod; /* From 2 to 100000 */
                     int           optInSlowPeriod; /* From 2 to 100000 */
                     int           optInSignalPeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_MACD_StateInit( struct TA_MACD_State** _state,
                            int           optInFastPeriod, /* From 2 to 100000 */
                            int           optInSlowPeriod, /* From 2 to 100000 */
                            int           optInSignalPeriod );  /* From 1 to 100000 */


TA_RetCode TA_MACD_State( struct TA_MACD_State* _state,
                        const double inReal,
                        double        *outMACD,
                        double        *outMACDSignal,
                        double        *outMACDHist );

TA_RetCode TA_MACD_BatchState( struct TA_MACD_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outMACD[],
                             double        outMACDSignal[],
                             double        outMACDHist[] );

TA_RetCode TA_MACD_StateFree( struct TA_MACD_State** _state );


TA_RetCode TA_MACD_StateSave( struct TA_MACD_State* _state,
                            FILE* _file );


TA_RetCode TA_MACD_StateLoad( struct TA_MACD_State** _state,
                            FILE* _file );



/*
 * TA_MACDEXT - MACD with controllable MA type
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInFastMAType:
 *    Type of Moving Average for fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInSlowMAType:
 *    Type of Moving Average for slow MA
 * 
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * optInSignalMAType:
 *    Type of Moving Average for signal line
 * 
 * 
 */
TA_RetCode TA_MACDEXT( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInFastMAType */,                       int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInSlowMAType */,                       int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                       TA_MAType     OPT_MATYPE /* optInSignalMAType */,                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outMACD */,
                       double       *OUT_ARRAY /* outMACDSignal */,
                       double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACDEXT_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                       TA_MAType     optInFastMAType,                       int           optInSlowPeriod, /* From 2 to 100000 */
                       TA_MAType     optInSlowMAType,                       int           optInSignalPeriod, /* From 1 to 100000 */
                       TA_MAType     optInSignalMAType ); 

struct TA_MACDEXT_Data {
                       double       inReal;
                       };
struct TA_MACDEXT_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_MACDEXT_Data* memory;
                        void*        slowMAState;
                        void*        fastMAState;
                        void*        signalMAState;
                        int          fastMADelay;
                        int           optInFastPeriod; /* From 2 to 100000 */
                        TA_MAType     optInFastMAType;                        int           optInSlowPeriod; /* From 2 to 100000 */
                        TA_MAType     optInSlowMAType;                        int           optInSignalPeriod; /* From 1 to 100000 */
                        TA_MAType     optInSignalMAType;                        };


TA_RetCode TA_MACDEXT_StateInit( struct TA_MACDEXT_State** _state,
                               int           optInFastPeriod, /* From 2 to 100000 */
                               TA_MAType     optInFastMAType,                               int           optInSlowPeriod, /* From 2 to 100000 */
                               TA_MAType     optInSlowMAType,                               int           optInSignalPeriod, /* From 1 to 100000 */
                               TA_MAType     optInSignalMAType ); 

TA_RetCode TA_MACDEXT_State( struct TA_MACDEXT_State* _state,
                           const double inReal,
                           double        *outMACD,
                           double        *outMACDSignal,
                           double        *outMACDHist );

TA_RetCode TA_MACDEXT_BatchState( struct TA_MACDEXT_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inReal[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outMACD[],
                                double        outMACDSignal[],
                                double        outMACDHist[] );

TA_RetCode TA_MACDEXT_StateFree( struct TA_MACDEXT_State** _state );


TA_RetCode TA_MACDEXT_StateSave( struct TA_MACDEXT_State* _state,
                               FILE* _file );


TA_RetCode TA_MACDEXT_StateLoad( struct TA_MACDEXT_State** _state,
                               FILE* _file );



/*
 * TA_MACDFIX - Moving Average Convergence/Divergence Fix 12/26
 * 
 * Input  = double
 * Output = double, double, double
 * 
 * Optional Parameters
 * -------------------
 * optInSignalPeriod:(From 1 to 100000)
 *    Smoothing for the signal line (nb of period)
 * 
 * 
 */
TA_RetCode TA_MACDFIX( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInSignalPeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outMACD */,
                       double       *OUT_ARRAY /* outMACDSignal */,
                       double       *OUT_ARRAY /* outMACDHist */ );

int TA_MACDFIX_Lookback( int           optInSignalPeriod );  /* From 1 to 100000 */


struct TA_MACDFIX_Data {
                       double       inReal;
                       };
struct TA_MACDFIX_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_MACDFIX_Data* memory;
                        int           optInSignalPeriod; /* From 1 to 100000 */
                        };


TA_RetCode TA_MACDFIX_StateInit( struct TA_MACDFIX_State** _state,
                               int           optInSignalPeriod );  /* From 1 to 100000 */


TA_RetCode TA_MACDFIX_State( struct TA_MACDFIX_State* _state,
                           const double inReal,
                           double        *outMACD,
                           double        *outMACDSignal,
                           double        *outMACDHist );

TA_RetCode TA_MACDFIX_BatchState( struct TA_MACDFIX_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inReal[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outMACD[],
                                double        outMACDSignal[],
                                double        outMACDHist[] );

TA_RetCode TA_MACDFIX_StateFree( struct TA_MACDFIX_State** _state );


TA_RetCode TA_MACDFIX_StateSave( struct TA_MACDFIX_State* _state,
                               FILE* _file );


TA_RetCode TA_MACDFIX_StateLoad( struct TA_MACDFIX_State** _state,
                               FILE* _file );



/*
 * TA_MAMA - MESA Adaptive Moving Average
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastLimit:(From 0.01 to 0.99)
 *    Upper limit use in the adaptive algorithm
 * 
 * optInSlowLimit:(From 0.01 to 0.99)
 *    Lower limit use in the adaptive algorithm
 * 
 * 
 */
TA_RetCode TA_MAMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    double        OPT_REAL /* optInFastLimit */, /* From 0.01 to 0.99 */
                    double        OPT_REAL /* optInSlowLimit */, /* From 0.01 to 0.99 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outMAMA */,
                    double       *OUT_ARRAY /* outFAMA */ );

int TA_MAMA_Lookback( double        optInFastLimit, /* From 0.01 to 0.99 */
                    double        optInSlowLimit );  /* From 0.01 to 0.99 */


struct TA_MAMA_Data {
                    double       inReal;
                    };
struct TA_MAMA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_MAMA_Data* memory;
                     void*        detrender;
                     void*        Q1;
                     void*        jI;
                     void*        jQ;
                     int          hilbertIdx;
                     double       periodWMASub;
                     double       periodWMASum;
                     double       period;
                     double       I1ForOddPrev2;
                     double       I1ForEvenPrev2;
                     double       I1ForOddPrev3;
                     double       I1ForEvenPrev3;
                     double       prevI2;
                     double       prevQ2;
                     double       prevPhase;
                     double       mama;
                     double       fama;
                     double       Im;
                     double       Re;
                     double       trailingWMAValue;
                     double       rad2Deg;
                     double       a;
                     double       b;
                     double        optInFastLimit; /* From 0.01 to 0.99 */
                     double        optInSlowLimit; /* From 0.01 to 0.99 */
                     };


TA_RetCode TA_MAMA_StateInit( struct TA_MAMA_State** _state,
                            double        optInFastLimit, /* From 0.01 to 0.99 */
                            double        optInSlowLimit );  /* From 0.01 to 0.99 */


TA_RetCode TA_MAMA_State( struct TA_MAMA_State* _state,
                        const double inReal,
                        double        *outMAMA,
                        double        *outFAMA );

TA_RetCode TA_MAMA_BatchState( struct TA_MAMA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outMAMA[],
                             double        outFAMA[] );

TA_RetCode TA_MAMA_StateFree( struct TA_MAMA_State** _state );


TA_RetCode TA_MAMA_StateSave( struct TA_MAMA_State* _state,
                            FILE* _file );


TA_RetCode TA_MAMA_StateLoad( struct TA_MAMA_State** _state,
                            FILE* _file );



/*
 * TA_MAVP - Moving average with variable period
 * 
 * Input  = double, double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInMinPeriod:(From 2 to 100000)
 *    Value less than minimum will be changed to Minimum period
 * 
 * optInMaxPeriod:(From 2 to 100000)
 *    Value higher than maximum will be changed to Maximum period
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_MAVP( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    const double *IN_ARRAY /* inPeriods */,
                    int           OPT_INT /* optInMinPeriod */, /* From 2 to 100000 */
                    int           OPT_INT /* optInMaxPeriod */, /* From 2 to 100000 */
                    TA_MAType     OPT_MATYPE /* optInMAType */,                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_MAVP_Lookback( int           optInMinPeriod, /* From 2 to 100000 */
                    int           optInMaxPeriod, /* From 2 to 100000 */
                    TA_MAType     optInMAType ); 

struct TA_MAVP_Data {
                    double       inReal;
                    double       inPeriods;
                    };
struct TA_MAVP_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_MAVP_Data* memory;
                     void*        MAState;
                     int           optInMinPeriod; /* From 2 to 100000 */
                     int           optInMaxPeriod; /* From 2 to 100000 */
                     TA_MAType     optInMAType;                     };


TA_RetCode TA_MAVP_StateInit( struct TA_MAVP_State** _state,
                            int           optInMinPeriod, /* From 2 to 100000 */
                            int           optInMaxPeriod, /* From 2 to 100000 */
                            TA_MAType     optInMAType ); 

TA_RetCode TA_MAVP_State( struct TA_MAVP_State* _state,
                        const double inReal,
                        const double inPeriods,
                        double        *outReal );

TA_RetCode TA_MAVP_BatchState( struct TA_MAVP_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             const double inPeriods[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_MAVP_StateFree( struct TA_MAVP_State** _state );


TA_RetCode TA_MAVP_StateSave( struct TA_MAVP_State* _state,
                            FILE* _file );


TA_RetCode TA_MAVP_StateLoad( struct TA_MAVP_State** _state,
                            FILE* _file );



/*
 * TA_MAX - Highest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAX( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MAX_Data {
                   double       inReal;
                   };
struct TA_MAX_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_MAX_Data* memory;
                    double       max;
                    int          maxIdx;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_MAX_StateInit( struct TA_MAX_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MAX_State( struct TA_MAX_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_MAX_BatchState( struct TA_MAX_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_MAX_StateFree( struct TA_MAX_State** _state );


TA_RetCode TA_MAX_StateSave( struct TA_MAX_State* _state,
                           FILE* _file );


TA_RetCode TA_MAX_StateLoad( struct TA_MAX_State** _state,
                           FILE* _file );



/*
 * TA_MAXINDEX - Index of highest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MAXINDEX( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        int          *OUT_ARRAY /* outInteger */ );

int TA_MAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MAXINDEX_Data {
                        double       inReal;
                        };
struct TA_MAXINDEX_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MAXINDEX_Data* memory;
                         double       max;
                         int          maxIdx;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_MAXINDEX_StateInit( struct TA_MAXINDEX_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MAXINDEX_State( struct TA_MAXINDEX_State* _state,
                            const double inReal,
                            int           *outInteger );

TA_RetCode TA_MAXINDEX_BatchState( struct TA_MAXINDEX_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inReal[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 int           outInteger[] );

TA_RetCode TA_MAXINDEX_StateFree( struct TA_MAXINDEX_State** _state );


TA_RetCode TA_MAXINDEX_StateSave( struct TA_MAXINDEX_State* _state,
                                FILE* _file );


TA_RetCode TA_MAXINDEX_StateLoad( struct TA_MAXINDEX_State** _state,
                                FILE* _file );



/*
 * TA_MEDPRICE - Median Price
 * 
 * Input  = High, Low
 * Output = double
 * 
 */
TA_RetCode TA_MEDPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MEDPRICE_Lookback( void );


struct TA_MEDPRICE_Data {
                        double       inHigh;
                        double       inLow;
                        };
struct TA_MEDPRICE_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MEDPRICE_Data* memory;
                         };


TA_RetCode TA_MEDPRICE_StateInit( struct TA_MEDPRICE_State** _state );


TA_RetCode TA_MEDPRICE_State( struct TA_MEDPRICE_State* _state,
                            const double inHigh,
                            const double inLow,
                            double        *outReal );

TA_RetCode TA_MEDPRICE_BatchState( struct TA_MEDPRICE_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_MEDPRICE_StateFree( struct TA_MEDPRICE_State** _state );


TA_RetCode TA_MEDPRICE_StateSave( struct TA_MEDPRICE_State* _state,
                                FILE* _file );


TA_RetCode TA_MEDPRICE_StateLoad( struct TA_MEDPRICE_State** _state,
                                FILE* _file );



/*
 * TA_MFI - Money Flow Index
 * 
 * Input  = High, Low, Close, Volume
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MFI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MFI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MFI_Data {
                   double       inHigh;
                   double       inLow;
                   double       inClose;
                   double       inVolume;
                   };
struct TA_MFI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_MFI_Data* memory;
                    void*        mflow;
                    double       prevValue;
                    double       posSumMF;
                    double       negSumMF;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_MFI_StateInit( struct TA_MFI_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MFI_State( struct TA_MFI_State* _state,
                       const double inHigh,
                       const double inLow,
                       const double inClose,
                       const double inVolume,
                       double        *outReal );

TA_RetCode TA_MFI_BatchState( struct TA_MFI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inHigh[],
                            const double inLow[],
                            const double inClose[],
                            const double inVolume[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_MFI_StateFree( struct TA_MFI_State** _state );


TA_RetCode TA_MFI_StateSave( struct TA_MFI_State* _state,
                           FILE* _file );


TA_RetCode TA_MFI_StateLoad( struct TA_MFI_State** _state,
                           FILE* _file );



/*
 * TA_MIDPOINT - MidPoint over period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPOINT( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MIDPOINT_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIDPOINT_Data {
                        double       inReal;
                        };
struct TA_MIDPOINT_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MIDPOINT_Data* memory;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_MIDPOINT_StateInit( struct TA_MIDPOINT_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MIDPOINT_State( struct TA_MIDPOINT_State* _state,
                            const double inReal,
                            double        *outReal );

TA_RetCode TA_MIDPOINT_BatchState( struct TA_MIDPOINT_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inReal[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_MIDPOINT_StateFree( struct TA_MIDPOINT_State** _state );


TA_RetCode TA_MIDPOINT_StateSave( struct TA_MIDPOINT_State* _state,
                                FILE* _file );


TA_RetCode TA_MIDPOINT_StateLoad( struct TA_MIDPOINT_State** _state,
                                FILE* _file );



/*
 * TA_MIDPRICE - Midpoint Price over period
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIDPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MIDPRICE_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIDPRICE_Data {
                        double       inHigh;
                        double       inLow;
                        };
struct TA_MIDPRICE_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MIDPRICE_Data* memory;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_MIDPRICE_StateInit( struct TA_MIDPRICE_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MIDPRICE_State( struct TA_MIDPRICE_State* _state,
                            const double inHigh,
                            const double inLow,
                            double        *outReal );

TA_RetCode TA_MIDPRICE_BatchState( struct TA_MIDPRICE_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_MIDPRICE_StateFree( struct TA_MIDPRICE_State** _state );


TA_RetCode TA_MIDPRICE_StateSave( struct TA_MIDPRICE_State* _state,
                                FILE* _file );


TA_RetCode TA_MIDPRICE_StateLoad( struct TA_MIDPRICE_State** _state,
                                FILE* _file );



/*
 * TA_MIN - Lowest value over a specified period
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MIN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MIN_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MIN_Data {
                   double       inReal;
                   };
struct TA_MIN_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_MIN_Data* memory;
                    double       min;
                    int          minIdx;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_MIN_StateInit( struct TA_MIN_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MIN_State( struct TA_MIN_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_MIN_BatchState( struct TA_MIN_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_MIN_StateFree( struct TA_MIN_State** _state );


TA_RetCode TA_MIN_StateSave( struct TA_MIN_State* _state,
                           FILE* _file );


TA_RetCode TA_MIN_StateLoad( struct TA_MIN_State** _state,
                           FILE* _file );



/*
 * TA_MININDEX - Index of lowest value over a specified period
 * 
 * Input  = double
 * Output = int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MININDEX( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        int          *OUT_ARRAY /* outInteger */ );

int TA_MININDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MININDEX_Data {
                        double       inReal;
                        };
struct TA_MININDEX_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MININDEX_Data* memory;
                         double       min;
                         int          minIdx;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         };


TA_RetCode TA_MININDEX_StateInit( struct TA_MININDEX_State** _state,
                                int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MININDEX_State( struct TA_MININDEX_State* _state,
                            const double inReal,
                            int           *outInteger );

TA_RetCode TA_MININDEX_BatchState( struct TA_MININDEX_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inReal[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 int           outInteger[] );

TA_RetCode TA_MININDEX_StateFree( struct TA_MININDEX_State** _state );


TA_RetCode TA_MININDEX_StateSave( struct TA_MININDEX_State* _state,
                                FILE* _file );


TA_RetCode TA_MININDEX_StateLoad( struct TA_MININDEX_State** _state,
                                FILE* _file );



/*
 * TA_MINMAX - Lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINMAX( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outMin */,
                      double       *OUT_ARRAY /* outMax */ );

int TA_MINMAX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MINMAX_Data {
                      double       inReal;
                      };
struct TA_MINMAX_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_MINMAX_Data* memory;
                       double       min;
                       int          minIdx;
                       double       max;
                       int          maxIdx;
                       int           optInTimePeriod; /* From 2 to 100000 */
                       };


TA_RetCode TA_MINMAX_StateInit( struct TA_MINMAX_State** _state,
                              int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MINMAX_State( struct TA_MINMAX_State* _state,
                          const double inReal,
                          double        *outMin,
                          double        *outMax );

TA_RetCode TA_MINMAX_BatchState( struct TA_MINMAX_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inReal[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outMin[],
                               double        outMax[] );

TA_RetCode TA_MINMAX_StateFree( struct TA_MINMAX_State** _state );


TA_RetCode TA_MINMAX_StateSave( struct TA_MINMAX_State* _state,
                              FILE* _file );


TA_RetCode TA_MINMAX_StateLoad( struct TA_MINMAX_State** _state,
                              FILE* _file );



/*
 * TA_MINMAXINDEX - Indexes of lowest and highest values over a specified period
 * 
 * Input  = double
 * Output = int, int
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINMAXINDEX( int           START_IDX,
                           int           END_IDX,
                           const double *IN_ARRAY /* inReal */,
                           int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                           int          *BEG_IDX,
                           int          *OUT_SIZE,
                           int          *OUT_ARRAY /* outMinIdx */,
                           int          *OUT_ARRAY /* outMaxIdx */ );

int TA_MINMAXINDEX_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_MINMAXINDEX_Data {
                           double       inReal;
                           };
struct TA_MINMAXINDEX_State {
                            size_t mem_size;
                            size_t mem_index;
                            struct TA_MINMAXINDEX_Data* memory;
                            double       min;
                            double       max;
                            int          minIdx;
                            int          maxIdx;
                            int           optInTimePeriod; /* From 2 to 100000 */
                            };


TA_RetCode TA_MINMAXINDEX_StateInit( struct TA_MINMAXINDEX_State** _state,
                                   int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_MINMAXINDEX_State( struct TA_MINMAXINDEX_State* _state,
                               const double inReal,
                               int           *outMinIdx,
                               int           *outMaxIdx );

TA_RetCode TA_MINMAXINDEX_BatchState( struct TA_MINMAXINDEX_State* _state,
                                    int startIdx,
                                    int endIdx,
                                    const double inReal[],
                                    int          *outBegIdx,
                                    int          *outNBElement,
                                    int           outMinIdx[],
                                    int           outMaxIdx[] );

TA_RetCode TA_MINMAXINDEX_StateFree( struct TA_MINMAXINDEX_State** _state );


TA_RetCode TA_MINMAXINDEX_StateSave( struct TA_MINMAXINDEX_State* _state,
                                   FILE* _file );


TA_RetCode TA_MINMAXINDEX_StateLoad( struct TA_MINMAXINDEX_State** _state,
                                   FILE* _file );



/*
 * TA_MINUS_DI - Minus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DI( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MINUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MINUS_DI_Data {
                        double       inHigh;
                        double       inLow;
                        double       inClose;
                        };
struct TA_MINUS_DI_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MINUS_DI_Data* memory;
                         double       prevHigh;
                         double       prevLow;
                         double       prevClose;
                         double       prevTR;
                         double       prevMinusDM;
                         int           optInTimePeriod; /* From 1 to 100000 */
                         };


TA_RetCode TA_MINUS_DI_StateInit( struct TA_MINUS_DI_State** _state,
                                int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_MINUS_DI_State( struct TA_MINUS_DI_State* _state,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            double        *outReal );

TA_RetCode TA_MINUS_DI_BatchState( struct TA_MINUS_DI_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 const double inClose[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_MINUS_DI_StateFree( struct TA_MINUS_DI_State** _state );


TA_RetCode TA_MINUS_DI_StateSave( struct TA_MINUS_DI_State* _state,
                                FILE* _file );


TA_RetCode TA_MINUS_DI_StateLoad( struct TA_MINUS_DI_State** _state,
                                FILE* _file );



/*
 * TA_MINUS_DM - Minus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MINUS_DM( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_MINUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MINUS_DM_Data {
                        double       inHigh;
                        double       inLow;
                        };
struct TA_MINUS_DM_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_MINUS_DM_Data* memory;
                         double       prevHigh;
                         double       prevLow;
                         double       prevMinusDM;
                         int           optInTimePeriod; /* From 1 to 100000 */
                         };


TA_RetCode TA_MINUS_DM_StateInit( struct TA_MINUS_DM_State** _state,
                                int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_MINUS_DM_State( struct TA_MINUS_DM_State* _state,
                            const double inHigh,
                            const double inLow,
                            double        *outReal );

TA_RetCode TA_MINUS_DM_BatchState( struct TA_MINUS_DM_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_MINUS_DM_StateFree( struct TA_MINUS_DM_State** _state );


TA_RetCode TA_MINUS_DM_StateSave( struct TA_MINUS_DM_State* _state,
                                FILE* _file );


TA_RetCode TA_MINUS_DM_StateLoad( struct TA_MINUS_DM_State** _state,
                                FILE* _file );



/*
 * TA_MOM - Momentum
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_MOM( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_MOM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_MOM_Data {
                   double       inReal;
                   };
struct TA_MOM_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_MOM_Data* memory;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_MOM_StateInit( struct TA_MOM_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_MOM_State( struct TA_MOM_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_MOM_BatchState( struct TA_MOM_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_MOM_StateFree( struct TA_MOM_State** _state );


TA_RetCode TA_MOM_StateSave( struct TA_MOM_State* _state,
                           FILE* _file );


TA_RetCode TA_MOM_StateLoad( struct TA_MOM_State** _state,
                           FILE* _file );



/*
 * TA_MULT - Vector Arithmetic Mult
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_MULT( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal0 */,
                    const double *IN_ARRAY /* inReal1 */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_MULT_Lookback( void );


struct TA_MULT_Data {
                    double       inReal0;
                    double       inReal1;
                    };
struct TA_MULT_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_MULT_Data* memory;
                     };


TA_RetCode TA_MULT_StateInit( struct TA_MULT_State** _state );


TA_RetCode TA_MULT_State( struct TA_MULT_State* _state,
                        const double inReal0,
                        const double inReal1,
                        double        *outReal );

TA_RetCode TA_MULT_BatchState( struct TA_MULT_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal0[],
                             const double inReal1[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_MULT_StateFree( struct TA_MULT_State** _state );


TA_RetCode TA_MULT_StateSave( struct TA_MULT_State* _state,
                            FILE* _file );


TA_RetCode TA_MULT_StateLoad( struct TA_MULT_State** _state,
                            FILE* _file );



/*
 * TA_NATR - Normalized Average True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_NATR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inHigh */,
                    const double *IN_ARRAY /* inLow */,
                    const double *IN_ARRAY /* inClose */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_NATR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_NATR_Data {
                    double       inHigh;
                    double       inLow;
                    double       inClose;
                    };
struct TA_NATR_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_NATR_Data* memory;
                     void*        StateTRANGE;
                     void*        StateSMA;
                     double       prevATR;
                     int          firstATR;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_NATR_StateInit( struct TA_NATR_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_NATR_State( struct TA_NATR_State* _state,
                        const double inHigh,
                        const double inLow,
                        const double inClose,
                        double        *outReal );

TA_RetCode TA_NATR_BatchState( struct TA_NATR_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inHigh[],
                             const double inLow[],
                             const double inClose[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_NATR_StateFree( struct TA_NATR_State** _state );


TA_RetCode TA_NATR_StateSave( struct TA_NATR_State* _state,
                            FILE* _file );


TA_RetCode TA_NATR_StateLoad( struct TA_NATR_State** _state,
                            FILE* _file );



/*
 * TA_NVI - Negative Volume Index
 * 
 * Input  = Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_NVI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_NVI_Lookback( void );


struct TA_NVI_Data {
                   double       inClose;
                   double       inVolume;
                   };
struct TA_NVI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_NVI_Data* memory;
                    double       prevNVI;
                    };


TA_RetCode TA_NVI_StateInit( struct TA_NVI_State** _state );


TA_RetCode TA_NVI_State( struct TA_NVI_State* _state,
                       const double inClose,
                       const double inVolume,
                       double        *outReal );

TA_RetCode TA_NVI_BatchState( struct TA_NVI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inClose[],
                            const double inVolume[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_NVI_StateFree( struct TA_NVI_State** _state );


TA_RetCode TA_NVI_StateSave( struct TA_NVI_State* _state,
                           FILE* _file );


TA_RetCode TA_NVI_StateLoad( struct TA_NVI_State** _state,
                           FILE* _file );



/*
 * TA_OBV - On Balance Volume
 * 
 * Input  = Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_OBV( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_OBV_Lookback( void );


struct TA_OBV_Data {
                   double       inClose;
                   double       inVolume;
                   };
struct TA_OBV_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_OBV_Data* memory;
                    double       prevOBV;
                    double       prevReal;
                    };


TA_RetCode TA_OBV_StateInit( struct TA_OBV_State** _state );


TA_RetCode TA_OBV_State( struct TA_OBV_State* _state,
                       const double inClose,
                       const double inVolume,
                       double        *outReal );

TA_RetCode TA_OBV_BatchState( struct TA_OBV_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inClose[],
                            const double inVolume[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_OBV_StateFree( struct TA_OBV_State** _state );


TA_RetCode TA_OBV_StateSave( struct TA_OBV_State* _state,
                           FILE* _file );


TA_RetCode TA_OBV_StateLoad( struct TA_OBV_State** _state,
                           FILE* _file );



/*
 * TA_PLUS_DI - Plus Directional Indicator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DI( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       const double *IN_ARRAY /* inClose */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_PLUS_DI_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_PLUS_DI_Data {
                       double       inHigh;
                       double       inLow;
                       double       inClose;
                       };
struct TA_PLUS_DI_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_PLUS_DI_Data* memory;
                        double       prevHigh;
                        double       prevLow;
                        double       prevClose;
                        double       prevTR;
                        double       prevPlusDM;
                        int           optInTimePeriod; /* From 1 to 100000 */
                        };


TA_RetCode TA_PLUS_DI_StateInit( struct TA_PLUS_DI_State** _state,
                               int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_PLUS_DI_State( struct TA_PLUS_DI_State* _state,
                           const double inHigh,
                           const double inLow,
                           const double inClose,
                           double        *outReal );

TA_RetCode TA_PLUS_DI_BatchState( struct TA_PLUS_DI_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inHigh[],
                                const double inLow[],
                                const double inClose[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outReal[] );

TA_RetCode TA_PLUS_DI_StateFree( struct TA_PLUS_DI_State** _state );


TA_RetCode TA_PLUS_DI_StateSave( struct TA_PLUS_DI_State* _state,
                               FILE* _file );


TA_RetCode TA_PLUS_DI_StateLoad( struct TA_PLUS_DI_State** _state,
                               FILE* _file );



/*
 * TA_PLUS_DM - Plus Directional Movement
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_PLUS_DM( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inHigh */,
                       const double *IN_ARRAY /* inLow */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_PLUS_DM_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_PLUS_DM_Data {
                       double       inHigh;
                       double       inLow;
                       };
struct TA_PLUS_DM_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_PLUS_DM_Data* memory;
                        double       prevHigh;
                        double       prevLow;
                        double       prevPlusDM;
                        int           optInTimePeriod; /* From 1 to 100000 */
                        };


TA_RetCode TA_PLUS_DM_StateInit( struct TA_PLUS_DM_State** _state,
                               int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_PLUS_DM_State( struct TA_PLUS_DM_State* _state,
                           const double inHigh,
                           const double inLow,
                           double        *outReal );

TA_RetCode TA_PLUS_DM_BatchState( struct TA_PLUS_DM_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inHigh[],
                                const double inLow[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outReal[] );

TA_RetCode TA_PLUS_DM_StateFree( struct TA_PLUS_DM_State** _state );


TA_RetCode TA_PLUS_DM_StateSave( struct TA_PLUS_DM_State* _state,
                               FILE* _file );


TA_RetCode TA_PLUS_DM_StateLoad( struct TA_PLUS_DM_State** _state,
                               FILE* _file );



/*
 * TA_PPO - Percentage Price Oscillator
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInFastPeriod:(From 2 to 100000)
 *    Number of period for the fast MA
 * 
 * optInSlowPeriod:(From 2 to 100000)
 *    Number of period for the slow MA
 * 
 * optInMAType:
 *    Type of Moving Average
 * 
 * 
 */
TA_RetCode TA_PPO( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInFastPeriod */, /* From 2 to 100000 */
                   int           OPT_INT /* optInSlowPeriod */, /* From 2 to 100000 */
                   TA_MAType     OPT_MATYPE /* optInMAType */,                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_PPO_Lookback( int           optInFastPeriod, /* From 2 to 100000 */
                   int           optInSlowPeriod, /* From 2 to 100000 */
                   TA_MAType     optInMAType ); 

struct TA_PPO_Data {
                   double       inReal;
                   };
struct TA_PPO_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_PPO_Data* memory;
                    int           optInFastPeriod; /* From 2 to 100000 */
                    int           optInSlowPeriod; /* From 2 to 100000 */
                    TA_MAType     optInMAType;                    };


TA_RetCode TA_PPO_StateInit( struct TA_PPO_State** _state,
                           int           optInFastPeriod, /* From 2 to 100000 */
                           int           optInSlowPeriod, /* From 2 to 100000 */
                           TA_MAType     optInMAType ); 

TA_RetCode TA_PPO_State( struct TA_PPO_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_PPO_BatchState( struct TA_PPO_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_PPO_StateFree( struct TA_PPO_State** _state );


TA_RetCode TA_PPO_StateSave( struct TA_PPO_State* _state,
                           FILE* _file );


TA_RetCode TA_PPO_StateLoad( struct TA_PPO_State** _state,
                           FILE* _file );



/*
 * TA_PVI - Positive Volume Index
 * 
 * Input  = Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_PVI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_PVI_Lookback( void );


struct TA_PVI_Data {
                   double       inClose;
                   double       inVolume;
                   };
struct TA_PVI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_PVI_Data* memory;
                    double       prevPVI;
                    };


TA_RetCode TA_PVI_StateInit( struct TA_PVI_State** _state );


TA_RetCode TA_PVI_State( struct TA_PVI_State* _state,
                       const double inClose,
                       const double inVolume,
                       double        *outReal );

TA_RetCode TA_PVI_BatchState( struct TA_PVI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inClose[],
                            const double inVolume[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_PVI_StateFree( struct TA_PVI_State** _state );


TA_RetCode TA_PVI_StateSave( struct TA_PVI_State* _state,
                           FILE* _file );


TA_RetCode TA_PVI_StateLoad( struct TA_PVI_State** _state,
                           FILE* _file );



/*
 * TA_PVT - Price Volume Trend
 * 
 * Input  = Close, Volume
 * Output = double
 * 
 */
TA_RetCode TA_PVT( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inClose */,
                   const double *IN_ARRAY /* inVolume */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_PVT_Lookback( void );


struct TA_PVT_Data {
                   double       inClose;
                   double       inVolume;
                   };
struct TA_PVT_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_PVT_Data* memory;
                    double       prevPVT;
                    };


TA_RetCode TA_PVT_StateInit( struct TA_PVT_State** _state );


TA_RetCode TA_PVT_State( struct TA_PVT_State* _state,
                       const double inClose,
                       const double inVolume,
                       double        *outReal );

TA_RetCode TA_PVT_BatchState( struct TA_PVT_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inClose[],
                            const double inVolume[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_PVT_StateFree( struct TA_PVT_State** _state );


TA_RetCode TA_PVT_StateSave( struct TA_PVT_State* _state,
                           FILE* _file );


TA_RetCode TA_PVT_StateLoad( struct TA_PVT_State** _state,
                           FILE* _file );



/*
 * TA_ROC - Rate of change : ((price/prevPrice)-1)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROC( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_ROC_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROC_Data {
                   double       inReal;
                   };
struct TA_ROC_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_ROC_Data* memory;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_ROC_StateInit( struct TA_ROC_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_ROC_State( struct TA_ROC_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_ROC_BatchState( struct TA_ROC_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_ROC_StateFree( struct TA_ROC_State** _state );


TA_RetCode TA_ROC_StateSave( struct TA_ROC_State* _state,
                           FILE* _file );


TA_RetCode TA_ROC_StateLoad( struct TA_ROC_State** _state,
                           FILE* _file );



/*
 * TA_ROCP - Rate of change Percentage: (price-prevPrice)/prevPrice
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCP( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ROCP_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCP_Data {
                    double       inReal;
                    };
struct TA_ROCP_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ROCP_Data* memory;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_ROCP_StateInit( struct TA_ROCP_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_ROCP_State( struct TA_ROCP_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_ROCP_BatchState( struct TA_ROCP_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ROCP_StateFree( struct TA_ROCP_State** _state );


TA_RetCode TA_ROCP_StateSave( struct TA_ROCP_State* _state,
                            FILE* _file );


TA_RetCode TA_ROCP_StateLoad( struct TA_ROCP_State** _state,
                            FILE* _file );



/*
 * TA_ROCR - Rate of change ratio: (price/prevPrice)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_ROCR_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCR_Data {
                    double       inReal;
                    };
struct TA_ROCR_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_ROCR_Data* memory;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_ROCR_StateInit( struct TA_ROCR_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_ROCR_State( struct TA_ROCR_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_ROCR_BatchState( struct TA_ROCR_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_ROCR_StateFree( struct TA_ROCR_State** _state );


TA_RetCode TA_ROCR_StateSave( struct TA_ROCR_State* _state,
                            FILE* _file );


TA_RetCode TA_ROCR_StateLoad( struct TA_ROCR_State** _state,
                            FILE* _file );



/*
 * TA_ROCR100 - Rate of change ratio 100 scale: (price/prevPrice)*100
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_ROCR100( int           START_IDX,
                       int           END_IDX,
                       const double *IN_ARRAY /* inReal */,
                       int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                       int          *BEG_IDX,
                       int          *OUT_SIZE,
                       double       *OUT_ARRAY /* outReal */ );

int TA_ROCR100_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_ROCR100_Data {
                       double       inReal;
                       };
struct TA_ROCR100_State {
                        size_t mem_size;
                        size_t mem_index;
                        struct TA_ROCR100_Data* memory;
                        int           optInTimePeriod; /* From 1 to 100000 */
                        };


TA_RetCode TA_ROCR100_StateInit( struct TA_ROCR100_State** _state,
                               int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_ROCR100_State( struct TA_ROCR100_State* _state,
                           const double inReal,
                           double        *outReal );

TA_RetCode TA_ROCR100_BatchState( struct TA_ROCR100_State* _state,
                                int startIdx,
                                int endIdx,
                                const double inReal[],
                                int          *outBegIdx,
                                int          *outNBElement,
                                double        outReal[] );

TA_RetCode TA_ROCR100_StateFree( struct TA_ROCR100_State** _state );


TA_RetCode TA_ROCR100_StateSave( struct TA_ROCR100_State* _state,
                               FILE* _file );


TA_RetCode TA_ROCR100_StateLoad( struct TA_ROCR100_State** _state,
                               FILE* _file );



/*
 * TA_RSI - Relative Strength Index
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_RSI( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_RSI_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_RSI_Data {
                   double       inReal;
                   };
struct TA_RSI_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_RSI_Data* memory;
                    int          MetastockMode;
                    double       prevGain;
                    double       prevLoss;
                    double       prevValue;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_RSI_StateInit( struct TA_RSI_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_RSI_State( struct TA_RSI_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_RSI_BatchState( struct TA_RSI_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_RSI_StateFree( struct TA_RSI_State** _state );


TA_RetCode TA_RSI_StateSave( struct TA_RSI_State* _state,
                           FILE* _file );


TA_RetCode TA_RSI_StateLoad( struct TA_RSI_State** _state,
                           FILE* _file );



/*
 * TA_SAR - Parabolic SAR
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInAcceleration:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor used up to the Maximum value
 * 
 * optInMaximum:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor Maximum value
 * 
 * 
 */
TA_RetCode TA_SAR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inHigh */,
                   const double *IN_ARRAY /* inLow */,
                   double        OPT_REAL /* optInAcceleration */, /* From 0 to TA_REAL_MAX */
                   double        OPT_REAL /* optInMaximum */, /* From 0 to TA_REAL_MAX */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SAR_Lookback( double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                   double        optInMaximum );  /* From 0 to TA_REAL_MAX */


struct TA_SAR_Data {
                   double       inHigh;
                   double       inLow;
                   };
struct TA_SAR_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_SAR_Data* memory;
                    double       newHigh;
                    double       newLow;
                    double       prevHigh;
                    double       prevLow;
                    int          isLong;
                    void*        stateMINUS_DM;
                    double       sar;
                    double       ep;
                    double       af;
                    double        optInAcceleration; /* From 0 to TA_REAL_MAX */
                    double        optInMaximum; /* From 0 to TA_REAL_MAX */
                    };


TA_RetCode TA_SAR_StateInit( struct TA_SAR_State** _state,
                           double        optInAcceleration, /* From 0 to TA_REAL_MAX */
                           double        optInMaximum );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_SAR_State( struct TA_SAR_State* _state,
                       const double inHigh,
                       const double inLow,
                       double        *outReal );

TA_RetCode TA_SAR_BatchState( struct TA_SAR_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inHigh[],
                            const double inLow[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_SAR_StateFree( struct TA_SAR_State** _state );


TA_RetCode TA_SAR_StateSave( struct TA_SAR_State* _state,
                           FILE* _file );


TA_RetCode TA_SAR_StateLoad( struct TA_SAR_State** _state,
                           FILE* _file );



/*
 * TA_SAREXT - Parabolic SAR - Extended
 * 
 * Input  = High, Low
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInStartValue:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Start value and direction. 0 for Auto, >0 for Long, <0 for Short
 * 
 * optInOffsetOnReverse:(From 0 to TA_REAL_MAX)
 *    Percent offset added/removed to initial stop on short/long reversal
 * 
 * optInAccelerationInitLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Long direction
 * 
 * optInAccelerationLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Long direction
 * 
 * optInAccelerationMaxLong:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Long direction
 * 
 * optInAccelerationInitShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor initial value for the Short direction
 * 
 * optInAccelerationShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor for the Short direction
 * 
 * optInAccelerationMaxShort:(From 0 to TA_REAL_MAX)
 *    Acceleration Factor maximum value for the Short direction
 * 
 * 
 */
TA_RetCode TA_SAREXT( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      double        OPT_REAL /* optInStartValue */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        OPT_REAL /* optInOffsetOnReverse */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationInitLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationMaxLong */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationInitShort */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationShort */, /* From 0 to TA_REAL_MAX */
                      double        OPT_REAL /* optInAccelerationMaxShort */, /* From 0 to TA_REAL_MAX */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_SAREXT_Lookback( double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                      double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                      double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


struct TA_SAREXT_Data {
                      double       inHigh;
                      double       inLow;
                      };
struct TA_SAREXT_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_SAREXT_Data* memory;
                       double       newHigh;
                       double       newLow;
                       double       prevHigh;
                       double       prevLow;
                       int          isLong;
                       void*        stateMINUS_DM;
                       double       sar;
                       double       ep;
                       double       afLong;
                       double       afShort;
                       double        optInStartValue; /* From TA_REAL_MIN to TA_REAL_MAX */
                       double        optInOffsetOnReverse; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationInitLong; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationLong; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationMaxLong; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationInitShort; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationShort; /* From 0 to TA_REAL_MAX */
                       double        optInAccelerationMaxShort; /* From 0 to TA_REAL_MAX */
                       };


TA_RetCode TA_SAREXT_StateInit( struct TA_SAREXT_State** _state,
                              double        optInStartValue, /* From TA_REAL_MIN to TA_REAL_MAX */
                              double        optInOffsetOnReverse, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationInitLong, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationLong, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationMaxLong, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationInitShort, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationShort, /* From 0 to TA_REAL_MAX */
                              double        optInAccelerationMaxShort );  /* From 0 to TA_REAL_MAX */


TA_RetCode TA_SAREXT_State( struct TA_SAREXT_State* _state,
                          const double inHigh,
                          const double inLow,
                          double        *outReal );

TA_RetCode TA_SAREXT_BatchState( struct TA_SAREXT_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inHigh[],
                               const double inLow[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_SAREXT_StateFree( struct TA_SAREXT_State** _state );


TA_RetCode TA_SAREXT_StateSave( struct TA_SAREXT_State* _state,
                              FILE* _file );


TA_RetCode TA_SAREXT_StateLoad( struct TA_SAREXT_State** _state,
                              FILE* _file );



/*
 * TA_SIN - Vector Trigonometric Sin
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SIN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SIN_Lookback( void );


struct TA_SIN_Data {
                   double       inReal;
                   };
struct TA_SIN_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_SIN_Data* memory;
                    };


TA_RetCode TA_SIN_StateInit( struct TA_SIN_State** _state );


TA_RetCode TA_SIN_State( struct TA_SIN_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_SIN_BatchState( struct TA_SIN_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_SIN_StateFree( struct TA_SIN_State** _state );


TA_RetCode TA_SIN_StateSave( struct TA_SIN_State* _state,
                           FILE* _file );


TA_RetCode TA_SIN_StateLoad( struct TA_SIN_State** _state,
                           FILE* _file );



/*
 * TA_SINH - Vector Trigonometric Sinh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SINH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_SINH_Lookback( void );


struct TA_SINH_Data {
                    double       inReal;
                    };
struct TA_SINH_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_SINH_Data* memory;
                     };


TA_RetCode TA_SINH_StateInit( struct TA_SINH_State** _state );


TA_RetCode TA_SINH_State( struct TA_SINH_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_SINH_BatchState( struct TA_SINH_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_SINH_StateFree( struct TA_SINH_State** _state );


TA_RetCode TA_SINH_StateSave( struct TA_SINH_State* _state,
                            FILE* _file );


TA_RetCode TA_SINH_StateLoad( struct TA_SINH_State** _state,
                            FILE* _file );



/*
 * TA_SMA - Simple Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_SMA_Data {
                   double       inReal;
                   };
struct TA_SMA_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_SMA_Data* memory;
                    double       periodTotal;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_SMA_StateInit( struct TA_SMA_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_SMA_State( struct TA_SMA_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_SMA_BatchState( struct TA_SMA_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_SMA_StateFree( struct TA_SMA_State** _state );


TA_RetCode TA_SMA_StateSave( struct TA_SMA_State* _state,
                           FILE* _file );


TA_RetCode TA_SMA_StateLoad( struct TA_SMA_State** _state,
                           FILE* _file );



/*
 * TA_SQRT - Vector Square Root
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_SQRT( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_SQRT_Lookback( void );


struct TA_SQRT_Data {
                    double       inReal;
                    };
struct TA_SQRT_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_SQRT_Data* memory;
                     };


TA_RetCode TA_SQRT_StateInit( struct TA_SQRT_State** _state );


TA_RetCode TA_SQRT_State( struct TA_SQRT_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_SQRT_BatchState( struct TA_SQRT_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_SQRT_StateFree( struct TA_SQRT_State** _state );


TA_RetCode TA_SQRT_StateSave( struct TA_SQRT_State* _state,
                            FILE* _file );


TA_RetCode TA_SQRT_StateLoad( struct TA_SQRT_State** _state,
                            FILE* _file );



/*
 * TA_STDDEV - Standard Deviation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_STDDEV( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inReal */,
                      int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                      double        OPT_REAL /* optInNbDev */, /* From TA_REAL_MIN to TA_REAL_MAX */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_STDDEV_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                      double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


struct TA_STDDEV_Data {
                      double       inReal;
                      };
struct TA_STDDEV_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_STDDEV_Data* memory;
                       void*        var_state;
                       int           optInTimePeriod; /* From 2 to 100000 */
                       double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
                       };


TA_RetCode TA_STDDEV_StateInit( struct TA_STDDEV_State** _state,
                              int           optInTimePeriod, /* From 2 to 100000 */
                              double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_RetCode TA_STDDEV_State( struct TA_STDDEV_State* _state,
                          const double inReal,
                          double        *outReal );

TA_RetCode TA_STDDEV_BatchState( struct TA_STDDEV_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inReal[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_STDDEV_StateFree( struct TA_STDDEV_State** _state );


TA_RetCode TA_STDDEV_StateSave( struct TA_STDDEV_State* _state,
                              FILE* _file );


TA_RetCode TA_STDDEV_StateLoad( struct TA_STDDEV_State** _state,
                              FILE* _file );



/*
 * TA_STOCH - Stochastic
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInSlowK_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-K line. Usually set to 3
 * 
 * optInSlowK_MAType:
 *    Type of Moving Average for Slow-K
 * 
 * optInSlowD_Period:(From 1 to 100000)
 *    Smoothing for making the Slow-D line
 * 
 * optInSlowD_MAType:
 *    Type of Moving Average for Slow-D
 * 
 * 
 */
TA_RetCode TA_STOCH( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                     int           OPT_INT /* optInSlowK_Period */, /* From 1 to 100000 */
                     TA_MAType     OPT_MATYPE /* optInSlowK_MAType */,                     int           OPT_INT /* optInSlowD_Period */, /* From 1 to 100000 */
                     TA_MAType     OPT_MATYPE /* optInSlowD_MAType */,                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outSlowK */,
                     double       *OUT_ARRAY /* outSlowD */ );

int TA_STOCH_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                     int           optInSlowK_Period, /* From 1 to 100000 */
                     TA_MAType     optInSlowK_MAType,                     int           optInSlowD_Period, /* From 1 to 100000 */
                     TA_MAType     optInSlowD_MAType ); 

struct TA_STOCH_Data {
                     double       inHigh;
                     double       inLow;
                     double       inClose;
                     };
struct TA_STOCH_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_STOCH_Data* memory;
                      double       lowest;
                      double       highest;
                      int          lowest_exp;
                      int          highest_exp;
                      void*        stateMA1;
                      void*        stateMA2;
                      int           optInFastK_Period; /* From 1 to 100000 */
                      int           optInSlowK_Period; /* From 1 to 100000 */
                      TA_MAType     optInSlowK_MAType;                      int           optInSlowD_Period; /* From 1 to 100000 */
                      TA_MAType     optInSlowD_MAType;                      };


TA_RetCode TA_STOCH_StateInit( struct TA_STOCH_State** _state,
                             int           optInFastK_Period, /* From 1 to 100000 */
                             int           optInSlowK_Period, /* From 1 to 100000 */
                             TA_MAType     optInSlowK_MAType,                             int           optInSlowD_Period, /* From 1 to 100000 */
                             TA_MAType     optInSlowD_MAType ); 

TA_RetCode TA_STOCH_State( struct TA_STOCH_State* _state,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         double        *outSlowK,
                         double        *outSlowD );

TA_RetCode TA_STOCH_BatchState( struct TA_STOCH_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inHigh[],
                              const double inLow[],
                              const double inClose[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outSlowK[],
                              double        outSlowD[] );

TA_RetCode TA_STOCH_StateFree( struct TA_STOCH_State** _state );


TA_RetCode TA_STOCH_StateSave( struct TA_STOCH_State* _state,
                             FILE* _file );


TA_RetCode TA_STOCH_StateLoad( struct TA_STOCH_State** _state,
                             FILE* _file );



/*
 * TA_STOCHF - Stochastic Fast
 * 
 * Input  = High, Low, Close
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_RetCode TA_STOCHF( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                      int           OPT_INT /* optInFastD_Period */, /* From 1 to 100000 */
                      TA_MAType     OPT_MATYPE /* optInFastD_MAType */,                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outFastK */,
                      double       *OUT_ARRAY /* outFastD */ );

int TA_STOCHF_Lookback( int           optInFastK_Period, /* From 1 to 100000 */
                      int           optInFastD_Period, /* From 1 to 100000 */
                      TA_MAType     optInFastD_MAType ); 

struct TA_STOCHF_Data {
                      double       inHigh;
                      double       inLow;
                      double       inClose;
                      };
struct TA_STOCHF_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_STOCHF_Data* memory;
                       double       lowest;
                       double       highest;
                       int          lowest_exp;
                       int          highest_exp;
                       void*        stateMA1;
                       int           optInFastK_Period; /* From 1 to 100000 */
                       int           optInFastD_Period; /* From 1 to 100000 */
                       TA_MAType     optInFastD_MAType;                       };


TA_RetCode TA_STOCHF_StateInit( struct TA_STOCHF_State** _state,
                              int           optInFastK_Period, /* From 1 to 100000 */
                              int           optInFastD_Period, /* From 1 to 100000 */
                              TA_MAType     optInFastD_MAType ); 

TA_RetCode TA_STOCHF_State( struct TA_STOCHF_State* _state,
                          const double inHigh,
                          const double inLow,
                          const double inClose,
                          double        *outFastK,
                          double        *outFastD );

TA_RetCode TA_STOCHF_BatchState( struct TA_STOCHF_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inHigh[],
                               const double inLow[],
                               const double inClose[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outFastK[],
                               double        outFastD[] );

TA_RetCode TA_STOCHF_StateFree( struct TA_STOCHF_State** _state );


TA_RetCode TA_STOCHF_StateSave( struct TA_STOCHF_State* _state,
                              FILE* _file );


TA_RetCode TA_STOCHF_StateLoad( struct TA_STOCHF_State** _state,
                              FILE* _file );



/*
 * TA_STOCHRSI - Stochastic Relative Strength Index
 * 
 * Input  = double
 * Output = double, double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * optInFastK_Period:(From 1 to 100000)
 *    Time period for building the Fast-K line
 * 
 * optInFastD_Period:(From 1 to 100000)
 *    Smoothing for making the Fast-D line. Usually set to 3
 * 
 * optInFastD_MAType:
 *    Type of Moving Average for Fast-D
 * 
 * 
 */
TA_RetCode TA_STOCHRSI( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inReal */,
                        int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                        int           OPT_INT /* optInFastK_Period */, /* From 1 to 100000 */
                        int           OPT_INT /* optInFastD_Period */, /* From 1 to 100000 */
                        TA_MAType     OPT_MATYPE /* optInFastD_MAType */,                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outFastK */,
                        double       *OUT_ARRAY /* outFastD */ );

int TA_STOCHRSI_Lookback( int           optInTimePeriod, /* From 2 to 100000 */
                        int           optInFastK_Period, /* From 1 to 100000 */
                        int           optInFastD_Period, /* From 1 to 100000 */
                        TA_MAType     optInFastD_MAType ); 

struct TA_STOCHRSI_Data {
                        double       inReal;
                        };
struct TA_STOCHRSI_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_STOCHRSI_Data* memory;
                         void*        stateRSI;
                         void*        stateSTOCHF;
                         int           optInTimePeriod; /* From 2 to 100000 */
                         int           optInFastK_Period; /* From 1 to 100000 */
                         int           optInFastD_Period; /* From 1 to 100000 */
                         TA_MAType     optInFastD_MAType;                         };


TA_RetCode TA_STOCHRSI_StateInit( struct TA_STOCHRSI_State** _state,
                                int           optInTimePeriod, /* From 2 to 100000 */
                                int           optInFastK_Period, /* From 1 to 100000 */
                                int           optInFastD_Period, /* From 1 to 100000 */
                                TA_MAType     optInFastD_MAType ); 

TA_RetCode TA_STOCHRSI_State( struct TA_STOCHRSI_State* _state,
                            const double inReal,
                            double        *outFastK,
                            double        *outFastD );

TA_RetCode TA_STOCHRSI_BatchState( struct TA_STOCHRSI_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inReal[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outFastK[],
                                 double        outFastD[] );

TA_RetCode TA_STOCHRSI_StateFree( struct TA_STOCHRSI_State** _state );


TA_RetCode TA_STOCHRSI_StateSave( struct TA_STOCHRSI_State* _state,
                                FILE* _file );


TA_RetCode TA_STOCHRSI_StateLoad( struct TA_STOCHRSI_State** _state,
                                FILE* _file );



/*
 * TA_SUB - Vector Arithmetic Substraction
 * 
 * Input  = double, double
 * Output = double
 * 
 */
TA_RetCode TA_SUB( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal0 */,
                   const double *IN_ARRAY /* inReal1 */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SUB_Lookback( void );


struct TA_SUB_Data {
                   double       inReal0;
                   double       inReal1;
                   };
struct TA_SUB_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_SUB_Data* memory;
                    };


TA_RetCode TA_SUB_StateInit( struct TA_SUB_State** _state );


TA_RetCode TA_SUB_State( struct TA_SUB_State* _state,
                       const double inReal0,
                       const double inReal1,
                       double        *outReal );

TA_RetCode TA_SUB_BatchState( struct TA_SUB_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal0[],
                            const double inReal1[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_SUB_StateFree( struct TA_SUB_State** _state );


TA_RetCode TA_SUB_StateSave( struct TA_SUB_State* _state,
                           FILE* _file );


TA_RetCode TA_SUB_StateLoad( struct TA_SUB_State** _state,
                           FILE* _file );



/*
 * TA_SUM - Summation
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_SUM( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_SUM_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_SUM_Data {
                   double       inReal;
                   };
struct TA_SUM_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_SUM_Data* memory;
                    double       tempSum;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_SUM_StateInit( struct TA_SUM_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_SUM_State( struct TA_SUM_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_SUM_BatchState( struct TA_SUM_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_SUM_StateFree( struct TA_SUM_State** _state );


TA_RetCode TA_SUM_StateSave( struct TA_SUM_State* _state,
                           FILE* _file );


TA_RetCode TA_SUM_StateLoad( struct TA_SUM_State** _state,
                           FILE* _file );



/*
 * TA_T3 - Triple Exponential Moving Average (T3)
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInVFactor:(From 0 to 1)
 *    Volume Factor
 * 
 * 
 */
TA_RetCode TA_T3( int           START_IDX,
                  int           END_IDX,
                  const double *IN_ARRAY /* inReal */,
                  int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                  double        OPT_REAL /* optInVFactor */, /* From 0 to 1 */
                  int          *BEG_IDX,
                  int          *OUT_SIZE,
                  double       *OUT_ARRAY /* outReal */ );

int TA_T3_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                  double        optInVFactor );  /* From 0 to 1 */


struct TA_T3_Data {
                  double       inReal;
                  };
struct TA_T3_State {
                   size_t mem_size;
                   size_t mem_index;
                   struct TA_T3_Data* memory;
                   double       k;
                   double       one_minus_k;
                   double       e1;
                   double       e2;
                   double       e3;
                   double       e4;
                   double       e5;
                   double       e6;
                   double       c1;
                   double       c2;
                   double       c3;
                   double       c4;
                   double       tempReal;
                   int          firstOutput;
                   int           optInTimePeriod; /* From 1 to 100000 */
                   double        optInVFactor; /* From 0 to 1 */
                   };


TA_RetCode TA_T3_StateInit( struct TA_T3_State** _state,
                          int           optInTimePeriod, /* From 1 to 100000 */
                          double        optInVFactor );  /* From 0 to 1 */


TA_RetCode TA_T3_State( struct TA_T3_State* _state,
                      const double inReal,
                      double        *outReal );

TA_RetCode TA_T3_BatchState( struct TA_T3_State* _state,
                           int startIdx,
                           int endIdx,
                           const double inReal[],
                           int          *outBegIdx,
                           int          *outNBElement,
                           double        outReal[] );

TA_RetCode TA_T3_StateFree( struct TA_T3_State** _state );


TA_RetCode TA_T3_StateSave( struct TA_T3_State* _state,
                          FILE* _file );


TA_RetCode TA_T3_StateLoad( struct TA_T3_State** _state,
                          FILE* _file );



/*
 * TA_TAN - Vector Trigonometric Tan
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_TAN( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_TAN_Lookback( void );


struct TA_TAN_Data {
                   double       inReal;
                   };
struct TA_TAN_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_TAN_Data* memory;
                    };


TA_RetCode TA_TAN_StateInit( struct TA_TAN_State** _state );


TA_RetCode TA_TAN_State( struct TA_TAN_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_TAN_BatchState( struct TA_TAN_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_TAN_StateFree( struct TA_TAN_State** _state );


TA_RetCode TA_TAN_StateSave( struct TA_TAN_State* _state,
                           FILE* _file );


TA_RetCode TA_TAN_StateLoad( struct TA_TAN_State** _state,
                           FILE* _file );



/*
 * TA_TANH - Vector Trigonometric Tanh
 * 
 * Input  = double
 * Output = double
 * 
 */
TA_RetCode TA_TANH( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TANH_Lookback( void );


struct TA_TANH_Data {
                    double       inReal;
                    };
struct TA_TANH_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_TANH_Data* memory;
                     };


TA_RetCode TA_TANH_StateInit( struct TA_TANH_State** _state );


TA_RetCode TA_TANH_State( struct TA_TANH_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_TANH_BatchState( struct TA_TANH_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_TANH_StateFree( struct TA_TANH_State** _state );


TA_RetCode TA_TANH_StateSave( struct TA_TANH_State* _state,
                            FILE* _file );


TA_RetCode TA_TANH_StateLoad( struct TA_TANH_State** _state,
                            FILE* _file );



/*
 * TA_TEMA - Triple Exponential Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TEMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TEMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_TEMA_Data {
                    double       inReal;
                    };
struct TA_TEMA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_TEMA_Data* memory;
                     void*        state_EMA;
                     void*        state_EMA2;
                     void*        state_EMA3;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_TEMA_StateInit( struct TA_TEMA_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_TEMA_State( struct TA_TEMA_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_TEMA_BatchState( struct TA_TEMA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_TEMA_StateFree( struct TA_TEMA_State** _state );


TA_RetCode TA_TEMA_StateSave( struct TA_TEMA_State* _state,
                            FILE* _file );


TA_RetCode TA_TEMA_StateLoad( struct TA_TEMA_State** _state,
                            FILE* _file );



/*
 * TA_TRANGE - True Range
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TRANGE( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_TRANGE_Lookback( void );


struct TA_TRANGE_Data {
                      double       inHigh;
                      double       inLow;
                      double       inClose;
                      };
struct TA_TRANGE_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_TRANGE_Data* memory;
                       };


TA_RetCode TA_TRANGE_StateInit( struct TA_TRANGE_State** _state );


TA_RetCode TA_TRANGE_State( struct TA_TRANGE_State* _state,
                          const double inHigh,
                          const double inLow,
                          const double inClose,
                          double        *outReal );

TA_RetCode TA_TRANGE_BatchState( struct TA_TRANGE_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inHigh[],
                               const double inLow[],
                               const double inClose[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_TRANGE_StateFree( struct TA_TRANGE_State** _state );


TA_RetCode TA_TRANGE_StateSave( struct TA_TRANGE_State* _state,
                              FILE* _file );


TA_RetCode TA_TRANGE_StateLoad( struct TA_TRANGE_State** _state,
                              FILE* _file );



/*
 * TA_TRIMA - Triangular Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIMA( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inReal */,
                     int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_TRIMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_TRIMA_Data {
                     double       inReal;
                     };
struct TA_TRIMA_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_TRIMA_Data* memory;
                      double       numerator;
                      double       numeratorSub;
                      double       numeratorAdd;
                      double       factor;
                      int          middleIdx;
                      int           optInTimePeriod; /* From 1 to 100000 */
                      };


TA_RetCode TA_TRIMA_StateInit( struct TA_TRIMA_State** _state,
                             int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_TRIMA_State( struct TA_TRIMA_State* _state,
                         const double inReal,
                         double        *outReal );

TA_RetCode TA_TRIMA_BatchState( struct TA_TRIMA_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inReal[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outReal[] );

TA_RetCode TA_TRIMA_StateFree( struct TA_TRIMA_State** _state );


TA_RetCode TA_TRIMA_StateSave( struct TA_TRIMA_State* _state,
                             FILE* _file );


TA_RetCode TA_TRIMA_StateLoad( struct TA_TRIMA_State** _state,
                             FILE* _file );



/*
 * TA_TRIX - 1-day Rate-Of-Change (ROC) of a Triple Smooth EMA
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TRIX( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_TRIX_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_TRIX_Data {
                    double       inReal;
                    };
struct TA_TRIX_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_TRIX_Data* memory;
                     void*        stateEMA1;
                     void*        stateEMA2;
                     void*        stateEMA3;
                     void*        stateROC;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_TRIX_StateInit( struct TA_TRIX_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_TRIX_State( struct TA_TRIX_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_TRIX_BatchState( struct TA_TRIX_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_TRIX_StateFree( struct TA_TRIX_State** _state );


TA_RetCode TA_TRIX_StateSave( struct TA_TRIX_State* _state,
                            FILE* _file );


TA_RetCode TA_TRIX_StateLoad( struct TA_TRIX_State** _state,
                            FILE* _file );



/*
 * TA_TSF - Time Series Forecast
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_TSF( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_TSF_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_TSF_Data {
                   double       inReal;
                   };
struct TA_TSF_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_TSF_Data* memory;
                    double       SumX;
                    double       SumXY;
                    double       SumY;
                    double       SumXSqr;
                    double       Divisor;
                    int           optInTimePeriod; /* From 2 to 100000 */
                    };


TA_RetCode TA_TSF_StateInit( struct TA_TSF_State** _state,
                           int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_TSF_State( struct TA_TSF_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_TSF_BatchState( struct TA_TSF_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_TSF_StateFree( struct TA_TSF_State** _state );


TA_RetCode TA_TSF_StateSave( struct TA_TSF_State* _state,
                           FILE* _file );


TA_RetCode TA_TSF_StateLoad( struct TA_TSF_State** _state,
                           FILE* _file );



/*
 * TA_TYPPRICE - Typical Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_TYPPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_TYPPRICE_Lookback( void );


struct TA_TYPPRICE_Data {
                        double       inHigh;
                        double       inLow;
                        double       inClose;
                        };
struct TA_TYPPRICE_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_TYPPRICE_Data* memory;
                         };


TA_RetCode TA_TYPPRICE_StateInit( struct TA_TYPPRICE_State** _state );


TA_RetCode TA_TYPPRICE_State( struct TA_TYPPRICE_State* _state,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            double        *outReal );

TA_RetCode TA_TYPPRICE_BatchState( struct TA_TYPPRICE_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 const double inClose[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_TYPPRICE_StateFree( struct TA_TYPPRICE_State** _state );


TA_RetCode TA_TYPPRICE_StateSave( struct TA_TYPPRICE_State* _state,
                                FILE* _file );


TA_RetCode TA_TYPPRICE_StateLoad( struct TA_TYPPRICE_State** _state,
                                FILE* _file );



/*
 * TA_ULTOSC - Ultimate Oscillator
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod1:(From 1 to 100000)
 *    Number of bars for 1st period.
 * 
 * optInTimePeriod2:(From 1 to 100000)
 *    Number of bars fro 2nd period
 * 
 * optInTimePeriod3:(From 1 to 100000)
 *    Number of bars for 3rd period
 * 
 * 
 */
TA_RetCode TA_ULTOSC( int           START_IDX,
                      int           END_IDX,
                      const double *IN_ARRAY /* inHigh */,
                      const double *IN_ARRAY /* inLow */,
                      const double *IN_ARRAY /* inClose */,
                      int           OPT_INT /* optInTimePeriod1 */, /* From 1 to 100000 */
                      int           OPT_INT /* optInTimePeriod2 */, /* From 1 to 100000 */
                      int           OPT_INT /* optInTimePeriod3 */, /* From 1 to 100000 */
                      int          *BEG_IDX,
                      int          *OUT_SIZE,
                      double       *OUT_ARRAY /* outReal */ );

int TA_ULTOSC_Lookback( int           optInTimePeriod1, /* From 1 to 100000 */
                      int           optInTimePeriod2, /* From 1 to 100000 */
                      int           optInTimePeriod3 );  /* From 1 to 100000 */


struct TA_ULTOSC_Data {
                      double       inHigh;
                      double       inLow;
                      double       inClose;
                      };
struct TA_ULTOSC_State {
                       size_t mem_size;
                       size_t mem_index;
                       struct TA_ULTOSC_Data* memory;
                       void*        periodA;
                       void*        periodB;
                       double       a1Total;
                       double       a2Total;
                       double       a3Total;
                       double       b1Total;
                       double       b2Total;
                       double       b3Total;
                       double       prevClose;
                       double       gap2;
                       double       gap1;
                       int           optInTimePeriod1; /* From 1 to 100000 */
                       int           optInTimePeriod2; /* From 1 to 100000 */
                       int           optInTimePeriod3; /* From 1 to 100000 */
                       };


TA_RetCode TA_ULTOSC_StateInit( struct TA_ULTOSC_State** _state,
                              int           optInTimePeriod1, /* From 1 to 100000 */
                              int           optInTimePeriod2, /* From 1 to 100000 */
                              int           optInTimePeriod3 );  /* From 1 to 100000 */


TA_RetCode TA_ULTOSC_State( struct TA_ULTOSC_State* _state,
                          const double inHigh,
                          const double inLow,
                          const double inClose,
                          double        *outReal );

TA_RetCode TA_ULTOSC_BatchState( struct TA_ULTOSC_State* _state,
                               int startIdx,
                               int endIdx,
                               const double inHigh[],
                               const double inLow[],
                               const double inClose[],
                               int          *outBegIdx,
                               int          *outNBElement,
                               double        outReal[] );

TA_RetCode TA_ULTOSC_StateFree( struct TA_ULTOSC_State** _state );


TA_RetCode TA_ULTOSC_StateSave( struct TA_ULTOSC_State* _state,
                              FILE* _file );


TA_RetCode TA_ULTOSC_StateLoad( struct TA_ULTOSC_State** _state,
                              FILE* _file );



/*
 * TA_VAR - Variance
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * optInNbDev:(From TA_REAL_MIN to TA_REAL_MAX)
 *    Nb of deviations
 * 
 * 
 */
TA_RetCode TA_VAR( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   double        OPT_REAL /* optInNbDev */, /* From TA_REAL_MIN to TA_REAL_MAX */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_VAR_Lookback( int           optInTimePeriod, /* From 1 to 100000 */
                   double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


struct TA_VAR_Data {
                   double       inReal;
                   };
struct TA_VAR_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_VAR_Data* memory;
                    double       periodTotal1;
                    double       periodTotal2;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    double        optInNbDev; /* From TA_REAL_MIN to TA_REAL_MAX */
                    };


TA_RetCode TA_VAR_StateInit( struct TA_VAR_State** _state,
                           int           optInTimePeriod, /* From 1 to 100000 */
                           double        optInNbDev );  /* From TA_REAL_MIN to TA_REAL_MAX */


TA_RetCode TA_VAR_State( struct TA_VAR_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_VAR_BatchState( struct TA_VAR_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_VAR_StateFree( struct TA_VAR_State** _state );


TA_RetCode TA_VAR_StateSave( struct TA_VAR_State* _state,
                           FILE* _file );


TA_RetCode TA_VAR_StateLoad( struct TA_VAR_State** _state,
                           FILE* _file );



/*
 * TA_WCLPRICE - Weighted Close Price
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 */
TA_RetCode TA_WCLPRICE( int           START_IDX,
                        int           END_IDX,
                        const double *IN_ARRAY /* inHigh */,
                        const double *IN_ARRAY /* inLow */,
                        const double *IN_ARRAY /* inClose */,
                        int          *BEG_IDX,
                        int          *OUT_SIZE,
                        double       *OUT_ARRAY /* outReal */ );

int TA_WCLPRICE_Lookback( void );


struct TA_WCLPRICE_Data {
                        double       inHigh;
                        double       inLow;
                        double       inClose;
                        };
struct TA_WCLPRICE_State {
                         size_t mem_size;
                         size_t mem_index;
                         struct TA_WCLPRICE_Data* memory;
                         };


TA_RetCode TA_WCLPRICE_StateInit( struct TA_WCLPRICE_State** _state );


TA_RetCode TA_WCLPRICE_State( struct TA_WCLPRICE_State* _state,
                            const double inHigh,
                            const double inLow,
                            const double inClose,
                            double        *outReal );

TA_RetCode TA_WCLPRICE_BatchState( struct TA_WCLPRICE_State* _state,
                                 int startIdx,
                                 int endIdx,
                                 const double inHigh[],
                                 const double inLow[],
                                 const double inClose[],
                                 int          *outBegIdx,
                                 int          *outNBElement,
                                 double        outReal[] );

TA_RetCode TA_WCLPRICE_StateFree( struct TA_WCLPRICE_State** _state );


TA_RetCode TA_WCLPRICE_StateSave( struct TA_WCLPRICE_State* _state,
                                FILE* _file );


TA_RetCode TA_WCLPRICE_StateLoad( struct TA_WCLPRICE_State** _state,
                                FILE* _file );



/*
 * TA_WILLR - Williams' %R
 * 
 * Input  = High, Low, Close
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 2 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WILLR( int           START_IDX,
                     int           END_IDX,
                     const double *IN_ARRAY /* inHigh */,
                     const double *IN_ARRAY /* inLow */,
                     const double *IN_ARRAY /* inClose */,
                     int           OPT_INT /* optInTimePeriod */, /* From 2 to 100000 */
                     int          *BEG_IDX,
                     int          *OUT_SIZE,
                     double       *OUT_ARRAY /* outReal */ );

int TA_WILLR_Lookback( int           optInTimePeriod );  /* From 2 to 100000 */


struct TA_WILLR_Data {
                     double       inHigh;
                     double       inLow;
                     double       inClose;
                     };
struct TA_WILLR_State {
                      size_t mem_size;
                      size_t mem_index;
                      struct TA_WILLR_Data* memory;
                      double       lowest;
                      double       highest;
                      int          lowest_exp;
                      int          highest_exp;
                      int           optInTimePeriod; /* From 2 to 100000 */
                      };


TA_RetCode TA_WILLR_StateInit( struct TA_WILLR_State** _state,
                             int           optInTimePeriod );  /* From 2 to 100000 */


TA_RetCode TA_WILLR_State( struct TA_WILLR_State* _state,
                         const double inHigh,
                         const double inLow,
                         const double inClose,
                         double        *outReal );

TA_RetCode TA_WILLR_BatchState( struct TA_WILLR_State* _state,
                              int startIdx,
                              int endIdx,
                              const double inHigh[],
                              const double inLow[],
                              const double inClose[],
                              int          *outBegIdx,
                              int          *outNBElement,
                              double        outReal[] );

TA_RetCode TA_WILLR_StateFree( struct TA_WILLR_State** _state );


TA_RetCode TA_WILLR_StateSave( struct TA_WILLR_State* _state,
                             FILE* _file );


TA_RetCode TA_WILLR_StateLoad( struct TA_WILLR_State** _state,
                             FILE* _file );



/*
 * TA_WLMA - Wilders Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WLMA( int           START_IDX,
                    int           END_IDX,
                    const double *IN_ARRAY /* inReal */,
                    int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                    int          *BEG_IDX,
                    int          *OUT_SIZE,
                    double       *OUT_ARRAY /* outReal */ );

int TA_WLMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_WLMA_Data {
                    double       inReal;
                    };
struct TA_WLMA_State {
                     size_t mem_size;
                     size_t mem_index;
                     struct TA_WLMA_Data* memory;
                     double       prevMA;
                     double       tempSum;
                     double       preprRes;
                     double       optInK_1;
                     int           optInTimePeriod; /* From 1 to 100000 */
                     };


TA_RetCode TA_WLMA_StateInit( struct TA_WLMA_State** _state,
                            int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_WLMA_State( struct TA_WLMA_State* _state,
                        const double inReal,
                        double        *outReal );

TA_RetCode TA_WLMA_BatchState( struct TA_WLMA_State* _state,
                             int startIdx,
                             int endIdx,
                             const double inReal[],
                             int          *outBegIdx,
                             int          *outNBElement,
                             double        outReal[] );

TA_RetCode TA_WLMA_StateFree( struct TA_WLMA_State** _state );


TA_RetCode TA_WLMA_StateSave( struct TA_WLMA_State* _state,
                            FILE* _file );


TA_RetCode TA_WLMA_StateLoad( struct TA_WLMA_State** _state,
                            FILE* _file );



/*
 * TA_WMA - Weighted Moving Average
 * 
 * Input  = double
 * Output = double
 * 
 * Optional Parameters
 * -------------------
 * optInTimePeriod:(From 1 to 100000)
 *    Number of period
 * 
 * 
 */
TA_RetCode TA_WMA( int           START_IDX,
                   int           END_IDX,
                   const double *IN_ARRAY /* inReal */,
                   int           OPT_INT /* optInTimePeriod */, /* From 1 to 100000 */
                   int          *BEG_IDX,
                   int          *OUT_SIZE,
                   double       *OUT_ARRAY /* outReal */ );

int TA_WMA_Lookback( int           optInTimePeriod );  /* From 1 to 100000 */


struct TA_WMA_Data {
                   double       inReal;
                   };
struct TA_WMA_State {
                    size_t mem_size;
                    size_t mem_index;
                    struct TA_WMA_Data* memory;
                    double       periodSum;
                    double       periodSub;
                    double       divider;
                    int           optInTimePeriod; /* From 1 to 100000 */
                    };


TA_RetCode TA_WMA_StateInit( struct TA_WMA_State** _state,
                           int           optInTimePeriod );  /* From 1 to 100000 */


TA_RetCode TA_WMA_State( struct TA_WMA_State* _state,
                       const double inReal,
                       double        *outReal );

TA_RetCode TA_WMA_BatchState( struct TA_WMA_State* _state,
                            int startIdx,
                            int endIdx,
                            const double inReal[],
                            int          *outBegIdx,
                            int          *outNBElement,
                            double        outReal[] );

TA_RetCode TA_WMA_StateFree( struct TA_WMA_State** _state );


TA_RetCode TA_WMA_StateSave( struct TA_WMA_State* _state,
                           FILE* _file );


TA_RetCode TA_WMA_StateLoad( struct TA_WMA_State** _state,
                           FILE* _file );



/* Some TA functions takes a certain amount of input data
 * before stabilizing and outputting meaningful data. This is
 * a behavior pertaining to the algo of some TA functions and
 * is not particular to the TA-Lib implementation.
 * TA-Lib allows you to automatically strip off these unstable
 * data from your output and from any internal processing.
 * (See documentation for more info)
 *
 * Examples:
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_EMA, 30 );
 *           Always strip off 30 price bar for the TA_EMA function.
 *
 *      TA_SetUnstablePeriod( TA_FUNC_UNST_ALL, 30 );
 *           Always strip off 30 price bar from ALL functions
 *           having an unstable period.
 *
 * See ta_defs.h for the enumeration TA_FuncUnstId
 */

TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id,
                                 unsigned int  unstablePeriod );

unsigned int TA_GetUnstablePeriod( TA_FuncUnstId id );

/* You can change slightly the behavior of the TA functions
 * by requesting compatibility with some existing software.
 *
 * By default, the behavior is as close as the original 
 * author of the TA functions intend it to be.
 *
 * See ta_defs.h for the enumeration TA_Compatibility.
 */
TA_RetCode TA_SetCompatibility( TA_Compatibility value );
TA_Compatibility TA_GetCompatibility( void );

/* Candlesticks struct and functions
 * Because candlestick patterns are subjective, it is necessary 
 * to allow the user to specify what should be the meaning of 
 * 'long body', 'short shadows', etc.
 */

/* Call TA_SetCandleSettings to set that when comparing a candle 
 * basing on settingType it must be compared with the average 
 * of the last avgPeriod candles' rangeType multiplied by factor.
 * This setting is valid until TA_RestoreCandleDefaultSettings is called
 */
TA_RetCode TA_SetCandleSettings( TA_CandleSettingType settingType, 
                                 TA_RangeType rangeType, 
                                 int avgPeriod, 
                                 double factor );

/* Call TA_RestoreCandleDefaultSettings after using custom settings 
 * to restore the default settings for the specified settingType
 */
TA_RetCode TA_RestoreCandleDefaultSettings( TA_CandleSettingType settingType );

/***************
 * End of File *
 ***************/
