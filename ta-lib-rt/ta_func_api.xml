<?xml version="1.0" encoding="utf-8" ?>
<FinancialFunctionGroups version="TA-Lib RT 0.8.1-alpha (Jan  7 2024 21:58:08)">
	<!-- ACCBANDS -->
	<FinancialFunctionGroup>
		<Abbreviation>ACCBANDS</Abbreviation>
		<CamelCaseName>Accbands</CamelCaseName>
		<ShortDescription>Acceleration Bands</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateSMA1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateSMA2</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateSMA3</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ACCBANDS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>20</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>20</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>20</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>20</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ACCBANDS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>20</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ACOS -->
	<FinancialFunctionGroup>
		<Abbreviation>ACOS</Abbreviation>
		<CamelCaseName>Acos</CamelCaseName>
		<ShortDescription>Vector Trigonometric ACos</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ACOS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_ACOS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ACOS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- AD -->
	<FinancialFunctionGroup>
		<Abbreviation>AD</Abbreviation>
		<CamelCaseName>Ad</CamelCaseName>
		<ShortDescription>Chaikin A/D Line</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ad</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_AD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_AD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ADD -->
	<FinancialFunctionGroup>
		<Abbreviation>ADD</Abbreviation>
		<CamelCaseName>Add</CamelCaseName>
		<ShortDescription>Vector Arithmetic Add</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ADD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_ADD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ADOSC -->
	<FinancialFunctionGroup>
		<Abbreviation>ADOSC</Abbreviation>
		<CamelCaseName>AdOsc</CamelCaseName>
		<ShortDescription>Chaikin A/D Oscillator</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>slowk</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>one_minus_slowk</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>fastk</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>one_minus_fastk</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ad</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>fastEMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>slowEMA</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ADOSC_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADOSC_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ADX -->
	<FinancialFunctionGroup>
		<Abbreviation>ADX</Abbreviation>
		<CamelCaseName>Adx</CamelCaseName>
		<ShortDescription>Average Directional Movement Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevClose</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMinusDM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPlusDM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevTR</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevADX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumDX</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ADX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ADXR -->
	<FinancialFunctionGroup>
		<Abbreviation>ADXR</Abbreviation>
		<CamelCaseName>Adxr</CamelCaseName>
		<ShortDescription>Average Directional Movement Index Rating</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>ADXState</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ADXR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ADXR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- APO -->
	<FinancialFunctionGroup>
		<Abbreviation>APO</Abbreviation>
		<CamelCaseName>Apo</CamelCaseName>
		<ShortDescription>Absolute Price Oscillator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>fastMAState</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>slowMAState</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>doPercentageOutput</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_APO_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_APO</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_APO_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_APO_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_APO_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_APO_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_APO_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_APO_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- AROON -->
	<FinancialFunctionGroup>
		<Abbreviation>AROON</Abbreviation>
		<CamelCaseName>Aroon</CamelCaseName>
		<ShortDescription>Aroon</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>lowest</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>highest</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>lowest_exp</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>highest_exp</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>factor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_AROON_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROON</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outAroonDown</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outAroonUp</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outAroonDown</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outAroonUp</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outAroonDown</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outAroonUp</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROON_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- AROONOSC -->
	<FinancialFunctionGroup>
		<Abbreviation>AROONOSC</Abbreviation>
		<CamelCaseName>AroonOsc</CamelCaseName>
		<ShortDescription>Aroon Oscillator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>lowest</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>highest</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>lowest_exp</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>highest_exp</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>factor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_AROONOSC_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AROONOSC_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ASIN -->
	<FinancialFunctionGroup>
		<Abbreviation>ASIN</Abbreviation>
		<CamelCaseName>Asin</CamelCaseName>
		<ShortDescription>Vector Trigonometric ASin</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ASIN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_ASIN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ASIN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ATAN -->
	<FinancialFunctionGroup>
		<Abbreviation>ATAN</Abbreviation>
		<CamelCaseName>Atan</CamelCaseName>
		<ShortDescription>Vector Trigonometric ATan</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ATAN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_ATAN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ATAN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ATR -->
	<FinancialFunctionGroup>
		<Abbreviation>ATR</Abbreviation>
		<CamelCaseName>Atr</CamelCaseName>
		<ShortDescription>Average True Range</ShortDescription>
		<GroupId>Volatility Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>StateTRANGE</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>StateSMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevATR</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>firstATR</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ATR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ATR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ATR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- AVGPRICE -->
	<FinancialFunctionGroup>
		<Abbreviation>AVGPRICE</Abbreviation>
		<CamelCaseName>AvgPrice</CamelCaseName>
		<ShortDescription>Average Price</ShortDescription>
		<GroupId>Price Transform</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_AVGPRICE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_AVGPRICE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGPRICE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- AVGDEV -->
	<FinancialFunctionGroup>
		<Abbreviation>AVGDEV</Abbreviation>
		<CamelCaseName>AvgDev</CamelCaseName>
		<ShortDescription>Average Deviation</ShortDescription>
		<GroupId>Price Transform</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sum</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_AVGDEV_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_AVGDEV_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- BBANDS -->
	<FinancialFunctionGroup>
		<Abbreviation>BBANDS</Abbreviation>
		<CamelCaseName>Bbands</CamelCaseName>
		<ShortDescription>Bollinger Bands</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMA</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateSTDDEV</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_BBANDS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations up</Name>
						<ShortDescription>Deviation multiplier for upper band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations down</Name>
						<ShortDescription>Deviation multiplier for lower band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations up</Name>
						<ShortDescription>Deviation multiplier for upper band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations down</Name>
						<ShortDescription>Deviation multiplier for lower band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations up</Name>
						<ShortDescription>Deviation multiplier for upper band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations down</Name>
						<ShortDescription>Deviation multiplier for lower band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealUpperBand</Name>
						<Flags>
							<Flag>Upper Limit</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealMiddleBand</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outRealLowerBand</Name>
						<Flags>
							<Flag>Lower Limit</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations up</Name>
						<ShortDescription>Deviation multiplier for upper band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations down</Name>
						<ShortDescription>Deviation multiplier for lower band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BBANDS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations up</Name>
						<ShortDescription>Deviation multiplier for upper band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations down</Name>
						<ShortDescription>Deviation multiplier for lower band</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- BETA -->
	<FinancialFunctionGroup>
		<Abbreviation>BETA</Abbreviation>
		<CamelCaseName>Beta</CamelCaseName>
		<ShortDescription>Beta</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>S_xx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>S_xy</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>S_x</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>S_y</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prev_price_x</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prev_price_y</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>last_price_x</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>last_price_y</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>initialized</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_BETA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BETA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_BETA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- BOP -->
	<FinancialFunctionGroup>
		<Abbreviation>BOP</Abbreviation>
		<CamelCaseName>Bop</CamelCaseName>
		<ShortDescription>Balance Of Power</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_BOP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_BOP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_BOP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CCI -->
	<FinancialFunctionGroup>
		<Abbreviation>CCI</Abbreviation>
		<CamelCaseName>Cci</CamelCaseName>
		<ShortDescription>Commodity Channel Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>circBuf</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>theAverage</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CCI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CCI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CCI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL2CROWS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL2CROWS</Abbreviation>
		<CamelCaseName>Cdl2Crows</CamelCaseName>
		<ShortDescription>Two Crows</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL2CROWS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL2CROWS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3BLACKCROWS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3BLACKCROWS</Abbreviation>
		<CamelCaseName>Cdl3BlackCrows</CamelCaseName>
		<ShortDescription>Three Black Crows</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3BLACKCROWS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3BLACKCROWS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3INSIDE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3INSIDE</Abbreviation>
		<CamelCaseName>Cdl3Inside</CamelCaseName>
		<ShortDescription>Three Inside Up/Down</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3INSIDE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3INSIDE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3LINESTRIKE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3LINESTRIKE</Abbreviation>
		<CamelCaseName>Cdl3LineStrike</CamelCaseName>
		<ShortDescription>Three-Line Strike </ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3LINESTRIKE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3LINESTRIKE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3OUTSIDE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3OUTSIDE</Abbreviation>
		<CamelCaseName>Cdl3Outside</CamelCaseName>
		<ShortDescription>Three Outside Up/Down</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3OUTSIDE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3OUTSIDE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3STARSINSOUTH -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3STARSINSOUTH</Abbreviation>
		<CamelCaseName>Cdl3StarsInSouth</CamelCaseName>
		<ShortDescription>Three Stars In The South</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3STARSINSOUTH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDL3WHITESOLDIERS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDL3WHITESOLDIERS</Abbreviation>
		<CamelCaseName>Cdl3WhiteSoldiers</CamelCaseName>
		<ShortDescription>Three Advancing White Soldiers</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>FarPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>FarPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapFar</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodFar</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDL3WHITESOLDIERS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLABANDONEDBABY -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLABANDONEDBABY</Abbreviation>
		<CamelCaseName>CdlAbandonedBaby</CamelCaseName>
		<ShortDescription>Abandoned Baby</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLABANDONEDBABY_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLABANDONEDBABY_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLADVANCEBLOCK -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLADVANCEBLOCK</Abbreviation>
		<CamelCaseName>CdlAdvanceBlock</CamelCaseName>
		<ShortDescription>Advance Block</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>FarPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>FarPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapFar</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodFar</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLADVANCEBLOCK_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLBELTHOLD -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLBELTHOLD</Abbreviation>
		<CamelCaseName>CdlBeltHold</CamelCaseName>
		<ShortDescription>Belt-hold</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLBELTHOLD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBELTHOLD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLBREAKAWAY -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLBREAKAWAY</Abbreviation>
		<CamelCaseName>CdlBreakaway</CamelCaseName>
		<ShortDescription>Breakaway</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLBREAKAWAY_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLBREAKAWAY_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLCLOSINGMARUBOZU -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLCLOSINGMARUBOZU</Abbreviation>
		<CamelCaseName>CdlClosingMarubozu</CamelCaseName>
		<ShortDescription>Closing Marubozu</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCLOSINGMARUBOZU_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLCONCEALBABYSWALL -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLCONCEALBABYSWALL</Abbreviation>
		<CamelCaseName>CdlConcealBabysWall</CamelCaseName>
		<ShortDescription>Concealing Baby Swallow</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal3</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCONCEALBABYSWALL_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLCOUNTERATTACK -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLCOUNTERATTACK</Abbreviation>
		<CamelCaseName>CdlCounterAttack</CamelCaseName>
		<ShortDescription>Counterattack</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLCOUNTERATTACK_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLDARKCLOUDCOVER -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLDARKCLOUDCOVER</Abbreviation>
		<CamelCaseName>CdlDarkCloudCover</CamelCaseName>
		<ShortDescription>Dark Cloud Cover</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDARKCLOUDCOVER_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLDOJI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLDOJI</Abbreviation>
		<CamelCaseName>CdlDoji</CamelCaseName>
		<ShortDescription>Doji</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLDOJI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLDOJI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLDOJISTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLDOJISTAR</Abbreviation>
		<CamelCaseName>CdlDojiStar</CamelCaseName>
		<ShortDescription>Doji Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>DojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLDOJISTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDOJISTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLDRAGONFLYDOJI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLDRAGONFLYDOJI</Abbreviation>
		<CamelCaseName>CdlDragonflyDoji</CamelCaseName>
		<ShortDescription>Dragonfly Doji</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLDRAGONFLYDOJI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLENGULFING -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLENGULFING</Abbreviation>
		<CamelCaseName>CdlEngulfing</CamelCaseName>
		<ShortDescription>Engulfing Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLENGULFING_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLENGULFING_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLEVENINGDOJISTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLEVENINGDOJISTAR</Abbreviation>
		<CamelCaseName>CdlEveningDojiStar</CamelCaseName>
		<ShortDescription>Evening Doji Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGDOJISTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLEVENINGSTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLEVENINGSTAR</Abbreviation>
		<CamelCaseName>CdlEveningStar</CamelCaseName>
		<ShortDescription>Evening Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLEVENINGSTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLEVENINGSTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLGAPSIDESIDEWHITE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLGAPSIDESIDEWHITE</Abbreviation>
		<CamelCaseName>CdlGapSideSideWhite</CamelCaseName>
		<ShortDescription>Up/Down-gap side-by-side white lines</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGAPSIDESIDEWHITE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLGRAVESTONEDOJI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLGRAVESTONEDOJI</Abbreviation>
		<CamelCaseName>CdlGravestoneDoji</CamelCaseName>
		<ShortDescription>Gravestone Doji</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLGRAVESTONEDOJI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHAMMER -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHAMMER</Abbreviation>
		<CamelCaseName>CdlHammer</CamelCaseName>
		<ShortDescription>Hammer</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHAMMER_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHAMMER_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHANGINGMAN -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHANGINGMAN</Abbreviation>
		<CamelCaseName>CdlHangingMan</CamelCaseName>
		<ShortDescription>Hanging Man</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHANGINGMAN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHANGINGMAN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHARAMI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHARAMI</Abbreviation>
		<CamelCaseName>CdlHarami</CamelCaseName>
		<ShortDescription>Harami Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHARAMI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHARAMICROSS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHARAMICROSS</Abbreviation>
		<CamelCaseName>CdlHaramiCross</CamelCaseName>
		<ShortDescription>Harami Cross Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHARAMICROSS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHARAMICROSS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHIGHWAVE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHIGHWAVE</Abbreviation>
		<CamelCaseName>CdlHignWave</CamelCaseName>
		<ShortDescription>High-Wave Candle</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadow</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHIGHWAVE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIGHWAVE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHIKKAKE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHIKKAKE</Abbreviation>
		<CamelCaseName>CdlHikkake</CamelCaseName>
		<ShortDescription>Hikkake Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternResult</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>patternIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternLow</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHIKKAKE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHIKKAKEMOD -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHIKKAKEMOD</Abbreviation>
		<CamelCaseName>CdlHikkakeMod</CamelCaseName>
		<ShortDescription>Modified Hikkake Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternResult</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>patternIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>patternLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHIKKAKEMOD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLHOMINGPIGEON -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLHOMINGPIGEON</Abbreviation>
		<CamelCaseName>CdlHomingPigeon</CamelCaseName>
		<ShortDescription>Homing Pigeon</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLHOMINGPIGEON_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLIDENTICAL3CROWS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLIDENTICAL3CROWS</Abbreviation>
		<CamelCaseName>CdlIdentical3Crows</CamelCaseName>
		<ShortDescription>Identical Three Crows</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLIDENTICAL3CROWS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLINNECK -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLINNECK</Abbreviation>
		<CamelCaseName>CdlInNeck</CamelCaseName>
		<ShortDescription>In-Neck Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLINNECK_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLINNECK</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINNECK_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLINVERTEDHAMMER -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLINVERTEDHAMMER</Abbreviation>
		<CamelCaseName>CdlInvertedHammer</CamelCaseName>
		<ShortDescription>Inverted Hammer</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLINVERTEDHAMMER_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLKICKING -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLKICKING</Abbreviation>
		<CamelCaseName>CdlKicking</CamelCaseName>
		<ShortDescription>Kicking</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLKICKING_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLKICKING</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKING_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLKICKINGBYLENGTH -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLKICKINGBYLENGTH</Abbreviation>
		<CamelCaseName>CdlKickingByLength</CamelCaseName>
		<ShortDescription>Kicking - bull/bear determined by the longer marubozu</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLKICKINGBYLENGTH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLLADDERBOTTOM -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLLADDERBOTTOM</Abbreviation>
		<CamelCaseName>CdlLadderBottom</CamelCaseName>
		<ShortDescription>Ladder Bottom</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLADDERBOTTOM_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLLONGLEGGEDDOJI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLLONGLEGGEDDOJI</Abbreviation>
		<CamelCaseName>CdlLongLeggedDoji</CamelCaseName>
		<ShortDescription>Long Legged Doji</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLEGGEDDOJI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLLONGLINE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLLONGLINE</Abbreviation>
		<CamelCaseName>CdlLongLine</CamelCaseName>
		<ShortDescription>Long Line Candle</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadow</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLLONGLINE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLLONGLINE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLMARUBOZU -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLMARUBOZU</Abbreviation>
		<CamelCaseName>CdlMarubozu</CamelCaseName>
		<ShortDescription>Marubozu</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLMARUBOZU_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMARUBOZU_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLMATCHINGLOW -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLMATCHINGLOW</Abbreviation>
		<CamelCaseName>CdlMatchingLow</CamelCaseName>
		<ShortDescription>Matching Low</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLMATCHINGLOW_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATCHINGLOW_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLMATHOLD -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLMATHOLD</Abbreviation>
		<CamelCaseName>CdlMatHold</CamelCaseName>
		<ShortDescription>Mat Hold</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal4</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLMATHOLD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMATHOLD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLMORNINGDOJISTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLMORNINGDOJISTAR</Abbreviation>
		<CamelCaseName>CdlMorningDojiStar</CamelCaseName>
		<ShortDescription>Morning Doji Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGDOJISTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLMORNINGSTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLMORNINGSTAR</Abbreviation>
		<CamelCaseName>CdlMorningStar</CamelCaseName>
		<ShortDescription>Morning Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLMORNINGSTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLMORNINGSTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Penetration</Name>
						<ShortDescription>Percentage of penetration of a candle within another candle</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>0</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>3.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLONNECK -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLONNECK</Abbreviation>
		<CamelCaseName>CdlOnNeck</CamelCaseName>
		<ShortDescription>On-Neck Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLONNECK_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLONNECK</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLONNECK_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLPIERCING -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLPIERCING</Abbreviation>
		<CamelCaseName>CdlPiercing</CamelCaseName>
		<ShortDescription>Piercing Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLPIERCING_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLPIERCING_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLRICKSHAWMAN -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLRICKSHAWMAN</Abbreviation>
		<CamelCaseName>CdlRickshawMan</CamelCaseName>
		<ShortDescription>Rickshaw Man</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRICKSHAWMAN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLRISEFALL3METHODS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLRISEFALL3METHODS</Abbreviation>
		<CamelCaseName>CdlRiseFall3Methods</CamelCaseName>
		<ShortDescription>Rising/Falling Three Methods</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal0</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal4</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLRISEFALL3METHODS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSEPARATINGLINES -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSEPARATINGLINES</Abbreviation>
		<CamelCaseName>CdlSeperatingLines</CamelCaseName>
		<ShortDescription>Separating Lines</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSEPARATINGLINES_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSHOOTINGSTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSHOOTINGSTAR</Abbreviation>
		<CamelCaseName>CdlShootingStar</CamelCaseName>
		<ShortDescription>Shooting Star</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHOOTINGSTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSHORTLINE -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSHORTLINE</Abbreviation>
		<CamelCaseName>CdlShortLine</CamelCaseName>
		<ShortDescription>Short Line Candle</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadow</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSHORTLINE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSHORTLINE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSPINNINGTOP -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSPINNINGTOP</Abbreviation>
		<CamelCaseName>CdlSpinningTop</CamelCaseName>
		<ShortDescription>Spinning Top</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSPINNINGTOP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSPINNINGTOP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSTALLEDPATTERN -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSTALLEDPATTERN</Abbreviation>
		<CamelCaseName>CdlStalledPattern</CamelCaseName>
		<ShortDescription>Stalled Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal2</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTALLEDPATTERN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLSTICKSANDWICH -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLSTICKSANDWICH</Abbreviation>
		<CamelCaseName>CdlStickSandwhich</CamelCaseName>
		<ShortDescription>Stick Sandwich</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLSTICKSANDWICH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLTAKURI -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLTAKURI</Abbreviation>
		<CamelCaseName>CdlTakuri</CamelCaseName>
		<ShortDescription>Takuri (Dragonfly Doji with very long lower shadow)</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyDojiPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ShadowVeryLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyDoji</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodShadowVeryLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapShadowVeryLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLTAKURI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTAKURI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLTASUKIGAP -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLTASUKIGAP</Abbreviation>
		<CamelCaseName>CdlTasukiGap</CamelCaseName>
		<ShortDescription>Tasuki Gap</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>NearPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodNear</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapNear</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLTASUKIGAP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTASUKIGAP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLTHRUSTING -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLTHRUSTING</Abbreviation>
		<CamelCaseName>CdlThrusting</CamelCaseName>
		<ShortDescription>Thrusting Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>EqualPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodEqual</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapEqual</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLTHRUSTING_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTHRUSTING_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLTRISTAR -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLTRISTAR</Abbreviation>
		<CamelCaseName>CdlTristar</CamelCaseName>
		<ShortDescription>Tristar Pattern</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBody</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBody</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLTRISTAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLTRISTAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLUNIQUE3RIVER -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLUNIQUE3RIVER</Abbreviation>
		<CamelCaseName>CdlUnique3River</CamelCaseName>
		<ShortDescription>Unique 3 River</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUNIQUE3RIVER_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLUPSIDEGAP2CROWS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLUPSIDEGAP2CROWS</Abbreviation>
		<CamelCaseName>CdlUpsideGap2Crows</CamelCaseName>
		<ShortDescription>Upside Gap Two Crows</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyLongPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>BodyShortPeriodTotal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyLong</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>gapBodyShort</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>periodBodyShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLUPSIDEGAP2CROWS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CDLXSIDEGAP3METHODS -->
	<FinancialFunctionGroup>
		<Abbreviation>CDLXSIDEGAP3METHODS</Abbreviation>
		<CamelCaseName>CdlXSideGap3Methods</CamelCaseName>
		<ShortDescription>Upside/Downside Gap Three Methods</ShortDescription>
		<GroupId>Pattern Recognition</GroupId>
		<Flags>
			<Flag>Candlestick</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CDLXSIDEGAP3METHODS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CEIL -->
	<FinancialFunctionGroup>
		<Abbreviation>CEIL</Abbreviation>
		<CamelCaseName>Ceil</CamelCaseName>
		<ShortDescription>Vector Ceil</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CEIL_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_CEIL</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CEIL_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CMO -->
	<FinancialFunctionGroup>
		<Abbreviation>CMO</Abbreviation>
		<CamelCaseName>Cmo</CamelCaseName>
		<ShortDescription>Chande Momentum Oscillator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>MetastockMode</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevGain</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLoss</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevValue</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CMO_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CMO</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CMO_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- CORREL -->
	<FinancialFunctionGroup>
		<Abbreviation>CORREL</Abbreviation>
		<CamelCaseName>Correl</CamelCaseName>
		<ShortDescription>Pearson&apos;s Correlation Coefficient (r)</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumX2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumY2</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_CORREL_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_CORREL_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- COS -->
	<FinancialFunctionGroup>
		<Abbreviation>COS</Abbreviation>
		<CamelCaseName>Cos</CamelCaseName>
		<ShortDescription>Vector Trigonometric Cos</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_COS_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_COS</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COS_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COS_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COS_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COS_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COS_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COS_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- COSH -->
	<FinancialFunctionGroup>
		<Abbreviation>COSH</Abbreviation>
		<CamelCaseName>Cosh</CamelCaseName>
		<ShortDescription>Vector Trigonometric Cosh</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_COSH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_COSH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_COSH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- DEMA -->
	<FinancialFunctionGroup>
		<Abbreviation>DEMA</Abbreviation>
		<CamelCaseName>Dema</CamelCaseName>
		<ShortDescription>Double Exponential Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>state_EMA</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>state_EMA2</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_DEMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DEMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- DIV -->
	<FinancialFunctionGroup>
		<Abbreviation>DIV</Abbreviation>
		<CamelCaseName>Div</CamelCaseName>
		<ShortDescription>Vector Arithmetic Div</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_DIV_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_DIV</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_DIV_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- DX -->
	<FinancialFunctionGroup>
		<Abbreviation>DX</Abbreviation>
		<CamelCaseName>Dx</CamelCaseName>
		<ShortDescription>Directional Movement Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevClose</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMinusDM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPlusDM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevTR</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevOutReal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_DX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_DX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_DX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_DX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- EMA -->
	<FinancialFunctionGroup>
		<Abbreviation>EMA</Abbreviation>
		<CamelCaseName>Ema</CamelCaseName>
		<ShortDescription>Exponential Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>tempSum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>preprRes</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>optInK_1</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_EMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_EMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_EMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- EXP -->
	<FinancialFunctionGroup>
		<Abbreviation>EXP</Abbreviation>
		<CamelCaseName>Exp</CamelCaseName>
		<ShortDescription>Vector Arithmetic Exp</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_EXP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_EXP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_EXP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- FLOOR -->
	<FinancialFunctionGroup>
		<Abbreviation>FLOOR</Abbreviation>
		<CamelCaseName>Floor</CamelCaseName>
		<ShortDescription>Vector Floor</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_FLOOR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_FLOOR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_FLOOR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_DCPERIOD -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_DCPERIOD</Abbreviation>
		<CamelCaseName>HtDcPeriod</CamelCaseName>
		<ShortDescription>Hilbert Transform - Dominant Cycle Period</ShortDescription>
		<GroupId>Cycle Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>smoothPeriod</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_DCPERIOD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPERIOD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_DCPHASE -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_DCPHASE</Abbreviation>
		<CamelCaseName>HtDcPhase</CamelCaseName>
		<ShortDescription>Hilbert Transform - Dominant Cycle Phase</ShortDescription>
		<GroupId>Cycle Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>smoothPeriod</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>circBuf</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>DCPhase</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>constDeg2RadBy360</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_DCPHASE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_DCPHASE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_PHASOR -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_PHASOR</Abbreviation>
		<CamelCaseName>HtPhasor</CamelCaseName>
		<ShortDescription>Hilbert Transform - Phasor Components</ShortDescription>
		<GroupId>Cycle Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_PHASOR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outInPhase</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outQuadrature</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outInPhase</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outQuadrature</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outInPhase</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outQuadrature</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_PHASOR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_SINE -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_SINE</Abbreviation>
		<CamelCaseName>HtSine</CamelCaseName>
		<ShortDescription>Hilbert Transform - SineWave</ShortDescription>
		<GroupId>Cycle Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>smoothPeriod</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>circBuf</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>DCPhase</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>constDeg2RadBy360</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>deg2Rad</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_SINE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_SINE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSine</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outLeadSine</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outSine</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outLeadSine</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSine</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outLeadSine</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_SINE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_TRENDLINE -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_TRENDLINE</Abbreviation>
		<CamelCaseName>HtTrendline</CamelCaseName>
		<ShortDescription>Hilbert Transform - Instantaneous Trendline</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>smoothPeriod</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>circBuf</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend3</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_TRENDLINE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDLINE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- HT_TRENDMODE -->
	<FinancialFunctionGroup>
		<Abbreviation>HT_TRENDMODE</Abbreviation>
		<CamelCaseName>HtTrendMode</CamelCaseName>
		<ShortDescription>Hilbert Transform - Trend vs Cycle Mode</ShortDescription>
		<GroupId>Cycle Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>smoothPeriod</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>circBuf</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>DCPhase</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>constDeg2RadBy360</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>deg2Rad</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>iTrend3</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>daysInTrend</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevDCPhase</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevSine</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLeadSine</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_HT_TRENDMODE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_HT_TRENDMODE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- IMI -->
	<FinancialFunctionGroup>
		<Abbreviation>IMI</Abbreviation>
		<CamelCaseName>Imi</CamelCaseName>
		<ShortDescription>Intraday Momentum Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Open</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>upsum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>downsum</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_IMI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_IMI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Open</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_IMI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- KAMA -->
	<FinancialFunctionGroup>
		<Abbreviation>KAMA</Abbreviation>
		<CamelCaseName>Kama</CamelCaseName>
		<ShortDescription>Kaufman Adaptive Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sumROC1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>yestReal</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevKAMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingValue</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_KAMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_KAMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LINEARREG -->
	<FinancialFunctionGroup>
		<Abbreviation>LINEARREG</Abbreviation>
		<CamelCaseName>LinearReg</CamelCaseName>
		<ShortDescription>Linear Regression</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXSqr</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Divisor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LINEARREG_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LINEARREG_ANGLE -->
	<FinancialFunctionGroup>
		<Abbreviation>LINEARREG_ANGLE</Abbreviation>
		<CamelCaseName>LinearRegAngle</CamelCaseName>
		<ShortDescription>Linear Regression Angle</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXSqr</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Divisor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LINEARREG_ANGLE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_ANGLE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LINEARREG_INTERCEPT -->
	<FinancialFunctionGroup>
		<Abbreviation>LINEARREG_INTERCEPT</Abbreviation>
		<CamelCaseName>LinearRegIntercept</CamelCaseName>
		<ShortDescription>Linear Regression Intercept</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXSqr</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Divisor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_INTERCEPT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LINEARREG_SLOPE -->
	<FinancialFunctionGroup>
		<Abbreviation>LINEARREG_SLOPE</Abbreviation>
		<CamelCaseName>LinearRegSlope</CamelCaseName>
		<ShortDescription>Linear Regression Slope</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXSqr</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Divisor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LINEARREG_SLOPE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_LINEARREG_SLOPE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LN -->
	<FinancialFunctionGroup>
		<Abbreviation>LN</Abbreviation>
		<CamelCaseName>Ln</CamelCaseName>
		<ShortDescription>Vector Log Natural</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_LN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- LOG10 -->
	<FinancialFunctionGroup>
		<Abbreviation>LOG10</Abbreviation>
		<CamelCaseName>Log10</CamelCaseName>
		<ShortDescription>Vector Log10</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_LOG10_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_LOG10</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_LOG10_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MA -->
	<FinancialFunctionGroup>
		<Abbreviation>MA</Abbreviation>
		<CamelCaseName>MovingAverage</CamelCaseName>
		<ShortDescription>Moving average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>ta_state</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MACD -->
	<FinancialFunctionGroup>
		<Abbreviation>MACD</Abbreviation>
		<CamelCaseName>Macd</CamelCaseName>
		<ShortDescription>Moving Average Convergence/Divergence</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>slowEMAState</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>fastEMAState</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>signalEMAState</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>fastEMADelay</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MACD_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACD</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACD_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MACDEXT -->
	<FinancialFunctionGroup>
		<Abbreviation>MACDEXT</Abbreviation>
		<CamelCaseName>MacdExt</CamelCaseName>
		<ShortDescription>MACD with controllable MA type</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>slowMAState</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>fastMAState</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>signalMAState</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>fastMADelay</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MACDEXT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast MA</Name>
						<ShortDescription>Type of Moving Average for fast MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow MA</Name>
						<ShortDescription>Type of Moving Average for slow MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal MA</Name>
						<ShortDescription>Type of Moving Average for signal line</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast MA</Name>
						<ShortDescription>Type of Moving Average for fast MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow MA</Name>
						<ShortDescription>Type of Moving Average for slow MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal MA</Name>
						<ShortDescription>Type of Moving Average for signal line</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast MA</Name>
						<ShortDescription>Type of Moving Average for fast MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow MA</Name>
						<ShortDescription>Type of Moving Average for slow MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal MA</Name>
						<ShortDescription>Type of Moving Average for signal line</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast MA</Name>
						<ShortDescription>Type of Moving Average for fast MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow MA</Name>
						<ShortDescription>Type of Moving Average for slow MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal MA</Name>
						<ShortDescription>Type of Moving Average for signal line</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDEXT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast MA</Name>
						<ShortDescription>Type of Moving Average for fast MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow MA</Name>
						<ShortDescription>Type of Moving Average for slow MA</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Signal MA</Name>
						<ShortDescription>Type of Moving Average for signal line</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MACDFIX -->
	<FinancialFunctionGroup>
		<Abbreviation>MACDFIX</Abbreviation>
		<CamelCaseName>MacdFix</CamelCaseName>
		<ShortDescription>Moving Average Convergence/Divergence Fix 12/26</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MACDFIX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDSignal</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMACDHist</Name>
						<Flags>
							<Flag>Histogram</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MACDFIX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Signal Period</Name>
						<ShortDescription>Smoothing for the signal line (nb of period)</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>9</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MAMA -->
	<FinancialFunctionGroup>
		<Abbreviation>MAMA</Abbreviation>
		<CamelCaseName>Mama</CamelCaseName>
		<ShortDescription>MESA Adaptive Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>detrender</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>Q1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>jQ</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>hilbertIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodWMASum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>period</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForOddPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>I1ForEvenPrev3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevI2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevQ2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPhase</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>mama</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>fama</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Im</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Re</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>trailingWMAValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>rad2Deg</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MAMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Limit</Name>
						<ShortDescription>Upper limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>2.100000e-1</SuggestedStart>
							<SuggestedEnd>8.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Limit</Name>
						<ShortDescription>Lower limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>6.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-2</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Limit</Name>
						<ShortDescription>Upper limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>2.100000e-1</SuggestedStart>
							<SuggestedEnd>8.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Limit</Name>
						<ShortDescription>Lower limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>6.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-2</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMAMA</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFAMA</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Limit</Name>
						<ShortDescription>Upper limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>2.100000e-1</SuggestedStart>
							<SuggestedEnd>8.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Limit</Name>
						<ShortDescription>Lower limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>6.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-2</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMAMA</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outFAMA</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMAMA</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFAMA</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Limit</Name>
						<ShortDescription>Upper limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>2.100000e-1</SuggestedStart>
							<SuggestedEnd>8.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Limit</Name>
						<ShortDescription>Lower limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>6.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-2</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Limit</Name>
						<ShortDescription>Upper limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>2.100000e-1</SuggestedStart>
							<SuggestedEnd>8.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Limit</Name>
						<ShortDescription>Lower limit use in the adaptive algorithm</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>1.000000e-2</Minimum>
							<Maximum>9.900000e-1</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>6.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>5.000000e-2</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MAVP -->
	<FinancialFunctionGroup>
		<Abbreviation>MAVP</Abbreviation>
		<CamelCaseName>MovingAverageVariablePeriod</CamelCaseName>
		<ShortDescription>Moving average with variable period</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inPeriods</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>MAState</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MAVP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Minimum Period</Name>
						<ShortDescription>Value less than minimum will be changed to Minimum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Maximum Period</Name>
						<ShortDescription>Value higher than maximum will be changed to Maximum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inPeriods</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Minimum Period</Name>
						<ShortDescription>Value less than minimum will be changed to Minimum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Maximum Period</Name>
						<ShortDescription>Value higher than maximum will be changed to Maximum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Minimum Period</Name>
						<ShortDescription>Value less than minimum will be changed to Minimum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Maximum Period</Name>
						<ShortDescription>Value higher than maximum will be changed to Maximum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inPeriods</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inPeriods</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Minimum Period</Name>
						<ShortDescription>Value less than minimum will be changed to Minimum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Maximum Period</Name>
						<ShortDescription>Value higher than maximum will be changed to Maximum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAVP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Minimum Period</Name>
						<ShortDescription>Value less than minimum will be changed to Minimum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Maximum Period</Name>
						<ShortDescription>Value higher than maximum will be changed to Maximum period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MAX -->
	<FinancialFunctionGroup>
		<Abbreviation>MAX</Abbreviation>
		<CamelCaseName>Max</CamelCaseName>
		<ShortDescription>Highest value over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>max</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>maxIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MAX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MAXINDEX -->
	<FinancialFunctionGroup>
		<Abbreviation>MAXINDEX</Abbreviation>
		<CamelCaseName>MaxIndex</CamelCaseName>
		<ShortDescription>Index of highest value over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>max</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>maxIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MAXINDEX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MAXINDEX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MEDPRICE -->
	<FinancialFunctionGroup>
		<Abbreviation>MEDPRICE</Abbreviation>
		<CamelCaseName>MedPrice</CamelCaseName>
		<ShortDescription>Median Price</ShortDescription>
		<GroupId>Price Transform</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MEDPRICE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_MEDPRICE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MEDPRICE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MFI -->
	<FinancialFunctionGroup>
		<Abbreviation>MFI</Abbreviation>
		<CamelCaseName>Mfi</CamelCaseName>
		<ShortDescription>Money Flow Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>mflow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevValue</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>posSumMF</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>negSumMF</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MFI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MFI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MFI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MIDPOINT -->
	<FinancialFunctionGroup>
		<Abbreviation>MIDPOINT</Abbreviation>
		<CamelCaseName>MidPoint</CamelCaseName>
		<ShortDescription>MidPoint over period</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MIDPOINT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPOINT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MIDPRICE -->
	<FinancialFunctionGroup>
		<Abbreviation>MIDPRICE</Abbreviation>
		<CamelCaseName>MidPrice</CamelCaseName>
		<ShortDescription>Midpoint Price over period</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MIDPRICE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIDPRICE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MIN -->
	<FinancialFunctionGroup>
		<Abbreviation>MIN</Abbreviation>
		<CamelCaseName>Min</CamelCaseName>
		<ShortDescription>Lowest value over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>min</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>minIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MIN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MIN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MININDEX -->
	<FinancialFunctionGroup>
		<Abbreviation>MININDEX</Abbreviation>
		<CamelCaseName>MinIndex</CamelCaseName>
		<ShortDescription>Index of lowest value over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>min</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>minIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MININDEX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outInteger</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MININDEX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MINMAX -->
	<FinancialFunctionGroup>
		<Abbreviation>MINMAX</Abbreviation>
		<CamelCaseName>MinMax</CamelCaseName>
		<ShortDescription>Lowest and highest values over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>min</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>minIdx</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>max</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>maxIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MINMAX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMin</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMax</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMin</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outMax</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMin</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outMax</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MINMAXINDEX -->
	<FinancialFunctionGroup>
		<Abbreviation>MINMAXINDEX</Abbreviation>
		<CamelCaseName>MinMaxIndex</CamelCaseName>
		<ShortDescription>Indexes of lowest and highest values over a specified period</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>min</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>max</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>minIdx</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>maxIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MINMAXINDEX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outMinIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outMaxIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outMinIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer</Type>
						<Name>outMaxIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outMinIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Integer Array</Type>
						<Name>outMaxIdx</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINMAXINDEX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MINUS_DI -->
	<FinancialFunctionGroup>
		<Abbreviation>MINUS_DI</Abbreviation>
		<CamelCaseName>MinusDI</CamelCaseName>
		<ShortDescription>Minus Directional Indicator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevClose</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevTR</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMinusDM</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MINUS_DI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MINUS_DM -->
	<FinancialFunctionGroup>
		<Abbreviation>MINUS_DM</Abbreviation>
		<CamelCaseName>MinusDM</CamelCaseName>
		<ShortDescription>Minus Directional Movement</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMinusDM</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MINUS_DM_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MINUS_DM_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MOM -->
	<FinancialFunctionGroup>
		<Abbreviation>MOM</Abbreviation>
		<CamelCaseName>Mom</CamelCaseName>
		<ShortDescription>Momentum</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MOM_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MOM</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_MOM_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- MULT -->
	<FinancialFunctionGroup>
		<Abbreviation>MULT</Abbreviation>
		<CamelCaseName>Mult</CamelCaseName>
		<ShortDescription>Vector Arithmetic Mult</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_MULT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_MULT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_MULT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- NATR -->
	<FinancialFunctionGroup>
		<Abbreviation>NATR</Abbreviation>
		<CamelCaseName>Natr</CamelCaseName>
		<ShortDescription>Normalized Average True Range</ShortDescription>
		<GroupId>Volatility Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>StateTRANGE</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>StateSMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevATR</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>firstATR</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_NATR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_NATR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_NATR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- NVI -->
	<FinancialFunctionGroup>
		<Abbreviation>NVI</Abbreviation>
		<CamelCaseName>Nvi</CamelCaseName>
		<ShortDescription>Negative Volume Index</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevNVI</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_NVI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_NVI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_NVI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- OBV -->
	<FinancialFunctionGroup>
		<Abbreviation>OBV</Abbreviation>
		<CamelCaseName>Obv</CamelCaseName>
		<ShortDescription>On Balance Volume</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevOBV</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevReal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_OBV_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_OBV</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_OBV_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- PLUS_DI -->
	<FinancialFunctionGroup>
		<Abbreviation>PLUS_DI</Abbreviation>
		<CamelCaseName>PlusDI</CamelCaseName>
		<ShortDescription>Plus Directional Indicator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevClose</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevTR</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPlusDM</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_PLUS_DI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- PLUS_DM -->
	<FinancialFunctionGroup>
		<Abbreviation>PLUS_DM</Abbreviation>
		<CamelCaseName>PlusDM</CamelCaseName>
		<ShortDescription>Plus Directional Movement</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPlusDM</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_PLUS_DM_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PLUS_DM_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- PPO -->
	<FinancialFunctionGroup>
		<Abbreviation>PPO</Abbreviation>
		<CamelCaseName>Ppo</CamelCaseName>
		<ShortDescription>Percentage Price Oscillator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_PPO_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PPO</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_PPO_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast Period</Name>
						<ShortDescription>Number of period for the fast MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>12</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow Period</Name>
						<ShortDescription>Number of period for the slow MA</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>26</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>MA Type</Name>
						<ShortDescription>Type of Moving Average</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- PVI -->
	<FinancialFunctionGroup>
		<Abbreviation>PVI</Abbreviation>
		<CamelCaseName>Pvi</CamelCaseName>
		<ShortDescription>Positive Volume Index</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPVI</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_PVI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_PVI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- PVT -->
	<FinancialFunctionGroup>
		<Abbreviation>PVT</Abbreviation>
		<CamelCaseName>Pvt</CamelCaseName>
		<ShortDescription>Price Volume Trend</ShortDescription>
		<GroupId>Volume Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Volume</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevPVT</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_PVT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_PVT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Volume</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_PVT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ROC -->
	<FinancialFunctionGroup>
		<Abbreviation>ROC</Abbreviation>
		<CamelCaseName>Roc</CamelCaseName>
		<ShortDescription>Rate of change : ((price/prevPrice)-1)*100</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ROC_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROC</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROC_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ROCP -->
	<FinancialFunctionGroup>
		<Abbreviation>ROCP</Abbreviation>
		<CamelCaseName>RocP</CamelCaseName>
		<ShortDescription>Rate of change Percentage: (price-prevPrice)/prevPrice</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ROCP_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCP_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ROCR -->
	<FinancialFunctionGroup>
		<Abbreviation>ROCR</Abbreviation>
		<CamelCaseName>RocR</CamelCaseName>
		<ShortDescription>Rate of change ratio: (price/prevPrice)</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ROCR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ROCR100 -->
	<FinancialFunctionGroup>
		<Abbreviation>ROCR100</Abbreviation>
		<CamelCaseName>RocR100</CamelCaseName>
		<ShortDescription>Rate of change ratio 100 scale: (price/prevPrice)*100</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ROCR100_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ROCR100_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>10</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- RSI -->
	<FinancialFunctionGroup>
		<Abbreviation>RSI</Abbreviation>
		<CamelCaseName>Rsi</CamelCaseName>
		<ShortDescription>Relative Strength Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>MetastockMode</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevGain</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLoss</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevValue</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_RSI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_RSI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_RSI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SAR -->
	<FinancialFunctionGroup>
		<Abbreviation>SAR</Abbreviation>
		<CamelCaseName>Sar</CamelCaseName>
		<ShortDescription>Parabolic SAR</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>newHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>newLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>isLong</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMINUS_DM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sar</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ep</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>af</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Acceleration Factor</Name>
						<ShortDescription>Acceleration Factor used up to the Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Maximum</Name>
						<ShortDescription>Acceleration Factor Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Acceleration Factor</Name>
						<ShortDescription>Acceleration Factor used up to the Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Maximum</Name>
						<ShortDescription>Acceleration Factor Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Acceleration Factor</Name>
						<ShortDescription>Acceleration Factor used up to the Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Maximum</Name>
						<ShortDescription>Acceleration Factor Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Acceleration Factor</Name>
						<ShortDescription>Acceleration Factor used up to the Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Maximum</Name>
						<ShortDescription>Acceleration Factor Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Acceleration Factor</Name>
						<ShortDescription>Acceleration Factor used up to the Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Maximum</Name>
						<ShortDescription>Acceleration Factor Maximum value</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SAREXT -->
	<FinancialFunctionGroup>
		<Abbreviation>SAREXT</Abbreviation>
		<CamelCaseName>SarExt</CamelCaseName>
		<ShortDescription>Parabolic SAR - Extended</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>newHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>newLow</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevHigh</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevLow</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>isLong</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMINUS_DM</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>sar</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>ep</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>afLong</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>afShort</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SAREXT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Start Value</Name>
						<ShortDescription>Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Offset on Reverse</Name>
						<ShortDescription>Percent offset added/removed to initial stop on short/long reversal</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.500000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Long</Name>
						<ShortDescription>Acceleration Factor initial value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Long</Name>
						<ShortDescription>Acceleration Factor for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Long</Name>
						<ShortDescription>Acceleration Factor maximum value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Short</Name>
						<ShortDescription>Acceleration Factor initial value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Short</Name>
						<ShortDescription>Acceleration Factor for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Short</Name>
						<ShortDescription>Acceleration Factor maximum value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Start Value</Name>
						<ShortDescription>Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Offset on Reverse</Name>
						<ShortDescription>Percent offset added/removed to initial stop on short/long reversal</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.500000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Long</Name>
						<ShortDescription>Acceleration Factor initial value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Long</Name>
						<ShortDescription>Acceleration Factor for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Long</Name>
						<ShortDescription>Acceleration Factor maximum value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Short</Name>
						<ShortDescription>Acceleration Factor initial value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Short</Name>
						<ShortDescription>Acceleration Factor for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Short</Name>
						<ShortDescription>Acceleration Factor maximum value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Start Value</Name>
						<ShortDescription>Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Offset on Reverse</Name>
						<ShortDescription>Percent offset added/removed to initial stop on short/long reversal</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.500000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Long</Name>
						<ShortDescription>Acceleration Factor initial value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Long</Name>
						<ShortDescription>Acceleration Factor for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Long</Name>
						<ShortDescription>Acceleration Factor maximum value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Short</Name>
						<ShortDescription>Acceleration Factor initial value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Short</Name>
						<ShortDescription>Acceleration Factor for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Short</Name>
						<ShortDescription>Acceleration Factor maximum value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Start Value</Name>
						<ShortDescription>Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Offset on Reverse</Name>
						<ShortDescription>Percent offset added/removed to initial stop on short/long reversal</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.500000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Long</Name>
						<ShortDescription>Acceleration Factor initial value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Long</Name>
						<ShortDescription>Acceleration Factor for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Long</Name>
						<ShortDescription>Acceleration Factor maximum value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Short</Name>
						<ShortDescription>Acceleration Factor initial value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Short</Name>
						<ShortDescription>Acceleration Factor for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Short</Name>
						<ShortDescription>Acceleration Factor maximum value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SAREXT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Start Value</Name>
						<ShortDescription>Start value and direction. 0 for Auto, &gt;0 for Long, &lt;0 for Short</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>0.000000e+0</SuggestedStart>
							<SuggestedEnd>0.000000e+0</SuggestedEnd>
							<SuggestedIncrement>0.000000e+0</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Offset on Reverse</Name>
						<ShortDescription>Percent offset added/removed to initial stop on short/long reversal</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.500000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>0.000000e+0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Long</Name>
						<ShortDescription>Acceleration Factor initial value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Long</Name>
						<ShortDescription>Acceleration Factor for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Long</Name>
						<ShortDescription>Acceleration Factor maximum value for the Long direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Init Short</Name>
						<ShortDescription>Acceleration Factor initial value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.900000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Short</Name>
						<ShortDescription>Acceleration Factor for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>2.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-2</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>AF Max Short</Name>
						<ShortDescription>Acceleration Factor maximum value for the Short direction</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>4</Precision>
							<SuggestedStart>2.000000e-1</SuggestedStart>
							<SuggestedEnd>4.000000e-1</SuggestedEnd>
							<SuggestedIncrement>1.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>2.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SIN -->
	<FinancialFunctionGroup>
		<Abbreviation>SIN</Abbreviation>
		<CamelCaseName>Sin</CamelCaseName>
		<ShortDescription>Vector Trigonometric Sin</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SIN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_SIN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SIN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SINH -->
	<FinancialFunctionGroup>
		<Abbreviation>SINH</Abbreviation>
		<CamelCaseName>Sinh</CamelCaseName>
		<ShortDescription>Vector Trigonometric Sinh</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SINH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_SINH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SINH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SMA -->
	<FinancialFunctionGroup>
		<Abbreviation>SMA</Abbreviation>
		<CamelCaseName>Sma</CamelCaseName>
		<ShortDescription>Simple Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodTotal</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SQRT -->
	<FinancialFunctionGroup>
		<Abbreviation>SQRT</Abbreviation>
		<CamelCaseName>Sqrt</CamelCaseName>
		<ShortDescription>Vector Square Root</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SQRT_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_SQRT</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SQRT_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- STDDEV -->
	<FinancialFunctionGroup>
		<Abbreviation>STDDEV</Abbreviation>
		<CamelCaseName>StdDev</CamelCaseName>
		<ShortDescription>Standard Deviation</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>var_state</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_STDDEV_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STDDEV_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- STOCH -->
	<FinancialFunctionGroup>
		<Abbreviation>STOCH</Abbreviation>
		<CamelCaseName>Stoch</CamelCaseName>
		<ShortDescription>Stochastic</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>lowest</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>highest</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>lowest_exp</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>highest_exp</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMA1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMA2</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_STOCH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K Period</Name>
						<ShortDescription>Smoothing for making the Slow-K line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K MA</Name>
						<ShortDescription>Type of Moving Average for Slow-K</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D Period</Name>
						<ShortDescription>Smoothing for making the Slow-D line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D MA</Name>
						<ShortDescription>Type of Moving Average for Slow-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K Period</Name>
						<ShortDescription>Smoothing for making the Slow-K line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K MA</Name>
						<ShortDescription>Type of Moving Average for Slow-K</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D Period</Name>
						<ShortDescription>Smoothing for making the Slow-D line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D MA</Name>
						<ShortDescription>Type of Moving Average for Slow-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSlowK</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSlowD</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K Period</Name>
						<ShortDescription>Smoothing for making the Slow-K line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K MA</Name>
						<ShortDescription>Type of Moving Average for Slow-K</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D Period</Name>
						<ShortDescription>Smoothing for making the Slow-D line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D MA</Name>
						<ShortDescription>Type of Moving Average for Slow-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outSlowK</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outSlowD</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSlowK</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outSlowD</Name>
						<Flags>
							<Flag>Dashed Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K Period</Name>
						<ShortDescription>Smoothing for making the Slow-K line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K MA</Name>
						<ShortDescription>Type of Moving Average for Slow-K</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D Period</Name>
						<ShortDescription>Smoothing for making the Slow-D line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D MA</Name>
						<ShortDescription>Type of Moving Average for Slow-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K Period</Name>
						<ShortDescription>Smoothing for making the Slow-K line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-K MA</Name>
						<ShortDescription>Type of Moving Average for Slow-K</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D Period</Name>
						<ShortDescription>Smoothing for making the Slow-D line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Slow-D MA</Name>
						<ShortDescription>Type of Moving Average for Slow-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- STOCHF -->
	<FinancialFunctionGroup>
		<Abbreviation>STOCHF</Abbreviation>
		<CamelCaseName>StochF</CamelCaseName>
		<ShortDescription>Stochastic Fast</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>lowest</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>highest</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>lowest_exp</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>highest_exp</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateMA1</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_STOCHF_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHF_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- STOCHRSI -->
	<FinancialFunctionGroup>
		<Abbreviation>STOCHRSI</Abbreviation>
		<CamelCaseName>StochRsi</CamelCaseName>
		<ShortDescription>Stochastic Relative Strength Index</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<Flags>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateRSI</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateSTOCHF</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_STOCHRSI_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastK</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outFastD</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_STOCHRSI_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-K Period</Name>
						<ShortDescription>Time period for building the Fast-K line</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D Period</Name>
						<ShortDescription>Smoothing for making the Fast-D line. Usually set to 3</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>3</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Fast-D MA</Name>
						<ShortDescription>Type of Moving Average for Fast-D</ShortDescription>
						<Type>MA Type</Type>
						<DefaultValue>0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SUB -->
	<FinancialFunctionGroup>
		<Abbreviation>SUB</Abbreviation>
		<CamelCaseName>Sub</CamelCaseName>
		<ShortDescription>Vector Arithmetic Substraction</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal0</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal1</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SUB_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_SUB</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal0</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal1</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SUB_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- SUM -->
	<FinancialFunctionGroup>
		<Abbreviation>SUM</Abbreviation>
		<CamelCaseName>Sum</CamelCaseName>
		<ShortDescription>Summation</ShortDescription>
		<GroupId>Math Operators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>tempSum</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_SUM_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SUM</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_SUM_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- T3 -->
	<FinancialFunctionGroup>
		<Abbreviation>T3</Abbreviation>
		<CamelCaseName>T3</CamelCaseName>
		<ShortDescription>Triple Exponential Moving Average (T3)</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>k</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>one_minus_k</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e4</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e5</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>e6</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>c1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>c2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>c3</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>c4</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>tempReal</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>firstOutput</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_T3_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Volume Factor</Name>
						<ShortDescription>Volume Factor</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>1.000000e+0</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.000000e+0</SuggestedEnd>
							<SuggestedIncrement>5.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>7.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_T3</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Volume Factor</Name>
						<ShortDescription>Volume Factor</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>1.000000e+0</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.000000e+0</SuggestedEnd>
							<SuggestedIncrement>5.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>7.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_T3_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Volume Factor</Name>
						<ShortDescription>Volume Factor</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>1.000000e+0</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.000000e+0</SuggestedEnd>
							<SuggestedIncrement>5.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>7.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_T3_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_T3_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_T3_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_T3_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Volume Factor</Name>
						<ShortDescription>Volume Factor</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>1.000000e+0</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.000000e+0</SuggestedEnd>
							<SuggestedIncrement>5.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>7.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_T3_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Volume Factor</Name>
						<ShortDescription>Volume Factor</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>0.000000e+0</Minimum>
							<Maximum>1.000000e+0</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>1.000000e-2</SuggestedStart>
							<SuggestedEnd>1.000000e+0</SuggestedEnd>
							<SuggestedIncrement>5.000000e-2</SuggestedIncrement>
						</Range>
						<DefaultValue>7.000000e-1</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TAN -->
	<FinancialFunctionGroup>
		<Abbreviation>TAN</Abbreviation>
		<CamelCaseName>Tan</CamelCaseName>
		<ShortDescription>Vector Trigonometric Tan</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TAN_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_TAN</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TAN_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TANH -->
	<FinancialFunctionGroup>
		<Abbreviation>TANH</Abbreviation>
		<CamelCaseName>Tanh</CamelCaseName>
		<ShortDescription>Vector Trigonometric Tanh</ShortDescription>
		<GroupId>Math Transform</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TANH_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_TANH</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TANH_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TEMA -->
	<FinancialFunctionGroup>
		<Abbreviation>TEMA</Abbreviation>
		<CamelCaseName>Tema</CamelCaseName>
		<ShortDescription>Triple Exponential Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>state_EMA</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>state_EMA2</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>state_EMA3</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TEMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TEMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TRANGE -->
	<FinancialFunctionGroup>
		<Abbreviation>TRANGE</Abbreviation>
		<CamelCaseName>TrueRange</CamelCaseName>
		<ShortDescription>True Range</ShortDescription>
		<GroupId>Volatility Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TRANGE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_TRANGE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TRANGE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TRIMA -->
	<FinancialFunctionGroup>
		<Abbreviation>TRIMA</Abbreviation>
		<CamelCaseName>Trima</CamelCaseName>
		<ShortDescription>Triangular Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>numerator</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>numeratorSub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>numeratorAdd</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>factor</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>middleIdx</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TRIMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TRIX -->
	<FinancialFunctionGroup>
		<Abbreviation>TRIX</Abbreviation>
		<CamelCaseName>Trix</CamelCaseName>
		<ShortDescription>1-day Rate-Of-Change (ROC) of a Triple Smooth EMA</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateEMA1</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateEMA2</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateEMA3</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>stateROC</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TRIX_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TRIX_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TSF -->
	<FinancialFunctionGroup>
		<Abbreviation>TSF</Abbreviation>
		<CamelCaseName>Tsf</CamelCaseName>
		<ShortDescription>Time Series Forecast</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumX</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumY</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>SumXSqr</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>Divisor</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TSF_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TSF</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_TSF_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- TYPPRICE -->
	<FinancialFunctionGroup>
		<Abbreviation>TYPPRICE</Abbreviation>
		<CamelCaseName>TypPrice</CamelCaseName>
		<ShortDescription>Typical Price</ShortDescription>
		<GroupId>Price Transform</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_TYPPRICE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_TYPPRICE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_TYPPRICE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- ULTOSC -->
	<FinancialFunctionGroup>
		<Abbreviation>ULTOSC</Abbreviation>
		<CamelCaseName>UltOsc</CamelCaseName>
		<ShortDescription>Ultimate Oscillator</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>periodA</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>periodB</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a1Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a2Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>a3Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b1Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b2Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>b3Total</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevClose</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>gap2</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>gap1</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_ULTOSC_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>First Period</Name>
						<ShortDescription>Number of bars for 1st period.</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>7</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Second Period</Name>
						<ShortDescription>Number of bars fro 2nd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Third Period</Name>
						<ShortDescription>Number of bars for 3rd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>28</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>First Period</Name>
						<ShortDescription>Number of bars for 1st period.</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>7</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Second Period</Name>
						<ShortDescription>Number of bars fro 2nd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Third Period</Name>
						<ShortDescription>Number of bars for 3rd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>28</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>First Period</Name>
						<ShortDescription>Number of bars for 1st period.</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>7</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Second Period</Name>
						<ShortDescription>Number of bars fro 2nd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Third Period</Name>
						<ShortDescription>Number of bars for 3rd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>28</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>First Period</Name>
						<ShortDescription>Number of bars for 1st period.</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>7</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Second Period</Name>
						<ShortDescription>Number of bars fro 2nd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Third Period</Name>
						<ShortDescription>Number of bars for 3rd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>28</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_ULTOSC_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>First Period</Name>
						<ShortDescription>Number of bars for 1st period.</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>7</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Second Period</Name>
						<ShortDescription>Number of bars fro 2nd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Third Period</Name>
						<ShortDescription>Number of bars for 3rd period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>28</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- VAR -->
	<FinancialFunctionGroup>
		<Abbreviation>VAR</Abbreviation>
		<CamelCaseName>Variance</CamelCaseName>
		<ShortDescription>Variance</ShortDescription>
		<GroupId>Statistic Functions</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodTotal1</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodTotal2</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_VAR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_VAR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_VAR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>5</DefaultValue>
					</OptionalInputArgument>
					<OptionalInputArgument>
						<Name>Deviations</Name>
						<ShortDescription>Nb of deviations</ShortDescription>
						<Type>Double</Type>
						<Range>
							<Minimum>-3.000000e+37</Minimum>
							<Maximum>3.000000e+37</Maximum>
							<Precision>2</Precision>
							<SuggestedStart>-2.000000e+0</SuggestedStart>
							<SuggestedEnd>2.000000e+0</SuggestedEnd>
							<SuggestedIncrement>2.000000e-1</SuggestedIncrement>
						</Range>
						<DefaultValue>1.000000e+0</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- WCLPRICE -->
	<FinancialFunctionGroup>
		<Abbreviation>WCLPRICE</Abbreviation>
		<CamelCaseName>WclPrice</CamelCaseName>
		<ShortDescription>Weighted Close Price</ShortDescription>
		<GroupId>Price Transform</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_WCLPRICE_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
			</Function>
			<Function>
				<Name>TA_WCLPRICE</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WCLPRICE_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- WILLR -->
	<FinancialFunctionGroup>
		<Abbreviation>WILLR</Abbreviation>
		<CamelCaseName>WillR</CamelCaseName>
		<ShortDescription>Williams&apos; %R</ShortDescription>
		<GroupId>Momentum Indicators</GroupId>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>High</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Low</Name>
			</StateMemoryField>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>Close</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>lowest</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>highest</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>lowest_exp</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>highest_exp</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_WILLR_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>High</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Low</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>Close</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WILLR_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>2</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>14</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- WLMA -->
	<FinancialFunctionGroup>
		<Abbreviation>WLMA</Abbreviation>
		<CamelCaseName>Wlma</CamelCaseName>
		<ShortDescription>Wilders Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
			<Flag>Unstable Period</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>prevMA</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>tempSum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>preprRes</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>optInK_1</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_WLMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WLMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


	<!-- WMA -->
	<FinancialFunctionGroup>
		<Abbreviation>WMA</Abbreviation>
		<CamelCaseName>Wma</CamelCaseName>
		<ShortDescription>Weighted Moving Average</ShortDescription>
		<GroupId>Overlap Studies</GroupId>
		<Flags>
			<Flag>Overlap</Flag>
		</Flags>
		<StateMemory>
			<StateMemoryField>
				<Type>Double</Type>
				<Name>inReal</Name>
			</StateMemoryField>
		</StateMemory>
		<State>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_size</Name>
			</StateField>
			<StateField>
				<Type>Integer</Type>
				<Name>mem_index</Name>
			</StateField>
			<StateField>
				<Type>Pointer</Type>
				<Name>memory</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodSum</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>periodSub</Name>
			</StateField>
			<StateField>
				<Type>Double</Type>
				<Name>divider</Name>
			</StateField>
		</State>
		<Functions>
			<Function>
				<Name>TA_WMA_Lookback</Name>
				<Type>Lookback</Type>
				<ReturnValue>Integer</ReturnValue>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WMA</Name>
				<Type>Regular</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_StateInit</Name>
				<Type>StateInit</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_State</Name>
				<Type>State</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Double</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Double</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_BatchState</Name>
				<Type>BatchState</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<RequiredInputArguments>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>startIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Integer</Type>
						<Name>endIdx</Name>
					</RequiredInputArgument>
					<RequiredInputArgument>
						<Type>Double Array</Type>
						<Name>inReal</Name>
					</RequiredInputArgument>
				</RequiredInputArguments>
				<OutputArguments>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outBegIdx</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Pointer to Integer</Type>
						<Name>outNBElement</Name>
					</OutputArgument>
					<OutputArgument>
						<Type>Double Array</Type>
						<Name>outReal</Name>
						<Flags>
							<Flag>Line</Flag>
						</Flags>
					</OutputArgument>
				</OutputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_StateFree</Name>
				<Type>StateFree</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_StateLoad</Name>
				<Type>StateLoad</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer to Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
			<Function>
				<Name>TA_WMA_StateSave</Name>
				<Type>StateSave</Type>
				<ReturnValue>TA_Result</ReturnValue>
				<SpecialInputArguments>
					<SpecialInputArgument>
						<Type>Pointer</Type>
						<Name>state</Name>
					</SpecialInputArgument>
					<SpecialInputArgument>
						<Type>Pointer to File</Type>
						<Name>file</Name>
					</SpecialInputArgument>
				</SpecialInputArguments>
				<OptionalInputArguments>
					<OptionalInputArgument>
						<Name>Time Period</Name>
						<ShortDescription>Number of period</ShortDescription>
						<Type>Integer</Type>
						<Range>
							<Minimum>1</Minimum>
							<Maximum>100000</Maximum>
							<SuggestedStart>100000</SuggestedStart>
							<SuggestedEnd>100000</SuggestedEnd>
							<SuggestedIncrement>100000</SuggestedIncrement>
						</Range>
						<DefaultValue>30</DefaultValue>
					</OptionalInputArgument>
				</OptionalInputArguments>
			</Function>
		</Functions>
	</FinancialFunctionGroup>


</FinancialFunctionGroups>
